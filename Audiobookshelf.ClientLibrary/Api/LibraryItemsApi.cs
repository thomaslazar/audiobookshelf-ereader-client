/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Audiobookshelf.ClientLibrary.Client;
using Audiobookshelf.ClientLibrary.Model;

namespace Audiobookshelf.ClientLibrary.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILibraryItemsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Batch Delete Library Items
        /// </summary>
        /// <remarks>
        /// Batch deletes library items from the database. No files are deleted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDeleteItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void BatchDeleteItems(BatchDeleteItemsRequestModel batchDeleteItemsRequestModel, int operationIndex = 0);

        /// <summary>
        /// Batch Delete Library Items
        /// </summary>
        /// <remarks>
        /// Batch deletes library items from the database. No files are deleted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDeleteItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BatchDeleteItemsWithHttpInfo(BatchDeleteItemsRequestModel batchDeleteItemsRequestModel, int operationIndex = 0);
        /// <summary>
        /// Batch Get Library Items
        /// </summary>
        /// <remarks>
        /// Batch retrieves specified library items.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGetItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchGetItemsResponseModel</returns>
        BatchGetItemsResponseModel BatchGetItems(BatchGetItemsRequestModel batchGetItemsRequestModel, int operationIndex = 0);

        /// <summary>
        /// Batch Get Library Items
        /// </summary>
        /// <remarks>
        /// Batch retrieves specified library items.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGetItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchGetItemsResponseModel</returns>
        ApiResponse<BatchGetItemsResponseModel> BatchGetItemsWithHttpInfo(BatchGetItemsRequestModel batchGetItemsRequestModel, int operationIndex = 0);
        /// <summary>
        /// Batch Quick Match Library Items
        /// </summary>
        /// <remarks>
        /// Batch matches library items using quick match.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchQuickMatchItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void BatchQuickMatchItems(BatchQuickMatchItemsRequestModel batchQuickMatchItemsRequestModel, int operationIndex = 0);

        /// <summary>
        /// Batch Quick Match Library Items
        /// </summary>
        /// <remarks>
        /// Batch matches library items using quick match.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchQuickMatchItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BatchQuickMatchItemsWithHttpInfo(BatchQuickMatchItemsRequestModel batchQuickMatchItemsRequestModel, int operationIndex = 0);
        /// <summary>
        /// Batch Update Library Items
        /// </summary>
        /// <remarks>
        /// Batch updates library items.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateItemsRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchUpdateItemsResponseModel</returns>
        BatchUpdateItemsResponseModel BatchUpdateItems(List<BatchUpdateItemsRequestInnerModel> batchUpdateItemsRequestInnerModel, int operationIndex = 0);

        /// <summary>
        /// Batch Update Library Items
        /// </summary>
        /// <remarks>
        /// Batch updates library items.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateItemsRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchUpdateItemsResponseModel</returns>
        ApiResponse<BatchUpdateItemsResponseModel> BatchUpdateItemsWithHttpInfo(List<BatchUpdateItemsRequestInnerModel> batchUpdateItemsRequestInnerModel, int operationIndex = 0);
        /// <summary>
        /// Delete All Library Items
        /// </summary>
        /// <remarks>
        /// Deletes all library items from the database. No files are deleted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAllItems(int operationIndex = 0);

        /// <summary>
        /// Delete All Library Items
        /// </summary>
        /// <remarks>
        /// Deletes all library items from the database. No files are deleted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAllItemsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Delete a Library Item
        /// </summary>
        /// <remarks>
        /// Deletes a library item from the database. No files are deleted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteLibraryItem(string id, int operationIndex = 0);

        /// <summary>
        /// Delete a Library Item
        /// </summary>
        /// <remarks>
        /// Deletes a library item from the database. No files are deleted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLibraryItemWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get a Library Item&#39;s Cover
        /// </summary>
        /// <remarks>
        /// Retrieves a library item&#39;s cover image.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="raw"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetItemCover(string id, int? width = default(int?), int? height = default(int?), string? format = default(string?), int? raw = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a Library Item&#39;s Cover
        /// </summary>
        /// <remarks>
        /// Retrieves a library item&#39;s cover image.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="raw"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetItemCoverWithHttpInfo(string id, int? width = default(int?), int? height = default(int?), string? format = default(string?), int? raw = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a Library Item&#39;s Tone Metadata Object
        /// </summary>
        /// <remarks>
        /// Returns a tone metadata object for the library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object GetItemToneObject(string id, int operationIndex = 0);

        /// <summary>
        /// Get a Library Item&#39;s Tone Metadata Object
        /// </summary>
        /// <remarks>
        /// Returns a tone metadata object for the library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetItemToneObjectWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get a Library Item
        /// </summary>
        /// <remarks>
        /// Retrieves a library item by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expanded"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="episode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryItem200ResponseModel</returns>
        GetLibraryItem200ResponseModel GetLibraryItem(string id, int? expanded = default(int?), string? include = default(string?), string? episode = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get a Library Item
        /// </summary>
        /// <remarks>
        /// Retrieves a library item by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expanded"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="episode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryItem200ResponseModel</returns>
        ApiResponse<GetLibraryItem200ResponseModel> GetLibraryItemWithHttpInfo(string id, int? expanded = default(int?), string? include = default(string?), string? episode = default(string?), int operationIndex = 0);
        /// <summary>
        /// Match a Library Item
        /// </summary>
        /// <remarks>
        /// Matches the library item using quick match.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="matchItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatchItemResponseModel</returns>
        MatchItemResponseModel MatchItem(string id, MatchItemRequestModel? matchItemRequestModel = default(MatchItemRequestModel?), int operationIndex = 0);

        /// <summary>
        /// Match a Library Item
        /// </summary>
        /// <remarks>
        /// Matches the library item using quick match.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="matchItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatchItemResponseModel</returns>
        ApiResponse<MatchItemResponseModel> MatchItemWithHttpInfo(string id, MatchItemRequestModel? matchItemRequestModel = default(MatchItemRequestModel?), int operationIndex = 0);
        /// <summary>
        /// Play a Library Item
        /// </summary>
        /// <remarks>
        /// Starts a playback session for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaybackSessionExpandedModel</returns>
        PlaybackSessionExpandedModel PlayItem(string id, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0);

        /// <summary>
        /// Play a Library Item
        /// </summary>
        /// <remarks>
        /// Starts a playback session for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaybackSessionExpandedModel</returns>
        ApiResponse<PlaybackSessionExpandedModel> PlayItemWithHttpInfo(string id, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0);
        /// <summary>
        /// Play a Podcast Episode
        /// </summary>
        /// <remarks>
        /// Starts a playback session for a specific podcast episode.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="episodeId"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaybackSessionExpandedModel</returns>
        PlaybackSessionExpandedModel PlayItemEpisode(string id, string episodeId, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0);

        /// <summary>
        /// Play a Podcast Episode
        /// </summary>
        /// <remarks>
        /// Starts a playback session for a specific podcast episode.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="episodeId"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaybackSessionExpandedModel</returns>
        ApiResponse<PlaybackSessionExpandedModel> PlayItemEpisodeWithHttpInfo(string id, string episodeId, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0);
        /// <summary>
        /// Remove a Library Item&#39;s Cover
        /// </summary>
        /// <remarks>
        /// Removes a library item&#39;s cover image.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveItemCover(string id, int operationIndex = 0);

        /// <summary>
        /// Remove a Library Item&#39;s Cover
        /// </summary>
        /// <remarks>
        /// Removes a library item&#39;s cover image.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveItemCoverWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Scan a Library Item
        /// </summary>
        /// <remarks>
        /// Scans a library item for changes.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScanItemResponseModel</returns>
        ScanItemResponseModel ScanItem(string id, int operationIndex = 0);

        /// <summary>
        /// Scan a Library Item
        /// </summary>
        /// <remarks>
        /// Scans a library item for changes.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScanItemResponseModel</returns>
        ApiResponse<ScanItemResponseModel> ScanItemWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Tone Scan a Library Item
        /// </summary>
        /// <remarks>
        /// Scans an audio file of a library item with tone.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="index"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ToneScanItem(string id, int index, int operationIndex = 0);

        /// <summary>
        /// Tone Scan a Library Item
        /// </summary>
        /// <remarks>
        /// Scans an audio file of a library item with tone.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="index"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ToneScanItemWithHttpInfo(string id, int index, int operationIndex = 0);
        /// <summary>
        /// Update a Library Item&#39;s Chapters
        /// </summary>
        /// <remarks>
        /// Updates a library item&#39;s chapters (books only).
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemChaptersRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateItemChaptersResponseModel</returns>
        UpdateItemChaptersResponseModel UpdateItemChapters(string id, UpdateItemChaptersRequestModel updateItemChaptersRequestModel, int operationIndex = 0);

        /// <summary>
        /// Update a Library Item&#39;s Chapters
        /// </summary>
        /// <remarks>
        /// Updates a library item&#39;s chapters (books only).
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemChaptersRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateItemChaptersResponseModel</returns>
        ApiResponse<UpdateItemChaptersResponseModel> UpdateItemChaptersWithHttpInfo(string id, UpdateItemChaptersRequestModel updateItemChaptersRequestModel, int operationIndex = 0);
        /// <summary>
        /// Update a Library Item&#39;s Cover
        /// </summary>
        /// <remarks>
        /// Updates a library item&#39;s cover with an image already on the server.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemCoverRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateItemCoverResponseModel</returns>
        UpdateItemCoverResponseModel UpdateItemCover(string id, UpdateItemCoverRequestModel updateItemCoverRequestModel, int operationIndex = 0);

        /// <summary>
        /// Update a Library Item&#39;s Cover
        /// </summary>
        /// <remarks>
        /// Updates a library item&#39;s cover with an image already on the server.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemCoverRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateItemCoverResponseModel</returns>
        ApiResponse<UpdateItemCoverResponseModel> UpdateItemCoverWithHttpInfo(string id, UpdateItemCoverRequestModel updateItemCoverRequestModel, int operationIndex = 0);
        /// <summary>
        /// Update a Library Item&#39;s Media
        /// </summary>
        /// <remarks>
        /// Updates a library item&#39;s media and returns the updated library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateItemMediaResponseModel</returns>
        UpdateItemMediaResponseModel UpdateItemMedia(string id, Object body, int operationIndex = 0);

        /// <summary>
        /// Update a Library Item&#39;s Media
        /// </summary>
        /// <remarks>
        /// Updates a library item&#39;s media and returns the updated library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateItemMediaResponseModel</returns>
        ApiResponse<UpdateItemMediaResponseModel> UpdateItemMediaWithHttpInfo(string id, Object body, int operationIndex = 0);
        /// <summary>
        /// Update a Library Item&#39;s Audio Tracks
        /// </summary>
        /// <remarks>
        /// Updates the order/exclude status of a library item&#39;s audio files (books only).
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemTracksRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LibraryItemModel</returns>
        LibraryItemModel UpdateItemTracks(string id, UpdateItemTracksRequestModel updateItemTracksRequestModel, int operationIndex = 0);

        /// <summary>
        /// Update a Library Item&#39;s Audio Tracks
        /// </summary>
        /// <remarks>
        /// Updates the order/exclude status of a library item&#39;s audio files (books only).
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemTracksRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LibraryItemModel</returns>
        ApiResponse<LibraryItemModel> UpdateItemTracksWithHttpInfo(string id, UpdateItemTracksRequestModel updateItemTracksRequestModel, int operationIndex = 0);
        /// <summary>
        /// Upload a Library Item Cover
        /// </summary>
        /// <remarks>
        /// Uploads or downloads a cover image for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cover"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadItemCoverResponseModel</returns>
        UploadItemCoverResponseModel UploadItemCover(string id, System.IO.Stream? cover = default(System.IO.Stream?), int operationIndex = 0);

        /// <summary>
        /// Upload a Library Item Cover
        /// </summary>
        /// <remarks>
        /// Uploads or downloads a cover image for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cover"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadItemCoverResponseModel</returns>
        ApiResponse<UploadItemCoverResponseModel> UploadItemCoverWithHttpInfo(string id, System.IO.Stream? cover = default(System.IO.Stream?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILibraryItemsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Batch Delete Library Items
        /// </summary>
        /// <remarks>
        /// Batch deletes library items from the database. No files are deleted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDeleteItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BatchDeleteItemsAsync(BatchDeleteItemsRequestModel batchDeleteItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Batch Delete Library Items
        /// </summary>
        /// <remarks>
        /// Batch deletes library items from the database. No files are deleted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDeleteItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BatchDeleteItemsWithHttpInfoAsync(BatchDeleteItemsRequestModel batchDeleteItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Batch Get Library Items
        /// </summary>
        /// <remarks>
        /// Batch retrieves specified library items.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGetItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchGetItemsResponseModel</returns>
        System.Threading.Tasks.Task<BatchGetItemsResponseModel> BatchGetItemsAsync(BatchGetItemsRequestModel batchGetItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Batch Get Library Items
        /// </summary>
        /// <remarks>
        /// Batch retrieves specified library items.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGetItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchGetItemsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchGetItemsResponseModel>> BatchGetItemsWithHttpInfoAsync(BatchGetItemsRequestModel batchGetItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Batch Quick Match Library Items
        /// </summary>
        /// <remarks>
        /// Batch matches library items using quick match.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchQuickMatchItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BatchQuickMatchItemsAsync(BatchQuickMatchItemsRequestModel batchQuickMatchItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Batch Quick Match Library Items
        /// </summary>
        /// <remarks>
        /// Batch matches library items using quick match.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchQuickMatchItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BatchQuickMatchItemsWithHttpInfoAsync(BatchQuickMatchItemsRequestModel batchQuickMatchItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Batch Update Library Items
        /// </summary>
        /// <remarks>
        /// Batch updates library items.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateItemsRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchUpdateItemsResponseModel</returns>
        System.Threading.Tasks.Task<BatchUpdateItemsResponseModel> BatchUpdateItemsAsync(List<BatchUpdateItemsRequestInnerModel> batchUpdateItemsRequestInnerModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Batch Update Library Items
        /// </summary>
        /// <remarks>
        /// Batch updates library items.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateItemsRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchUpdateItemsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<BatchUpdateItemsResponseModel>> BatchUpdateItemsWithHttpInfoAsync(List<BatchUpdateItemsRequestInnerModel> batchUpdateItemsRequestInnerModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete All Library Items
        /// </summary>
        /// <remarks>
        /// Deletes all library items from the database. No files are deleted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAllItemsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete All Library Items
        /// </summary>
        /// <remarks>
        /// Deletes all library items from the database. No files are deleted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAllItemsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Library Item
        /// </summary>
        /// <remarks>
        /// Deletes a library item from the database. No files are deleted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLibraryItemAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Library Item
        /// </summary>
        /// <remarks>
        /// Deletes a library item from the database. No files are deleted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLibraryItemWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Library Item&#39;s Cover
        /// </summary>
        /// <remarks>
        /// Retrieves a library item&#39;s cover image.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="raw"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetItemCoverAsync(string id, int? width = default(int?), int? height = default(int?), string? format = default(string?), int? raw = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Library Item&#39;s Cover
        /// </summary>
        /// <remarks>
        /// Retrieves a library item&#39;s cover image.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="raw"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemCoverWithHttpInfoAsync(string id, int? width = default(int?), int? height = default(int?), string? format = default(string?), int? raw = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Library Item&#39;s Tone Metadata Object
        /// </summary>
        /// <remarks>
        /// Returns a tone metadata object for the library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetItemToneObjectAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Library Item&#39;s Tone Metadata Object
        /// </summary>
        /// <remarks>
        /// Returns a tone metadata object for the library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetItemToneObjectWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Library Item
        /// </summary>
        /// <remarks>
        /// Retrieves a library item by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expanded"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="episode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryItem200ResponseModel</returns>
        System.Threading.Tasks.Task<GetLibraryItem200ResponseModel> GetLibraryItemAsync(string id, int? expanded = default(int?), string? include = default(string?), string? episode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Library Item
        /// </summary>
        /// <remarks>
        /// Retrieves a library item by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expanded"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="episode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryItem200ResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLibraryItem200ResponseModel>> GetLibraryItemWithHttpInfoAsync(string id, int? expanded = default(int?), string? include = default(string?), string? episode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Match a Library Item
        /// </summary>
        /// <remarks>
        /// Matches the library item using quick match.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="matchItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchItemResponseModel</returns>
        System.Threading.Tasks.Task<MatchItemResponseModel> MatchItemAsync(string id, MatchItemRequestModel? matchItemRequestModel = default(MatchItemRequestModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Match a Library Item
        /// </summary>
        /// <remarks>
        /// Matches the library item using quick match.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="matchItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchItemResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<MatchItemResponseModel>> MatchItemWithHttpInfoAsync(string id, MatchItemRequestModel? matchItemRequestModel = default(MatchItemRequestModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Play a Library Item
        /// </summary>
        /// <remarks>
        /// Starts a playback session for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaybackSessionExpandedModel</returns>
        System.Threading.Tasks.Task<PlaybackSessionExpandedModel> PlayItemAsync(string id, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Play a Library Item
        /// </summary>
        /// <remarks>
        /// Starts a playback session for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaybackSessionExpandedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaybackSessionExpandedModel>> PlayItemWithHttpInfoAsync(string id, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Play a Podcast Episode
        /// </summary>
        /// <remarks>
        /// Starts a playback session for a specific podcast episode.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="episodeId"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaybackSessionExpandedModel</returns>
        System.Threading.Tasks.Task<PlaybackSessionExpandedModel> PlayItemEpisodeAsync(string id, string episodeId, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Play a Podcast Episode
        /// </summary>
        /// <remarks>
        /// Starts a playback session for a specific podcast episode.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="episodeId"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaybackSessionExpandedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaybackSessionExpandedModel>> PlayItemEpisodeWithHttpInfoAsync(string id, string episodeId, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove a Library Item&#39;s Cover
        /// </summary>
        /// <remarks>
        /// Removes a library item&#39;s cover image.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveItemCoverAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove a Library Item&#39;s Cover
        /// </summary>
        /// <remarks>
        /// Removes a library item&#39;s cover image.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveItemCoverWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Scan a Library Item
        /// </summary>
        /// <remarks>
        /// Scans a library item for changes.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScanItemResponseModel</returns>
        System.Threading.Tasks.Task<ScanItemResponseModel> ScanItemAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Scan a Library Item
        /// </summary>
        /// <remarks>
        /// Scans a library item for changes.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScanItemResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScanItemResponseModel>> ScanItemWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Tone Scan a Library Item
        /// </summary>
        /// <remarks>
        /// Scans an audio file of a library item with tone.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="index"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ToneScanItemAsync(string id, int index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Tone Scan a Library Item
        /// </summary>
        /// <remarks>
        /// Scans an audio file of a library item with tone.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="index"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ToneScanItemWithHttpInfoAsync(string id, int index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Library Item&#39;s Chapters
        /// </summary>
        /// <remarks>
        /// Updates a library item&#39;s chapters (books only).
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemChaptersRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateItemChaptersResponseModel</returns>
        System.Threading.Tasks.Task<UpdateItemChaptersResponseModel> UpdateItemChaptersAsync(string id, UpdateItemChaptersRequestModel updateItemChaptersRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Library Item&#39;s Chapters
        /// </summary>
        /// <remarks>
        /// Updates a library item&#39;s chapters (books only).
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemChaptersRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateItemChaptersResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateItemChaptersResponseModel>> UpdateItemChaptersWithHttpInfoAsync(string id, UpdateItemChaptersRequestModel updateItemChaptersRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Library Item&#39;s Cover
        /// </summary>
        /// <remarks>
        /// Updates a library item&#39;s cover with an image already on the server.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemCoverRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateItemCoverResponseModel</returns>
        System.Threading.Tasks.Task<UpdateItemCoverResponseModel> UpdateItemCoverAsync(string id, UpdateItemCoverRequestModel updateItemCoverRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Library Item&#39;s Cover
        /// </summary>
        /// <remarks>
        /// Updates a library item&#39;s cover with an image already on the server.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemCoverRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateItemCoverResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateItemCoverResponseModel>> UpdateItemCoverWithHttpInfoAsync(string id, UpdateItemCoverRequestModel updateItemCoverRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Library Item&#39;s Media
        /// </summary>
        /// <remarks>
        /// Updates a library item&#39;s media and returns the updated library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateItemMediaResponseModel</returns>
        System.Threading.Tasks.Task<UpdateItemMediaResponseModel> UpdateItemMediaAsync(string id, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Library Item&#39;s Media
        /// </summary>
        /// <remarks>
        /// Updates a library item&#39;s media and returns the updated library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateItemMediaResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateItemMediaResponseModel>> UpdateItemMediaWithHttpInfoAsync(string id, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Library Item&#39;s Audio Tracks
        /// </summary>
        /// <remarks>
        /// Updates the order/exclude status of a library item&#39;s audio files (books only).
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemTracksRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LibraryItemModel</returns>
        System.Threading.Tasks.Task<LibraryItemModel> UpdateItemTracksAsync(string id, UpdateItemTracksRequestModel updateItemTracksRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Library Item&#39;s Audio Tracks
        /// </summary>
        /// <remarks>
        /// Updates the order/exclude status of a library item&#39;s audio files (books only).
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemTracksRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LibraryItemModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryItemModel>> UpdateItemTracksWithHttpInfoAsync(string id, UpdateItemTracksRequestModel updateItemTracksRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Upload a Library Item Cover
        /// </summary>
        /// <remarks>
        /// Uploads or downloads a cover image for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cover"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadItemCoverResponseModel</returns>
        System.Threading.Tasks.Task<UploadItemCoverResponseModel> UploadItemCoverAsync(string id, System.IO.Stream? cover = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Upload a Library Item Cover
        /// </summary>
        /// <remarks>
        /// Uploads or downloads a cover image for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cover"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadItemCoverResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadItemCoverResponseModel>> UploadItemCoverWithHttpInfoAsync(string id, System.IO.Stream? cover = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILibraryItemsApi : ILibraryItemsApiSync, ILibraryItemsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LibraryItemsApi : ILibraryItemsApi
    {
        private Audiobookshelf.ClientLibrary.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LibraryItemsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LibraryItemsApi(string basePath)
        {
            this.Configuration = Audiobookshelf.ClientLibrary.Client.Configuration.MergeConfigurations(
                Audiobookshelf.ClientLibrary.Client.GlobalConfiguration.Instance,
                new Audiobookshelf.ClientLibrary.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LibraryItemsApi(Audiobookshelf.ClientLibrary.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Audiobookshelf.ClientLibrary.Client.Configuration.MergeConfigurations(
                Audiobookshelf.ClientLibrary.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryItemsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LibraryItemsApi(Audiobookshelf.ClientLibrary.Client.ISynchronousClient client, Audiobookshelf.ClientLibrary.Client.IAsynchronousClient asyncClient, Audiobookshelf.ClientLibrary.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Audiobookshelf.ClientLibrary.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Batch Delete Library Items Batch deletes library items from the database. No files are deleted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDeleteItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void BatchDeleteItems(BatchDeleteItemsRequestModel batchDeleteItemsRequestModel, int operationIndex = 0)
        {
            BatchDeleteItemsWithHttpInfo(batchDeleteItemsRequestModel);
        }

        /// <summary>
        /// Batch Delete Library Items Batch deletes library items from the database. No files are deleted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDeleteItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> BatchDeleteItemsWithHttpInfo(BatchDeleteItemsRequestModel batchDeleteItemsRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'batchDeleteItemsRequestModel' is set
            if (batchDeleteItemsRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'batchDeleteItemsRequestModel' when calling LibraryItemsApi->BatchDeleteItems");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchDeleteItemsRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.BatchDeleteItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/items/batch/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchDeleteItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Delete Library Items Batch deletes library items from the database. No files are deleted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDeleteItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BatchDeleteItemsAsync(BatchDeleteItemsRequestModel batchDeleteItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await BatchDeleteItemsWithHttpInfoAsync(batchDeleteItemsRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Batch Delete Library Items Batch deletes library items from the database. No files are deleted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchDeleteItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> BatchDeleteItemsWithHttpInfoAsync(BatchDeleteItemsRequestModel batchDeleteItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchDeleteItemsRequestModel' is set
            if (batchDeleteItemsRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'batchDeleteItemsRequestModel' when calling LibraryItemsApi->BatchDeleteItems");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchDeleteItemsRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.BatchDeleteItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/items/batch/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchDeleteItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Get Library Items Batch retrieves specified library items.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGetItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchGetItemsResponseModel</returns>
        public BatchGetItemsResponseModel BatchGetItems(BatchGetItemsRequestModel batchGetItemsRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<BatchGetItemsResponseModel> localVarResponse = BatchGetItemsWithHttpInfo(batchGetItemsRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Get Library Items Batch retrieves specified library items.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGetItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchGetItemsResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<BatchGetItemsResponseModel> BatchGetItemsWithHttpInfo(BatchGetItemsRequestModel batchGetItemsRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'batchGetItemsRequestModel' is set
            if (batchGetItemsRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'batchGetItemsRequestModel' when calling LibraryItemsApi->BatchGetItems");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchGetItemsRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.BatchGetItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchGetItemsResponseModel>("/api/items/batch/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchGetItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Get Library Items Batch retrieves specified library items.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGetItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchGetItemsResponseModel</returns>
        public async System.Threading.Tasks.Task<BatchGetItemsResponseModel> BatchGetItemsAsync(BatchGetItemsRequestModel batchGetItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<BatchGetItemsResponseModel> localVarResponse = await BatchGetItemsWithHttpInfoAsync(batchGetItemsRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Get Library Items Batch retrieves specified library items.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGetItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchGetItemsResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<BatchGetItemsResponseModel>> BatchGetItemsWithHttpInfoAsync(BatchGetItemsRequestModel batchGetItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchGetItemsRequestModel' is set
            if (batchGetItemsRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'batchGetItemsRequestModel' when calling LibraryItemsApi->BatchGetItems");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchGetItemsRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.BatchGetItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchGetItemsResponseModel>("/api/items/batch/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchGetItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Quick Match Library Items Batch matches library items using quick match.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchQuickMatchItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void BatchQuickMatchItems(BatchQuickMatchItemsRequestModel batchQuickMatchItemsRequestModel, int operationIndex = 0)
        {
            BatchQuickMatchItemsWithHttpInfo(batchQuickMatchItemsRequestModel);
        }

        /// <summary>
        /// Batch Quick Match Library Items Batch matches library items using quick match.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchQuickMatchItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> BatchQuickMatchItemsWithHttpInfo(BatchQuickMatchItemsRequestModel batchQuickMatchItemsRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'batchQuickMatchItemsRequestModel' is set
            if (batchQuickMatchItemsRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'batchQuickMatchItemsRequestModel' when calling LibraryItemsApi->BatchQuickMatchItems");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchQuickMatchItemsRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.BatchQuickMatchItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/items/batch/quickmatch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchQuickMatchItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Quick Match Library Items Batch matches library items using quick match.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchQuickMatchItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BatchQuickMatchItemsAsync(BatchQuickMatchItemsRequestModel batchQuickMatchItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await BatchQuickMatchItemsWithHttpInfoAsync(batchQuickMatchItemsRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Batch Quick Match Library Items Batch matches library items using quick match.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchQuickMatchItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> BatchQuickMatchItemsWithHttpInfoAsync(BatchQuickMatchItemsRequestModel batchQuickMatchItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchQuickMatchItemsRequestModel' is set
            if (batchQuickMatchItemsRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'batchQuickMatchItemsRequestModel' when calling LibraryItemsApi->BatchQuickMatchItems");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchQuickMatchItemsRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.BatchQuickMatchItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/items/batch/quickmatch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchQuickMatchItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Update Library Items Batch updates library items.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateItemsRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BatchUpdateItemsResponseModel</returns>
        public BatchUpdateItemsResponseModel BatchUpdateItems(List<BatchUpdateItemsRequestInnerModel> batchUpdateItemsRequestInnerModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<BatchUpdateItemsResponseModel> localVarResponse = BatchUpdateItemsWithHttpInfo(batchUpdateItemsRequestInnerModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Update Library Items Batch updates library items.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateItemsRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BatchUpdateItemsResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<BatchUpdateItemsResponseModel> BatchUpdateItemsWithHttpInfo(List<BatchUpdateItemsRequestInnerModel> batchUpdateItemsRequestInnerModel, int operationIndex = 0)
        {
            // verify the required parameter 'batchUpdateItemsRequestInnerModel' is set
            if (batchUpdateItemsRequestInnerModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'batchUpdateItemsRequestInnerModel' when calling LibraryItemsApi->BatchUpdateItems");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchUpdateItemsRequestInnerModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.BatchUpdateItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BatchUpdateItemsResponseModel>("/api/items/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Update Library Items Batch updates library items.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateItemsRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BatchUpdateItemsResponseModel</returns>
        public async System.Threading.Tasks.Task<BatchUpdateItemsResponseModel> BatchUpdateItemsAsync(List<BatchUpdateItemsRequestInnerModel> batchUpdateItemsRequestInnerModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<BatchUpdateItemsResponseModel> localVarResponse = await BatchUpdateItemsWithHttpInfoAsync(batchUpdateItemsRequestInnerModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Update Library Items Batch updates library items.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateItemsRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BatchUpdateItemsResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<BatchUpdateItemsResponseModel>> BatchUpdateItemsWithHttpInfoAsync(List<BatchUpdateItemsRequestInnerModel> batchUpdateItemsRequestInnerModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchUpdateItemsRequestInnerModel' is set
            if (batchUpdateItemsRequestInnerModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'batchUpdateItemsRequestInnerModel' when calling LibraryItemsApi->BatchUpdateItems");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchUpdateItemsRequestInnerModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.BatchUpdateItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BatchUpdateItemsResponseModel>("/api/items/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete All Library Items Deletes all library items from the database. No files are deleted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAllItems(int operationIndex = 0)
        {
            DeleteAllItemsWithHttpInfo();
        }

        /// <summary>
        /// Delete All Library Items Deletes all library items from the database. No files are deleted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> DeleteAllItemsWithHttpInfo(int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LibraryItemsApi.DeleteAllItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/items/all", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete All Library Items Deletes all library items from the database. No files are deleted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAllItemsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteAllItemsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete All Library Items Deletes all library items from the database. No files are deleted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> DeleteAllItemsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LibraryItemsApi.DeleteAllItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/items/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAllItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Library Item Deletes a library item from the database. No files are deleted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteLibraryItem(string id, int operationIndex = 0)
        {
            DeleteLibraryItemWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a Library Item Deletes a library item from the database. No files are deleted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> DeleteLibraryItemWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->DeleteLibraryItem");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibraryItemsApi.DeleteLibraryItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/items/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLibraryItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Library Item Deletes a library item from the database. No files are deleted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLibraryItemAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteLibraryItemWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Library Item Deletes a library item from the database. No files are deleted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> DeleteLibraryItemWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->DeleteLibraryItem");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibraryItemsApi.DeleteLibraryItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/items/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLibraryItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library Item&#39;s Cover Retrieves a library item&#39;s cover image.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="raw"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetItemCover(string id, int? width = default(int?), int? height = default(int?), string? format = default(string?), int? raw = default(int?), int operationIndex = 0)
        {
            GetItemCoverWithHttpInfo(id, width, height, format, raw);
        }

        /// <summary>
        /// Get a Library Item&#39;s Cover Retrieves a library item&#39;s cover image.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="raw"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> GetItemCoverWithHttpInfo(string id, int? width = default(int?), int? height = default(int?), string? format = default(string?), int? raw = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->GetItemCover");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (width != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "width", width));
            }
            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }

            localVarRequestOptions.Operation = "LibraryItemsApi.GetItemCover";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/items/{id}/cover", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemCover", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library Item&#39;s Cover Retrieves a library item&#39;s cover image.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="raw"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetItemCoverAsync(string id, int? width = default(int?), int? height = default(int?), string? format = default(string?), int? raw = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GetItemCoverWithHttpInfoAsync(id, width, height, format, raw, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a Library Item&#39;s Cover Retrieves a library item&#39;s cover image.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="width"> (optional)</param>
        /// <param name="height"> (optional)</param>
        /// <param name="format"> (optional)</param>
        /// <param name="raw"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> GetItemCoverWithHttpInfoAsync(string id, int? width = default(int?), int? height = default(int?), string? format = default(string?), int? raw = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->GetItemCover");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (width != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "width", width));
            }
            if (height != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "height", height));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (raw != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "raw", raw));
            }

            localVarRequestOptions.Operation = "LibraryItemsApi.GetItemCover";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/items/{id}/cover", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemCover", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library Item&#39;s Tone Metadata Object Returns a tone metadata object for the library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object GetItemToneObject(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> localVarResponse = GetItemToneObjectWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library Item&#39;s Tone Metadata Object Returns a tone metadata object for the library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> GetItemToneObjectWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->GetItemToneObject");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibraryItemsApi.GetItemToneObject";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/items/{id}/tone-object", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemToneObject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library Item&#39;s Tone Metadata Object Returns a tone metadata object for the library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetItemToneObjectAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> localVarResponse = await GetItemToneObjectWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library Item&#39;s Tone Metadata Object Returns a tone metadata object for the library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> GetItemToneObjectWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->GetItemToneObject");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibraryItemsApi.GetItemToneObject";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/items/{id}/tone-object", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetItemToneObject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library Item Retrieves a library item by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expanded"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="episode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryItem200ResponseModel</returns>
        public GetLibraryItem200ResponseModel GetLibraryItem(string id, int? expanded = default(int?), string? include = default(string?), string? episode = default(string?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryItem200ResponseModel> localVarResponse = GetLibraryItemWithHttpInfo(id, expanded, include, episode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library Item Retrieves a library item by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expanded"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="episode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryItem200ResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryItem200ResponseModel> GetLibraryItemWithHttpInfo(string id, int? expanded = default(int?), string? include = default(string?), string? episode = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->GetLibraryItem");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (expanded != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "expanded", expanded));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            if (episode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "episode", episode));
            }

            localVarRequestOptions.Operation = "LibraryItemsApi.GetLibraryItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetLibraryItem200ResponseModel>("/api/items/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library Item Retrieves a library item by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expanded"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="episode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryItem200ResponseModel</returns>
        public async System.Threading.Tasks.Task<GetLibraryItem200ResponseModel> GetLibraryItemAsync(string id, int? expanded = default(int?), string? include = default(string?), string? episode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryItem200ResponseModel> localVarResponse = await GetLibraryItemWithHttpInfoAsync(id, expanded, include, episode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library Item Retrieves a library item by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="expanded"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="episode"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryItem200ResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryItem200ResponseModel>> GetLibraryItemWithHttpInfoAsync(string id, int? expanded = default(int?), string? include = default(string?), string? episode = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->GetLibraryItem");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (expanded != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "expanded", expanded));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            if (episode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "episode", episode));
            }

            localVarRequestOptions.Operation = "LibraryItemsApi.GetLibraryItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetLibraryItem200ResponseModel>("/api/items/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Match a Library Item Matches the library item using quick match.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="matchItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MatchItemResponseModel</returns>
        public MatchItemResponseModel MatchItem(string id, MatchItemRequestModel? matchItemRequestModel = default(MatchItemRequestModel?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<MatchItemResponseModel> localVarResponse = MatchItemWithHttpInfo(id, matchItemRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Match a Library Item Matches the library item using quick match.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="matchItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MatchItemResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<MatchItemResponseModel> MatchItemWithHttpInfo(string id, MatchItemRequestModel? matchItemRequestModel = default(MatchItemRequestModel?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->MatchItem");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = matchItemRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.MatchItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MatchItemResponseModel>("/api/items/{id}/match", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Match a Library Item Matches the library item using quick match.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="matchItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MatchItemResponseModel</returns>
        public async System.Threading.Tasks.Task<MatchItemResponseModel> MatchItemAsync(string id, MatchItemRequestModel? matchItemRequestModel = default(MatchItemRequestModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<MatchItemResponseModel> localVarResponse = await MatchItemWithHttpInfoAsync(id, matchItemRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Match a Library Item Matches the library item using quick match.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="matchItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MatchItemResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<MatchItemResponseModel>> MatchItemWithHttpInfoAsync(string id, MatchItemRequestModel? matchItemRequestModel = default(MatchItemRequestModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->MatchItem");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = matchItemRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.MatchItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MatchItemResponseModel>("/api/items/{id}/match", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Play a Library Item Starts a playback session for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaybackSessionExpandedModel</returns>
        public PlaybackSessionExpandedModel PlayItem(string id, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaybackSessionExpandedModel> localVarResponse = PlayItemWithHttpInfo(id, playItemRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Play a Library Item Starts a playback session for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaybackSessionExpandedModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaybackSessionExpandedModel> PlayItemWithHttpInfo(string id, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->PlayItem");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = playItemRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.PlayItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlaybackSessionExpandedModel>("/api/items/{id}/play", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Play a Library Item Starts a playback session for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaybackSessionExpandedModel</returns>
        public async System.Threading.Tasks.Task<PlaybackSessionExpandedModel> PlayItemAsync(string id, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaybackSessionExpandedModel> localVarResponse = await PlayItemWithHttpInfoAsync(id, playItemRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Play a Library Item Starts a playback session for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaybackSessionExpandedModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaybackSessionExpandedModel>> PlayItemWithHttpInfoAsync(string id, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->PlayItem");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = playItemRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.PlayItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PlaybackSessionExpandedModel>("/api/items/{id}/play", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Play a Podcast Episode Starts a playback session for a specific podcast episode.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="episodeId"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaybackSessionExpandedModel</returns>
        public PlaybackSessionExpandedModel PlayItemEpisode(string id, string episodeId, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaybackSessionExpandedModel> localVarResponse = PlayItemEpisodeWithHttpInfo(id, episodeId, playItemRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Play a Podcast Episode Starts a playback session for a specific podcast episode.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="episodeId"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaybackSessionExpandedModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaybackSessionExpandedModel> PlayItemEpisodeWithHttpInfo(string id, string episodeId, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->PlayItemEpisode");
            }

            // verify the required parameter 'episodeId' is set
            if (episodeId == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'episodeId' when calling LibraryItemsApi->PlayItemEpisode");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("episodeId", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(episodeId)); // path parameter
            localVarRequestOptions.Data = playItemRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.PlayItemEpisode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlaybackSessionExpandedModel>("/api/items/{id}/play/{episodeId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayItemEpisode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Play a Podcast Episode Starts a playback session for a specific podcast episode.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="episodeId"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaybackSessionExpandedModel</returns>
        public async System.Threading.Tasks.Task<PlaybackSessionExpandedModel> PlayItemEpisodeAsync(string id, string episodeId, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaybackSessionExpandedModel> localVarResponse = await PlayItemEpisodeWithHttpInfoAsync(id, episodeId, playItemRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Play a Podcast Episode Starts a playback session for a specific podcast episode.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="episodeId"></param>
        /// <param name="playItemRequestModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaybackSessionExpandedModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaybackSessionExpandedModel>> PlayItemEpisodeWithHttpInfoAsync(string id, string episodeId, PlayItemRequestModel? playItemRequestModel = default(PlayItemRequestModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->PlayItemEpisode");
            }

            // verify the required parameter 'episodeId' is set
            if (episodeId == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'episodeId' when calling LibraryItemsApi->PlayItemEpisode");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("episodeId", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(episodeId)); // path parameter
            localVarRequestOptions.Data = playItemRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.PlayItemEpisode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PlaybackSessionExpandedModel>("/api/items/{id}/play/{episodeId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PlayItemEpisode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Library Item&#39;s Cover Removes a library item&#39;s cover image.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveItemCover(string id, int operationIndex = 0)
        {
            RemoveItemCoverWithHttpInfo(id);
        }

        /// <summary>
        /// Remove a Library Item&#39;s Cover Removes a library item&#39;s cover image.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> RemoveItemCoverWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->RemoveItemCover");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibraryItemsApi.RemoveItemCover";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/items/{id}/cover", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveItemCover", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Library Item&#39;s Cover Removes a library item&#39;s cover image.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveItemCoverAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RemoveItemCoverWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a Library Item&#39;s Cover Removes a library item&#39;s cover image.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> RemoveItemCoverWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->RemoveItemCover");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibraryItemsApi.RemoveItemCover";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/items/{id}/cover", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveItemCover", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan a Library Item Scans a library item for changes.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScanItemResponseModel</returns>
        public ScanItemResponseModel ScanItem(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<ScanItemResponseModel> localVarResponse = ScanItemWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan a Library Item Scans a library item for changes.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScanItemResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<ScanItemResponseModel> ScanItemWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->ScanItem");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibraryItemsApi.ScanItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ScanItemResponseModel>("/api/items/{id}/scan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan a Library Item Scans a library item for changes.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScanItemResponseModel</returns>
        public async System.Threading.Tasks.Task<ScanItemResponseModel> ScanItemAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<ScanItemResponseModel> localVarResponse = await ScanItemWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan a Library Item Scans a library item for changes.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScanItemResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<ScanItemResponseModel>> ScanItemWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->ScanItem");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibraryItemsApi.ScanItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ScanItemResponseModel>("/api/items/{id}/scan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tone Scan a Library Item Scans an audio file of a library item with tone.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="index"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ToneScanItem(string id, int index, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> localVarResponse = ToneScanItemWithHttpInfo(id, index);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tone Scan a Library Item Scans an audio file of a library item with tone.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="index"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> ToneScanItemWithHttpInfo(string id, int index, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->ToneScanItem");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("index", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(index)); // path parameter

            localVarRequestOptions.Operation = "LibraryItemsApi.ToneScanItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/items/{id}/tone-scan/{index}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToneScanItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tone Scan a Library Item Scans an audio file of a library item with tone.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="index"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ToneScanItemAsync(string id, int index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> localVarResponse = await ToneScanItemWithHttpInfoAsync(id, index, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tone Scan a Library Item Scans an audio file of a library item with tone.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="index"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> ToneScanItemWithHttpInfoAsync(string id, int index, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->ToneScanItem");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("index", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(index)); // path parameter

            localVarRequestOptions.Operation = "LibraryItemsApi.ToneScanItem";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/items/{id}/tone-scan/{index}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ToneScanItem", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Library Item&#39;s Chapters Updates a library item&#39;s chapters (books only).
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemChaptersRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateItemChaptersResponseModel</returns>
        public UpdateItemChaptersResponseModel UpdateItemChapters(string id, UpdateItemChaptersRequestModel updateItemChaptersRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateItemChaptersResponseModel> localVarResponse = UpdateItemChaptersWithHttpInfo(id, updateItemChaptersRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Library Item&#39;s Chapters Updates a library item&#39;s chapters (books only).
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemChaptersRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateItemChaptersResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateItemChaptersResponseModel> UpdateItemChaptersWithHttpInfo(string id, UpdateItemChaptersRequestModel updateItemChaptersRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->UpdateItemChapters");
            }

            // verify the required parameter 'updateItemChaptersRequestModel' is set
            if (updateItemChaptersRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateItemChaptersRequestModel' when calling LibraryItemsApi->UpdateItemChapters");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateItemChaptersRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.UpdateItemChapters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateItemChaptersResponseModel>("/api/items/{id}/chapters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateItemChapters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Library Item&#39;s Chapters Updates a library item&#39;s chapters (books only).
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemChaptersRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateItemChaptersResponseModel</returns>
        public async System.Threading.Tasks.Task<UpdateItemChaptersResponseModel> UpdateItemChaptersAsync(string id, UpdateItemChaptersRequestModel updateItemChaptersRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateItemChaptersResponseModel> localVarResponse = await UpdateItemChaptersWithHttpInfoAsync(id, updateItemChaptersRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Library Item&#39;s Chapters Updates a library item&#39;s chapters (books only).
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemChaptersRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateItemChaptersResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateItemChaptersResponseModel>> UpdateItemChaptersWithHttpInfoAsync(string id, UpdateItemChaptersRequestModel updateItemChaptersRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->UpdateItemChapters");
            }

            // verify the required parameter 'updateItemChaptersRequestModel' is set
            if (updateItemChaptersRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateItemChaptersRequestModel' when calling LibraryItemsApi->UpdateItemChapters");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateItemChaptersRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.UpdateItemChapters";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateItemChaptersResponseModel>("/api/items/{id}/chapters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateItemChapters", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Library Item&#39;s Cover Updates a library item&#39;s cover with an image already on the server.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemCoverRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateItemCoverResponseModel</returns>
        public UpdateItemCoverResponseModel UpdateItemCover(string id, UpdateItemCoverRequestModel updateItemCoverRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateItemCoverResponseModel> localVarResponse = UpdateItemCoverWithHttpInfo(id, updateItemCoverRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Library Item&#39;s Cover Updates a library item&#39;s cover with an image already on the server.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemCoverRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateItemCoverResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateItemCoverResponseModel> UpdateItemCoverWithHttpInfo(string id, UpdateItemCoverRequestModel updateItemCoverRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->UpdateItemCover");
            }

            // verify the required parameter 'updateItemCoverRequestModel' is set
            if (updateItemCoverRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateItemCoverRequestModel' when calling LibraryItemsApi->UpdateItemCover");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateItemCoverRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.UpdateItemCover";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateItemCoverResponseModel>("/api/items/{id}/cover", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateItemCover", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Library Item&#39;s Cover Updates a library item&#39;s cover with an image already on the server.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemCoverRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateItemCoverResponseModel</returns>
        public async System.Threading.Tasks.Task<UpdateItemCoverResponseModel> UpdateItemCoverAsync(string id, UpdateItemCoverRequestModel updateItemCoverRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateItemCoverResponseModel> localVarResponse = await UpdateItemCoverWithHttpInfoAsync(id, updateItemCoverRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Library Item&#39;s Cover Updates a library item&#39;s cover with an image already on the server.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemCoverRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateItemCoverResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateItemCoverResponseModel>> UpdateItemCoverWithHttpInfoAsync(string id, UpdateItemCoverRequestModel updateItemCoverRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->UpdateItemCover");
            }

            // verify the required parameter 'updateItemCoverRequestModel' is set
            if (updateItemCoverRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateItemCoverRequestModel' when calling LibraryItemsApi->UpdateItemCover");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateItemCoverRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.UpdateItemCover";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateItemCoverResponseModel>("/api/items/{id}/cover", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateItemCover", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Library Item&#39;s Media Updates a library item&#39;s media and returns the updated library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateItemMediaResponseModel</returns>
        public UpdateItemMediaResponseModel UpdateItemMedia(string id, Object body, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateItemMediaResponseModel> localVarResponse = UpdateItemMediaWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Library Item&#39;s Media Updates a library item&#39;s media and returns the updated library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateItemMediaResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateItemMediaResponseModel> UpdateItemMediaWithHttpInfo(string id, Object body, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->UpdateItemMedia");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'body' when calling LibraryItemsApi->UpdateItemMedia");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LibraryItemsApi.UpdateItemMedia";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateItemMediaResponseModel>("/api/items/{id}/media", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateItemMedia", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Library Item&#39;s Media Updates a library item&#39;s media and returns the updated library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateItemMediaResponseModel</returns>
        public async System.Threading.Tasks.Task<UpdateItemMediaResponseModel> UpdateItemMediaAsync(string id, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateItemMediaResponseModel> localVarResponse = await UpdateItemMediaWithHttpInfoAsync(id, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Library Item&#39;s Media Updates a library item&#39;s media and returns the updated library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateItemMediaResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateItemMediaResponseModel>> UpdateItemMediaWithHttpInfoAsync(string id, Object body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->UpdateItemMedia");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'body' when calling LibraryItemsApi->UpdateItemMedia");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "LibraryItemsApi.UpdateItemMedia";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateItemMediaResponseModel>("/api/items/{id}/media", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateItemMedia", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Library Item&#39;s Audio Tracks Updates the order/exclude status of a library item&#39;s audio files (books only).
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemTracksRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LibraryItemModel</returns>
        public LibraryItemModel UpdateItemTracks(string id, UpdateItemTracksRequestModel updateItemTracksRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryItemModel> localVarResponse = UpdateItemTracksWithHttpInfo(id, updateItemTracksRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Library Item&#39;s Audio Tracks Updates the order/exclude status of a library item&#39;s audio files (books only).
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemTracksRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LibraryItemModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryItemModel> UpdateItemTracksWithHttpInfo(string id, UpdateItemTracksRequestModel updateItemTracksRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->UpdateItemTracks");
            }

            // verify the required parameter 'updateItemTracksRequestModel' is set
            if (updateItemTracksRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateItemTracksRequestModel' when calling LibraryItemsApi->UpdateItemTracks");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateItemTracksRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.UpdateItemTracks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<LibraryItemModel>("/api/items/{id}/tracks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateItemTracks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Library Item&#39;s Audio Tracks Updates the order/exclude status of a library item&#39;s audio files (books only).
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemTracksRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LibraryItemModel</returns>
        public async System.Threading.Tasks.Task<LibraryItemModel> UpdateItemTracksAsync(string id, UpdateItemTracksRequestModel updateItemTracksRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryItemModel> localVarResponse = await UpdateItemTracksWithHttpInfoAsync(id, updateItemTracksRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Library Item&#39;s Audio Tracks Updates the order/exclude status of a library item&#39;s audio files (books only).
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateItemTracksRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LibraryItemModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryItemModel>> UpdateItemTracksWithHttpInfoAsync(string id, UpdateItemTracksRequestModel updateItemTracksRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->UpdateItemTracks");
            }

            // verify the required parameter 'updateItemTracksRequestModel' is set
            if (updateItemTracksRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateItemTracksRequestModel' when calling LibraryItemsApi->UpdateItemTracks");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateItemTracksRequestModel;

            localVarRequestOptions.Operation = "LibraryItemsApi.UpdateItemTracks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<LibraryItemModel>("/api/items/{id}/tracks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateItemTracks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a Library Item Cover Uploads or downloads a cover image for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cover"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UploadItemCoverResponseModel</returns>
        public UploadItemCoverResponseModel UploadItemCover(string id, System.IO.Stream? cover = default(System.IO.Stream?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UploadItemCoverResponseModel> localVarResponse = UploadItemCoverWithHttpInfo(id, cover);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a Library Item Cover Uploads or downloads a cover image for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cover"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UploadItemCoverResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<UploadItemCoverResponseModel> UploadItemCoverWithHttpInfo(string id, System.IO.Stream? cover = default(System.IO.Stream?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->UploadItemCover");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cover != null)
            {
                localVarRequestOptions.FileParameters.Add("cover", cover);
            }

            localVarRequestOptions.Operation = "LibraryItemsApi.UploadItemCover";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UploadItemCoverResponseModel>("/api/items/{id}/cover", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadItemCover", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload a Library Item Cover Uploads or downloads a cover image for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cover"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UploadItemCoverResponseModel</returns>
        public async System.Threading.Tasks.Task<UploadItemCoverResponseModel> UploadItemCoverAsync(string id, System.IO.Stream? cover = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UploadItemCoverResponseModel> localVarResponse = await UploadItemCoverWithHttpInfoAsync(id, cover, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a Library Item Cover Uploads or downloads a cover image for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cover"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UploadItemCoverResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<UploadItemCoverResponseModel>> UploadItemCoverWithHttpInfoAsync(string id, System.IO.Stream? cover = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibraryItemsApi->UploadItemCover");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (cover != null)
            {
                localVarRequestOptions.FileParameters.Add("cover", cover);
            }

            localVarRequestOptions.Operation = "LibraryItemsApi.UploadItemCover";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UploadItemCoverResponseModel>("/api/items/{id}/cover", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadItemCover", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
