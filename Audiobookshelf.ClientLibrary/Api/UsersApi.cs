/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Audiobookshelf.ClientLibrary.Client;
using Audiobookshelf.ClientLibrary.Model;

namespace Audiobookshelf.ClientLibrary.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a User
        /// </summary>
        /// <remarks>
        /// Creates a new user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateUserResponseModel</returns>
        CreateUserResponseModel CreateUser(CreateUserRequestModel createUserRequestModel, int operationIndex = 0);

        /// <summary>
        /// Create a User
        /// </summary>
        /// <remarks>
        /// Creates a new user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateUserResponseModel</returns>
        ApiResponse<CreateUserResponseModel> CreateUserWithHttpInfo(CreateUserRequestModel createUserRequestModel, int operationIndex = 0);
        /// <summary>
        /// Delete a User
        /// </summary>
        /// <remarks>
        /// Deletes a user by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteUserResponseModel</returns>
        DeleteUserResponseModel DeleteUser(string id, int operationIndex = 0);

        /// <summary>
        /// Delete a User
        /// </summary>
        /// <remarks>
        /// Deletes a user by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteUserResponseModel</returns>
        ApiResponse<DeleteUserResponseModel> DeleteUserWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>
        /// Retrieves all users.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllUsersResponseModel</returns>
        GetAllUsersResponseModel GetAllUsers(int operationIndex = 0);

        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>
        /// Retrieves all users.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllUsersResponseModel</returns>
        ApiResponse<GetAllUsersResponseModel> GetAllUsersWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Online Users
        /// </summary>
        /// <remarks>
        /// Retrieves all online users and open sessions.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetOnlineUsersResponseModel</returns>
        GetOnlineUsersResponseModel GetOnlineUsers(int operationIndex = 0);

        /// <summary>
        /// Get Online Users
        /// </summary>
        /// <remarks>
        /// Retrieves all online users and open sessions.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetOnlineUsersResponseModel</returns>
        ApiResponse<GetOnlineUsersResponseModel> GetOnlineUsersWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get a User
        /// </summary>
        /// <remarks>
        /// Retrieves a user by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserWithSessionModel</returns>
        UserWithSessionModel GetUser(string id, int operationIndex = 0);

        /// <summary>
        /// Get a User
        /// </summary>
        /// <remarks>
        /// Retrieves a user by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserWithSessionModel</returns>
        ApiResponse<UserWithSessionModel> GetUserWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get a User&#39;s Listening Sessions
        /// </summary>
        /// <remarks>
        /// Retrieves the listening sessions of a user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserListeningSessionsResponseModel</returns>
        GetUserListeningSessionsResponseModel GetUserListeningSessions(string id, int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a User&#39;s Listening Sessions
        /// </summary>
        /// <remarks>
        /// Retrieves the listening sessions of a user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserListeningSessionsResponseModel</returns>
        ApiResponse<GetUserListeningSessionsResponseModel> GetUserListeningSessionsWithHttpInfo(string id, int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a User&#39;s Listening Stats
        /// </summary>
        /// <remarks>
        /// Retrieves a user&#39;s listening statistics.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserListeningStatsResponseModel</returns>
        GetUserListeningStatsResponseModel GetUserListeningStats(string id, int operationIndex = 0);

        /// <summary>
        /// Get a User&#39;s Listening Stats
        /// </summary>
        /// <remarks>
        /// Retrieves a user&#39;s listening statistics.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserListeningStatsResponseModel</returns>
        ApiResponse<GetUserListeningStatsResponseModel> GetUserListeningStatsWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Purge a User&#39;s Media Progress
        /// </summary>
        /// <remarks>
        /// Removes the user&#39;s media progress for items that no longer exist.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserWithProgressDetailsModel</returns>
        UserWithProgressDetailsModel PurgeUserMediaProgress(string id, int operationIndex = 0);

        /// <summary>
        /// Purge a User&#39;s Media Progress
        /// </summary>
        /// <remarks>
        /// Removes the user&#39;s media progress for items that no longer exist.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserWithProgressDetailsModel</returns>
        ApiResponse<UserWithProgressDetailsModel> PurgeUserMediaProgressWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Update a User
        /// </summary>
        /// <remarks>
        /// Updates a user&#39;s details.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateUserResponseModel</returns>
        UpdateUserResponseModel UpdateUser(string id, UpdateUserRequestModel updateUserRequestModel, int operationIndex = 0);

        /// <summary>
        /// Update a User
        /// </summary>
        /// <remarks>
        /// Updates a user&#39;s details.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateUserResponseModel</returns>
        ApiResponse<UpdateUserResponseModel> UpdateUserWithHttpInfo(string id, UpdateUserRequestModel updateUserRequestModel, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a User
        /// </summary>
        /// <remarks>
        /// Creates a new user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateUserResponseModel</returns>
        System.Threading.Tasks.Task<CreateUserResponseModel> CreateUserAsync(CreateUserRequestModel createUserRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a User
        /// </summary>
        /// <remarks>
        /// Creates a new user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateUserResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateUserResponseModel>> CreateUserWithHttpInfoAsync(CreateUserRequestModel createUserRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a User
        /// </summary>
        /// <remarks>
        /// Deletes a user by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteUserResponseModel</returns>
        System.Threading.Tasks.Task<DeleteUserResponseModel> DeleteUserAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a User
        /// </summary>
        /// <remarks>
        /// Deletes a user by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteUserResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteUserResponseModel>> DeleteUserWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>
        /// Retrieves all users.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllUsersResponseModel</returns>
        System.Threading.Tasks.Task<GetAllUsersResponseModel> GetAllUsersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get All Users
        /// </summary>
        /// <remarks>
        /// Retrieves all users.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllUsersResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllUsersResponseModel>> GetAllUsersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Online Users
        /// </summary>
        /// <remarks>
        /// Retrieves all online users and open sessions.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOnlineUsersResponseModel</returns>
        System.Threading.Tasks.Task<GetOnlineUsersResponseModel> GetOnlineUsersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Online Users
        /// </summary>
        /// <remarks>
        /// Retrieves all online users and open sessions.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOnlineUsersResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOnlineUsersResponseModel>> GetOnlineUsersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a User
        /// </summary>
        /// <remarks>
        /// Retrieves a user by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWithSessionModel</returns>
        System.Threading.Tasks.Task<UserWithSessionModel> GetUserAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a User
        /// </summary>
        /// <remarks>
        /// Retrieves a user by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWithSessionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserWithSessionModel>> GetUserWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a User&#39;s Listening Sessions
        /// </summary>
        /// <remarks>
        /// Retrieves the listening sessions of a user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserListeningSessionsResponseModel</returns>
        System.Threading.Tasks.Task<GetUserListeningSessionsResponseModel> GetUserListeningSessionsAsync(string id, int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a User&#39;s Listening Sessions
        /// </summary>
        /// <remarks>
        /// Retrieves the listening sessions of a user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserListeningSessionsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserListeningSessionsResponseModel>> GetUserListeningSessionsWithHttpInfoAsync(string id, int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a User&#39;s Listening Stats
        /// </summary>
        /// <remarks>
        /// Retrieves a user&#39;s listening statistics.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserListeningStatsResponseModel</returns>
        System.Threading.Tasks.Task<GetUserListeningStatsResponseModel> GetUserListeningStatsAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a User&#39;s Listening Stats
        /// </summary>
        /// <remarks>
        /// Retrieves a user&#39;s listening statistics.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserListeningStatsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserListeningStatsResponseModel>> GetUserListeningStatsWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Purge a User&#39;s Media Progress
        /// </summary>
        /// <remarks>
        /// Removes the user&#39;s media progress for items that no longer exist.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWithProgressDetailsModel</returns>
        System.Threading.Tasks.Task<UserWithProgressDetailsModel> PurgeUserMediaProgressAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Purge a User&#39;s Media Progress
        /// </summary>
        /// <remarks>
        /// Removes the user&#39;s media progress for items that no longer exist.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWithProgressDetailsModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserWithProgressDetailsModel>> PurgeUserMediaProgressWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a User
        /// </summary>
        /// <remarks>
        /// Updates a user&#39;s details.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateUserResponseModel</returns>
        System.Threading.Tasks.Task<UpdateUserResponseModel> UpdateUserAsync(string id, UpdateUserRequestModel updateUserRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a User
        /// </summary>
        /// <remarks>
        /// Updates a user&#39;s details.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateUserResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateUserResponseModel>> UpdateUserWithHttpInfoAsync(string id, UpdateUserRequestModel updateUserRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private Audiobookshelf.ClientLibrary.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(string basePath)
        {
            this.Configuration = Audiobookshelf.ClientLibrary.Client.Configuration.MergeConfigurations(
                Audiobookshelf.ClientLibrary.Client.GlobalConfiguration.Instance,
                new Audiobookshelf.ClientLibrary.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Audiobookshelf.ClientLibrary.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Audiobookshelf.ClientLibrary.Client.Configuration.MergeConfigurations(
                Audiobookshelf.ClientLibrary.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(Audiobookshelf.ClientLibrary.Client.ISynchronousClient client, Audiobookshelf.ClientLibrary.Client.IAsynchronousClient asyncClient, Audiobookshelf.ClientLibrary.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Audiobookshelf.ClientLibrary.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a User Creates a new user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateUserResponseModel</returns>
        public CreateUserResponseModel CreateUser(CreateUserRequestModel createUserRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<CreateUserResponseModel> localVarResponse = CreateUserWithHttpInfo(createUserRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a User Creates a new user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateUserResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<CreateUserResponseModel> CreateUserWithHttpInfo(CreateUserRequestModel createUserRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'createUserRequestModel' is set
            if (createUserRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'createUserRequestModel' when calling UsersApi->CreateUser");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createUserRequestModel;

            localVarRequestOptions.Operation = "UsersApi.CreateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateUserResponseModel>("/api/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a User Creates a new user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateUserResponseModel</returns>
        public async System.Threading.Tasks.Task<CreateUserResponseModel> CreateUserAsync(CreateUserRequestModel createUserRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<CreateUserResponseModel> localVarResponse = await CreateUserWithHttpInfoAsync(createUserRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a User Creates a new user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateUserResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<CreateUserResponseModel>> CreateUserWithHttpInfoAsync(CreateUserRequestModel createUserRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createUserRequestModel' is set
            if (createUserRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'createUserRequestModel' when calling UsersApi->CreateUser");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createUserRequestModel;

            localVarRequestOptions.Operation = "UsersApi.CreateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateUserResponseModel>("/api/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a User Deletes a user by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteUserResponseModel</returns>
        public DeleteUserResponseModel DeleteUser(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<DeleteUserResponseModel> localVarResponse = DeleteUserWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a User Deletes a user by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteUserResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<DeleteUserResponseModel> DeleteUserWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUser");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.DeleteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteUserResponseModel>("/api/users/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a User Deletes a user by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteUserResponseModel</returns>
        public async System.Threading.Tasks.Task<DeleteUserResponseModel> DeleteUserAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<DeleteUserResponseModel> localVarResponse = await DeleteUserWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a User Deletes a user by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteUserResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<DeleteUserResponseModel>> DeleteUserWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->DeleteUser");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.DeleteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteUserResponseModel>("/api/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Users Retrieves all users.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllUsersResponseModel</returns>
        public GetAllUsersResponseModel GetAllUsers(int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetAllUsersResponseModel> localVarResponse = GetAllUsersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Users Retrieves all users.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllUsersResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetAllUsersResponseModel> GetAllUsersWithHttpInfo(int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.GetAllUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllUsersResponseModel>("/api/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Users Retrieves all users.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllUsersResponseModel</returns>
        public async System.Threading.Tasks.Task<GetAllUsersResponseModel> GetAllUsersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetAllUsersResponseModel> localVarResponse = await GetAllUsersWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Users Retrieves all users.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllUsersResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetAllUsersResponseModel>> GetAllUsersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.GetAllUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllUsersResponseModel>("/api/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Online Users Retrieves all online users and open sessions.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetOnlineUsersResponseModel</returns>
        public GetOnlineUsersResponseModel GetOnlineUsers(int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetOnlineUsersResponseModel> localVarResponse = GetOnlineUsersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Online Users Retrieves all online users and open sessions.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetOnlineUsersResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetOnlineUsersResponseModel> GetOnlineUsersWithHttpInfo(int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.GetOnlineUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetOnlineUsersResponseModel>("/api/users/online", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOnlineUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Online Users Retrieves all online users and open sessions.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOnlineUsersResponseModel</returns>
        public async System.Threading.Tasks.Task<GetOnlineUsersResponseModel> GetOnlineUsersAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetOnlineUsersResponseModel> localVarResponse = await GetOnlineUsersWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Online Users Retrieves all online users and open sessions.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOnlineUsersResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetOnlineUsersResponseModel>> GetOnlineUsersWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "UsersApi.GetOnlineUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetOnlineUsersResponseModel>("/api/users/online", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOnlineUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a User Retrieves a user by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserWithSessionModel</returns>
        public UserWithSessionModel GetUser(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UserWithSessionModel> localVarResponse = GetUserWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a User Retrieves a user by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserWithSessionModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<UserWithSessionModel> GetUserWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUser");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserWithSessionModel>("/api/users/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a User Retrieves a user by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWithSessionModel</returns>
        public async System.Threading.Tasks.Task<UserWithSessionModel> GetUserAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UserWithSessionModel> localVarResponse = await GetUserWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a User Retrieves a user by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWithSessionModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<UserWithSessionModel>> GetUserWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUser");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserWithSessionModel>("/api/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a User&#39;s Listening Sessions Retrieves the listening sessions of a user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserListeningSessionsResponseModel</returns>
        public GetUserListeningSessionsResponseModel GetUserListeningSessions(string id, int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetUserListeningSessionsResponseModel> localVarResponse = GetUserListeningSessionsWithHttpInfo(id, itemsPerPage, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a User&#39;s Listening Sessions Retrieves the listening sessions of a user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserListeningSessionsResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetUserListeningSessionsResponseModel> GetUserListeningSessionsWithHttpInfo(string id, int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserListeningSessions");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "UsersApi.GetUserListeningSessions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUserListeningSessionsResponseModel>("/api/users/{id}/listening-sessions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserListeningSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a User&#39;s Listening Sessions Retrieves the listening sessions of a user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserListeningSessionsResponseModel</returns>
        public async System.Threading.Tasks.Task<GetUserListeningSessionsResponseModel> GetUserListeningSessionsAsync(string id, int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetUserListeningSessionsResponseModel> localVarResponse = await GetUserListeningSessionsWithHttpInfoAsync(id, itemsPerPage, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a User&#39;s Listening Sessions Retrieves the listening sessions of a user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="itemsPerPage"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserListeningSessionsResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetUserListeningSessionsResponseModel>> GetUserListeningSessionsWithHttpInfoAsync(string id, int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserListeningSessions");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "UsersApi.GetUserListeningSessions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetUserListeningSessionsResponseModel>("/api/users/{id}/listening-sessions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserListeningSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a User&#39;s Listening Stats Retrieves a user&#39;s listening statistics.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserListeningStatsResponseModel</returns>
        public GetUserListeningStatsResponseModel GetUserListeningStats(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetUserListeningStatsResponseModel> localVarResponse = GetUserListeningStatsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a User&#39;s Listening Stats Retrieves a user&#39;s listening statistics.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserListeningStatsResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetUserListeningStatsResponseModel> GetUserListeningStatsWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserListeningStats");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUserListeningStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUserListeningStatsResponseModel>("/api/users/{id}/listening-stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserListeningStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a User&#39;s Listening Stats Retrieves a user&#39;s listening statistics.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserListeningStatsResponseModel</returns>
        public async System.Threading.Tasks.Task<GetUserListeningStatsResponseModel> GetUserListeningStatsAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetUserListeningStatsResponseModel> localVarResponse = await GetUserListeningStatsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a User&#39;s Listening Stats Retrieves a user&#39;s listening statistics.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserListeningStatsResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetUserListeningStatsResponseModel>> GetUserListeningStatsWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetUserListeningStats");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.GetUserListeningStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetUserListeningStatsResponseModel>("/api/users/{id}/listening-stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserListeningStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Purge a User&#39;s Media Progress Removes the user&#39;s media progress for items that no longer exist.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserWithProgressDetailsModel</returns>
        public UserWithProgressDetailsModel PurgeUserMediaProgress(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UserWithProgressDetailsModel> localVarResponse = PurgeUserMediaProgressWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Purge a User&#39;s Media Progress Removes the user&#39;s media progress for items that no longer exist.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserWithProgressDetailsModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<UserWithProgressDetailsModel> PurgeUserMediaProgressWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->PurgeUserMediaProgress");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.PurgeUserMediaProgress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserWithProgressDetailsModel>("/api/users/{id}/purge-media-progress", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurgeUserMediaProgress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Purge a User&#39;s Media Progress Removes the user&#39;s media progress for items that no longer exist.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWithProgressDetailsModel</returns>
        public async System.Threading.Tasks.Task<UserWithProgressDetailsModel> PurgeUserMediaProgressAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UserWithProgressDetailsModel> localVarResponse = await PurgeUserMediaProgressWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Purge a User&#39;s Media Progress Removes the user&#39;s media progress for items that no longer exist.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWithProgressDetailsModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<UserWithProgressDetailsModel>> PurgeUserMediaProgressWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->PurgeUserMediaProgress");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "UsersApi.PurgeUserMediaProgress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UserWithProgressDetailsModel>("/api/users/{id}/purge-media-progress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurgeUserMediaProgress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a User Updates a user&#39;s details.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateUserResponseModel</returns>
        public UpdateUserResponseModel UpdateUser(string id, UpdateUserRequestModel updateUserRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateUserResponseModel> localVarResponse = UpdateUserWithHttpInfo(id, updateUserRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a User Updates a user&#39;s details.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateUserResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateUserResponseModel> UpdateUserWithHttpInfo(string id, UpdateUserRequestModel updateUserRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUser");
            }

            // verify the required parameter 'updateUserRequestModel' is set
            if (updateUserRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateUserRequestModel' when calling UsersApi->UpdateUser");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateUserRequestModel;

            localVarRequestOptions.Operation = "UsersApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateUserResponseModel>("/api/users/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a User Updates a user&#39;s details.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateUserResponseModel</returns>
        public async System.Threading.Tasks.Task<UpdateUserResponseModel> UpdateUserAsync(string id, UpdateUserRequestModel updateUserRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateUserResponseModel> localVarResponse = await UpdateUserWithHttpInfoAsync(id, updateUserRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a User Updates a user&#39;s details.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateUserRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateUserResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<UpdateUserResponseModel>> UpdateUserWithHttpInfoAsync(string id, UpdateUserRequestModel updateUserRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling UsersApi->UpdateUser");
            }

            // verify the required parameter 'updateUserRequestModel' is set
            if (updateUserRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateUserRequestModel' when calling UsersApi->UpdateUser");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateUserRequestModel;

            localVarRequestOptions.Operation = "UsersApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateUserResponseModel>("/api/users/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
