/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Audiobookshelf.ClientLibrary.Client;
using Audiobookshelf.ClientLibrary.Model;

namespace Audiobookshelf.ClientLibrary.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Batch Create/Update Media Progress
        /// </summary>
        /// <remarks>
        /// Batch creates or updates media progress for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateMediaProgressRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void BatchUpdateMediaProgress(List<BatchUpdateMediaProgressRequestInnerModel> batchUpdateMediaProgressRequestInnerModel, int operationIndex = 0);

        /// <summary>
        /// Batch Create/Update Media Progress
        /// </summary>
        /// <remarks>
        /// Batch creates or updates media progress for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateMediaProgressRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BatchUpdateMediaProgressWithHttpInfo(List<BatchUpdateMediaProgressRequestInnerModel> batchUpdateMediaProgressRequestInnerModel, int operationIndex = 0);
        /// <summary>
        /// Change Your Password
        /// </summary>
        /// <remarks>
        /// Changes the password for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChangePasswordResponseModel</returns>
        ChangePasswordResponseModel ChangePassword(ChangePasswordRequestModel changePasswordRequestModel, int operationIndex = 0);

        /// <summary>
        /// Change Your Password
        /// </summary>
        /// <remarks>
        /// Changes the password for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChangePasswordResponseModel</returns>
        ApiResponse<ChangePasswordResponseModel> ChangePasswordWithHttpInfo(ChangePasswordRequestModel changePasswordRequestModel, int operationIndex = 0);
        /// <summary>
        /// Create a Bookmark
        /// </summary>
        /// <remarks>
        /// Creates a bookmark for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create a bookmark for.</param>
        /// <param name="createBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AudioBookmarkModel</returns>
        AudioBookmarkModel CreateBookmark(string id, CreateBookmarkRequestModel createBookmarkRequestModel, int operationIndex = 0);

        /// <summary>
        /// Create a Bookmark
        /// </summary>
        /// <remarks>
        /// Creates a bookmark for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create a bookmark for.</param>
        /// <param name="createBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AudioBookmarkModel</returns>
        ApiResponse<AudioBookmarkModel> CreateBookmarkWithHttpInfo(string id, CreateBookmarkRequestModel createBookmarkRequestModel, int operationIndex = 0);
        /// <summary>
        /// Get Library Items In Progress
        /// </summary>
        /// <remarks>
        /// Retrieves library items that are in progress for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit for how many library items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetItemsInProgressResponseModel</returns>
        GetItemsInProgressResponseModel GetLibraryItemsInProgress(int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Library Items In Progress
        /// </summary>
        /// <remarks>
        /// Retrieves library items that are in progress for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit for how many library items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetItemsInProgressResponseModel</returns>
        ApiResponse<GetItemsInProgressResponseModel> GetLibraryItemsInProgressWithHttpInfo(int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a Media Progress
        /// </summary>
        /// <remarks>
        /// Retrieves your media progress that is associated with the given library item ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MediaProgressModel</returns>
        MediaProgressModel GetMediaProgress(string id, int operationIndex = 0);

        /// <summary>
        /// Get a Media Progress
        /// </summary>
        /// <remarks>
        /// Retrieves your media progress that is associated with the given library item ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MediaProgressModel</returns>
        ApiResponse<MediaProgressModel> GetMediaProgressWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get a Media Progress for Episode
        /// </summary>
        /// <remarks>
        /// Retrieves your media progress for the specified library item and podcast episode.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MediaProgressModel</returns>
        MediaProgressModel GetMediaProgressForEpisode(string id, string episodeID, int operationIndex = 0);

        /// <summary>
        /// Get a Media Progress for Episode
        /// </summary>
        /// <remarks>
        /// Retrieves your media progress for the specified library item and podcast episode.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MediaProgressModel</returns>
        ApiResponse<MediaProgressModel> GetMediaProgressForEpisodeWithHttpInfo(string id, string episodeID, int operationIndex = 0);
        /// <summary>
        /// Get Your Listening Sessions
        /// </summary>
        /// <remarks>
        /// Retrieves the listening sessions for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsPerPage">The number of listening sessions to retrieve per page. (optional, default to 10)</param>
        /// <param name="page">The page (0-indexed) to retrieve. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetListeningSessionsResponseModel</returns>
        GetListeningSessionsResponseModel GetYourListeningSessions(int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Your Listening Sessions
        /// </summary>
        /// <remarks>
        /// Retrieves the listening sessions for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsPerPage">The number of listening sessions to retrieve per page. (optional, default to 10)</param>
        /// <param name="page">The page (0-indexed) to retrieve. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetListeningSessionsResponseModel</returns>
        ApiResponse<GetListeningSessionsResponseModel> GetYourListeningSessionsWithHttpInfo(int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get Your Listening Stats
        /// </summary>
        /// <remarks>
        /// Retrieves listening statistics for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetListeningStatsResponseModel</returns>
        GetListeningStatsResponseModel GetYourListeningStats(int operationIndex = 0);

        /// <summary>
        /// Get Your Listening Stats
        /// </summary>
        /// <remarks>
        /// Retrieves listening statistics for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetListeningStatsResponseModel</returns>
        ApiResponse<GetListeningStatsResponseModel> GetYourListeningStatsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get Your User
        /// </summary>
        /// <remarks>
        /// Retrieves the authenticated user&#39;s details.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserModel</returns>
        UserModel GetYourUser(int operationIndex = 0);

        /// <summary>
        /// Get Your User
        /// </summary>
        /// <remarks>
        /// Retrieves the authenticated user&#39;s details.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserModel</returns>
        ApiResponse<UserModel> GetYourUserWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Remove a Bookmark
        /// </summary>
        /// <remarks>
        /// Removes a bookmark from a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to remove a bookmark from.</param>
        /// <param name="time">The time (in seconds) of the bookmark to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveBookmark(string id, int time, int operationIndex = 0);

        /// <summary>
        /// Remove a Bookmark
        /// </summary>
        /// <remarks>
        /// Removes a bookmark from a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to remove a bookmark from.</param>
        /// <param name="time">The time (in seconds) of the bookmark to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveBookmarkWithHttpInfo(string id, int time, int operationIndex = 0);
        /// <summary>
        /// Remove an Item From Continue Listening
        /// </summary>
        /// <remarks>
        /// Removes a library item from the user&#39;s \&quot;Continue Listening\&quot; shelf.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserModel</returns>
        UserModel RemoveItemFromContinueListening(string id, int operationIndex = 0);

        /// <summary>
        /// Remove an Item From Continue Listening
        /// </summary>
        /// <remarks>
        /// Removes a library item from the user&#39;s \&quot;Continue Listening\&quot; shelf.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserModel</returns>
        ApiResponse<UserModel> RemoveItemFromContinueListeningWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Remove a Media Progress
        /// </summary>
        /// <remarks>
        /// Removes a media progress entry from the user&#39;s data.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveMediaProgress(string id, int operationIndex = 0);

        /// <summary>
        /// Remove a Media Progress
        /// </summary>
        /// <remarks>
        /// Removes a media progress entry from the user&#39;s data.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveMediaProgressWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Remove a Series From Continue Listening
        /// </summary>
        /// <remarks>
        /// Removes a series from your \&quot;Continue Series\&quot; shelf. Your user is returned.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the series to remove from continue listening.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserModel</returns>
        UserModel RemoveSeriesFromContinueListening(string id, int operationIndex = 0);

        /// <summary>
        /// Remove a Series From Continue Listening
        /// </summary>
        /// <remarks>
        /// Removes a series from your \&quot;Continue Series\&quot; shelf. Your user is returned.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the series to remove from continue listening.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserModel</returns>
        ApiResponse<UserModel> RemoveSeriesFromContinueListeningWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Sync Local Media Progress
        /// </summary>
        /// <remarks>
        /// Syncs local media progress with the server. For any local media progress with a greater lastUpdate time than the lastUpdate time of the matching media progress on the server, the server&#39;s media progress is updated. If the server&#39;s lastUpdate time is greater, the local media progress will be returned with the updated information.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncLocalProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SyncLocalProgressResponseModel</returns>
        SyncLocalProgressResponseModel SyncLocalProgress(SyncLocalProgressRequestModel syncLocalProgressRequestModel, int operationIndex = 0);

        /// <summary>
        /// Sync Local Media Progress
        /// </summary>
        /// <remarks>
        /// Syncs local media progress with the server. For any local media progress with a greater lastUpdate time than the lastUpdate time of the matching media progress on the server, the server&#39;s media progress is updated. If the server&#39;s lastUpdate time is greater, the local media progress will be returned with the updated information.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncLocalProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SyncLocalProgressResponseModel</returns>
        ApiResponse<SyncLocalProgressResponseModel> SyncLocalProgressWithHttpInfo(SyncLocalProgressRequestModel syncLocalProgressRequestModel, int operationIndex = 0);
        /// <summary>
        /// Update a Bookmark
        /// </summary>
        /// <remarks>
        /// Updates a bookmark for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to update a bookmark for.</param>
        /// <param name="updateBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AudioBookmarkModel</returns>
        AudioBookmarkModel UpdateBookmark(string id, UpdateBookmarkRequestModel updateBookmarkRequestModel, int operationIndex = 0);

        /// <summary>
        /// Update a Bookmark
        /// </summary>
        /// <remarks>
        /// Updates a bookmark for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to update a bookmark for.</param>
        /// <param name="updateBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AudioBookmarkModel</returns>
        ApiResponse<AudioBookmarkModel> UpdateBookmarkWithHttpInfo(string id, UpdateBookmarkRequestModel updateBookmarkRequestModel, int operationIndex = 0);
        /// <summary>
        /// Create/Update Media Progress
        /// </summary>
        /// <remarks>
        /// Creates or updates media progress for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateMediaProgress(string id, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0);

        /// <summary>
        /// Create/Update Media Progress
        /// </summary>
        /// <remarks>
        /// Creates or updates media progress for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMediaProgressWithHttpInfo(string id, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0);
        /// <summary>
        /// Create/Update Media Progress for Episode
        /// </summary>
        /// <remarks>
        /// Creates or updates media progress for a library item and podcast episode.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateMediaProgressForEpisode(string id, string episodeID, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0);

        /// <summary>
        /// Create/Update Media Progress for Episode
        /// </summary>
        /// <remarks>
        /// Creates or updates media progress for a library item and podcast episode.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateMediaProgressForEpisodeWithHttpInfo(string id, string episodeID, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Batch Create/Update Media Progress
        /// </summary>
        /// <remarks>
        /// Batch creates or updates media progress for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateMediaProgressRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BatchUpdateMediaProgressAsync(List<BatchUpdateMediaProgressRequestInnerModel> batchUpdateMediaProgressRequestInnerModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Batch Create/Update Media Progress
        /// </summary>
        /// <remarks>
        /// Batch creates or updates media progress for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateMediaProgressRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BatchUpdateMediaProgressWithHttpInfoAsync(List<BatchUpdateMediaProgressRequestInnerModel> batchUpdateMediaProgressRequestInnerModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Change Your Password
        /// </summary>
        /// <remarks>
        /// Changes the password for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChangePasswordResponseModel</returns>
        System.Threading.Tasks.Task<ChangePasswordResponseModel> ChangePasswordAsync(ChangePasswordRequestModel changePasswordRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Change Your Password
        /// </summary>
        /// <remarks>
        /// Changes the password for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChangePasswordResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChangePasswordResponseModel>> ChangePasswordWithHttpInfoAsync(ChangePasswordRequestModel changePasswordRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Bookmark
        /// </summary>
        /// <remarks>
        /// Creates a bookmark for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create a bookmark for.</param>
        /// <param name="createBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AudioBookmarkModel</returns>
        System.Threading.Tasks.Task<AudioBookmarkModel> CreateBookmarkAsync(string id, CreateBookmarkRequestModel createBookmarkRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Bookmark
        /// </summary>
        /// <remarks>
        /// Creates a bookmark for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create a bookmark for.</param>
        /// <param name="createBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AudioBookmarkModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudioBookmarkModel>> CreateBookmarkWithHttpInfoAsync(string id, CreateBookmarkRequestModel createBookmarkRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Library Items In Progress
        /// </summary>
        /// <remarks>
        /// Retrieves library items that are in progress for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit for how many library items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetItemsInProgressResponseModel</returns>
        System.Threading.Tasks.Task<GetItemsInProgressResponseModel> GetLibraryItemsInProgressAsync(int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Library Items In Progress
        /// </summary>
        /// <remarks>
        /// Retrieves library items that are in progress for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit for how many library items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetItemsInProgressResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetItemsInProgressResponseModel>> GetLibraryItemsInProgressWithHttpInfoAsync(int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Media Progress
        /// </summary>
        /// <remarks>
        /// Retrieves your media progress that is associated with the given library item ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MediaProgressModel</returns>
        System.Threading.Tasks.Task<MediaProgressModel> GetMediaProgressAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Media Progress
        /// </summary>
        /// <remarks>
        /// Retrieves your media progress that is associated with the given library item ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MediaProgressModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaProgressModel>> GetMediaProgressWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Media Progress for Episode
        /// </summary>
        /// <remarks>
        /// Retrieves your media progress for the specified library item and podcast episode.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MediaProgressModel</returns>
        System.Threading.Tasks.Task<MediaProgressModel> GetMediaProgressForEpisodeAsync(string id, string episodeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Media Progress for Episode
        /// </summary>
        /// <remarks>
        /// Retrieves your media progress for the specified library item and podcast episode.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MediaProgressModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<MediaProgressModel>> GetMediaProgressForEpisodeWithHttpInfoAsync(string id, string episodeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Your Listening Sessions
        /// </summary>
        /// <remarks>
        /// Retrieves the listening sessions for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsPerPage">The number of listening sessions to retrieve per page. (optional, default to 10)</param>
        /// <param name="page">The page (0-indexed) to retrieve. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetListeningSessionsResponseModel</returns>
        System.Threading.Tasks.Task<GetListeningSessionsResponseModel> GetYourListeningSessionsAsync(int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Your Listening Sessions
        /// </summary>
        /// <remarks>
        /// Retrieves the listening sessions for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsPerPage">The number of listening sessions to retrieve per page. (optional, default to 10)</param>
        /// <param name="page">The page (0-indexed) to retrieve. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetListeningSessionsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetListeningSessionsResponseModel>> GetYourListeningSessionsWithHttpInfoAsync(int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Your Listening Stats
        /// </summary>
        /// <remarks>
        /// Retrieves listening statistics for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetListeningStatsResponseModel</returns>
        System.Threading.Tasks.Task<GetListeningStatsResponseModel> GetYourListeningStatsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Your Listening Stats
        /// </summary>
        /// <remarks>
        /// Retrieves listening statistics for the authenticated user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetListeningStatsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetListeningStatsResponseModel>> GetYourListeningStatsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Your User
        /// </summary>
        /// <remarks>
        /// Retrieves the authenticated user&#39;s details.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserModel</returns>
        System.Threading.Tasks.Task<UserModel> GetYourUserAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Your User
        /// </summary>
        /// <remarks>
        /// Retrieves the authenticated user&#39;s details.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserModel>> GetYourUserWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove a Bookmark
        /// </summary>
        /// <remarks>
        /// Removes a bookmark from a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to remove a bookmark from.</param>
        /// <param name="time">The time (in seconds) of the bookmark to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveBookmarkAsync(string id, int time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove a Bookmark
        /// </summary>
        /// <remarks>
        /// Removes a bookmark from a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to remove a bookmark from.</param>
        /// <param name="time">The time (in seconds) of the bookmark to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveBookmarkWithHttpInfoAsync(string id, int time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove an Item From Continue Listening
        /// </summary>
        /// <remarks>
        /// Removes a library item from the user&#39;s \&quot;Continue Listening\&quot; shelf.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserModel</returns>
        System.Threading.Tasks.Task<UserModel> RemoveItemFromContinueListeningAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove an Item From Continue Listening
        /// </summary>
        /// <remarks>
        /// Removes a library item from the user&#39;s \&quot;Continue Listening\&quot; shelf.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserModel>> RemoveItemFromContinueListeningWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove a Media Progress
        /// </summary>
        /// <remarks>
        /// Removes a media progress entry from the user&#39;s data.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveMediaProgressAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove a Media Progress
        /// </summary>
        /// <remarks>
        /// Removes a media progress entry from the user&#39;s data.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveMediaProgressWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove a Series From Continue Listening
        /// </summary>
        /// <remarks>
        /// Removes a series from your \&quot;Continue Series\&quot; shelf. Your user is returned.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the series to remove from continue listening.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserModel</returns>
        System.Threading.Tasks.Task<UserModel> RemoveSeriesFromContinueListeningAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove a Series From Continue Listening
        /// </summary>
        /// <remarks>
        /// Removes a series from your \&quot;Continue Series\&quot; shelf. Your user is returned.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the series to remove from continue listening.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserModel>> RemoveSeriesFromContinueListeningWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Sync Local Media Progress
        /// </summary>
        /// <remarks>
        /// Syncs local media progress with the server. For any local media progress with a greater lastUpdate time than the lastUpdate time of the matching media progress on the server, the server&#39;s media progress is updated. If the server&#39;s lastUpdate time is greater, the local media progress will be returned with the updated information.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncLocalProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SyncLocalProgressResponseModel</returns>
        System.Threading.Tasks.Task<SyncLocalProgressResponseModel> SyncLocalProgressAsync(SyncLocalProgressRequestModel syncLocalProgressRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Sync Local Media Progress
        /// </summary>
        /// <remarks>
        /// Syncs local media progress with the server. For any local media progress with a greater lastUpdate time than the lastUpdate time of the matching media progress on the server, the server&#39;s media progress is updated. If the server&#39;s lastUpdate time is greater, the local media progress will be returned with the updated information.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncLocalProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SyncLocalProgressResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SyncLocalProgressResponseModel>> SyncLocalProgressWithHttpInfoAsync(SyncLocalProgressRequestModel syncLocalProgressRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Bookmark
        /// </summary>
        /// <remarks>
        /// Updates a bookmark for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to update a bookmark for.</param>
        /// <param name="updateBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AudioBookmarkModel</returns>
        System.Threading.Tasks.Task<AudioBookmarkModel> UpdateBookmarkAsync(string id, UpdateBookmarkRequestModel updateBookmarkRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Bookmark
        /// </summary>
        /// <remarks>
        /// Updates a bookmark for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to update a bookmark for.</param>
        /// <param name="updateBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AudioBookmarkModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AudioBookmarkModel>> UpdateBookmarkWithHttpInfoAsync(string id, UpdateBookmarkRequestModel updateBookmarkRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create/Update Media Progress
        /// </summary>
        /// <remarks>
        /// Creates or updates media progress for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMediaProgressAsync(string id, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create/Update Media Progress
        /// </summary>
        /// <remarks>
        /// Creates or updates media progress for a library item.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMediaProgressWithHttpInfoAsync(string id, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create/Update Media Progress for Episode
        /// </summary>
        /// <remarks>
        /// Creates or updates media progress for a library item and podcast episode.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateMediaProgressForEpisodeAsync(string id, string episodeID, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create/Update Media Progress for Episode
        /// </summary>
        /// <remarks>
        /// Creates or updates media progress for a library item and podcast episode.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateMediaProgressForEpisodeWithHttpInfoAsync(string id, string episodeID, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMeApi : IMeApiSync, IMeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MeApi : IMeApi
    {
        private Audiobookshelf.ClientLibrary.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeApi(string basePath)
        {
            this.Configuration = Audiobookshelf.ClientLibrary.Client.Configuration.MergeConfigurations(
                Audiobookshelf.ClientLibrary.Client.GlobalConfiguration.Instance,
                new Audiobookshelf.ClientLibrary.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MeApi(Audiobookshelf.ClientLibrary.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Audiobookshelf.ClientLibrary.Client.Configuration.MergeConfigurations(
                Audiobookshelf.ClientLibrary.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MeApi(Audiobookshelf.ClientLibrary.Client.ISynchronousClient client, Audiobookshelf.ClientLibrary.Client.IAsynchronousClient asyncClient, Audiobookshelf.ClientLibrary.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Audiobookshelf.ClientLibrary.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Batch Create/Update Media Progress Batch creates or updates media progress for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateMediaProgressRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void BatchUpdateMediaProgress(List<BatchUpdateMediaProgressRequestInnerModel> batchUpdateMediaProgressRequestInnerModel, int operationIndex = 0)
        {
            BatchUpdateMediaProgressWithHttpInfo(batchUpdateMediaProgressRequestInnerModel);
        }

        /// <summary>
        /// Batch Create/Update Media Progress Batch creates or updates media progress for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateMediaProgressRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> BatchUpdateMediaProgressWithHttpInfo(List<BatchUpdateMediaProgressRequestInnerModel> batchUpdateMediaProgressRequestInnerModel, int operationIndex = 0)
        {
            // verify the required parameter 'batchUpdateMediaProgressRequestInnerModel' is set
            if (batchUpdateMediaProgressRequestInnerModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'batchUpdateMediaProgressRequestInnerModel' when calling MeApi->BatchUpdateMediaProgress");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchUpdateMediaProgressRequestInnerModel;

            localVarRequestOptions.Operation = "MeApi.BatchUpdateMediaProgress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/me/progress/batch/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateMediaProgress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Create/Update Media Progress Batch creates or updates media progress for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateMediaProgressRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BatchUpdateMediaProgressAsync(List<BatchUpdateMediaProgressRequestInnerModel> batchUpdateMediaProgressRequestInnerModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await BatchUpdateMediaProgressWithHttpInfoAsync(batchUpdateMediaProgressRequestInnerModel, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Batch Create/Update Media Progress Batch creates or updates media progress for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchUpdateMediaProgressRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> BatchUpdateMediaProgressWithHttpInfoAsync(List<BatchUpdateMediaProgressRequestInnerModel> batchUpdateMediaProgressRequestInnerModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'batchUpdateMediaProgressRequestInnerModel' is set
            if (batchUpdateMediaProgressRequestInnerModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'batchUpdateMediaProgressRequestInnerModel' when calling MeApi->BatchUpdateMediaProgress");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = batchUpdateMediaProgressRequestInnerModel;

            localVarRequestOptions.Operation = "MeApi.BatchUpdateMediaProgress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/api/me/progress/batch/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateMediaProgress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Your Password Changes the password for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ChangePasswordResponseModel</returns>
        public ChangePasswordResponseModel ChangePassword(ChangePasswordRequestModel changePasswordRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<ChangePasswordResponseModel> localVarResponse = ChangePasswordWithHttpInfo(changePasswordRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change Your Password Changes the password for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ChangePasswordResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<ChangePasswordResponseModel> ChangePasswordWithHttpInfo(ChangePasswordRequestModel changePasswordRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'changePasswordRequestModel' is set
            if (changePasswordRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'changePasswordRequestModel' when calling MeApi->ChangePassword");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = changePasswordRequestModel;

            localVarRequestOptions.Operation = "MeApi.ChangePassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ChangePasswordResponseModel>("/api/me/password", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangePassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change Your Password Changes the password for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ChangePasswordResponseModel</returns>
        public async System.Threading.Tasks.Task<ChangePasswordResponseModel> ChangePasswordAsync(ChangePasswordRequestModel changePasswordRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<ChangePasswordResponseModel> localVarResponse = await ChangePasswordWithHttpInfoAsync(changePasswordRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change Your Password Changes the password for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="changePasswordRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ChangePasswordResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<ChangePasswordResponseModel>> ChangePasswordWithHttpInfoAsync(ChangePasswordRequestModel changePasswordRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'changePasswordRequestModel' is set
            if (changePasswordRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'changePasswordRequestModel' when calling MeApi->ChangePassword");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = changePasswordRequestModel;

            localVarRequestOptions.Operation = "MeApi.ChangePassword";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ChangePasswordResponseModel>("/api/me/password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangePassword", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Bookmark Creates a bookmark for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create a bookmark for.</param>
        /// <param name="createBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AudioBookmarkModel</returns>
        public AudioBookmarkModel CreateBookmark(string id, CreateBookmarkRequestModel createBookmarkRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<AudioBookmarkModel> localVarResponse = CreateBookmarkWithHttpInfo(id, createBookmarkRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Bookmark Creates a bookmark for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create a bookmark for.</param>
        /// <param name="createBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AudioBookmarkModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<AudioBookmarkModel> CreateBookmarkWithHttpInfo(string id, CreateBookmarkRequestModel createBookmarkRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->CreateBookmark");
            }

            // verify the required parameter 'createBookmarkRequestModel' is set
            if (createBookmarkRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'createBookmarkRequestModel' when calling MeApi->CreateBookmark");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createBookmarkRequestModel;

            localVarRequestOptions.Operation = "MeApi.CreateBookmark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AudioBookmarkModel>("/api/me/item/{id}/bookmark", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBookmark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Bookmark Creates a bookmark for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create a bookmark for.</param>
        /// <param name="createBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AudioBookmarkModel</returns>
        public async System.Threading.Tasks.Task<AudioBookmarkModel> CreateBookmarkAsync(string id, CreateBookmarkRequestModel createBookmarkRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<AudioBookmarkModel> localVarResponse = await CreateBookmarkWithHttpInfoAsync(id, createBookmarkRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Bookmark Creates a bookmark for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create a bookmark for.</param>
        /// <param name="createBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AudioBookmarkModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<AudioBookmarkModel>> CreateBookmarkWithHttpInfoAsync(string id, CreateBookmarkRequestModel createBookmarkRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->CreateBookmark");
            }

            // verify the required parameter 'createBookmarkRequestModel' is set
            if (createBookmarkRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'createBookmarkRequestModel' when calling MeApi->CreateBookmark");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createBookmarkRequestModel;

            localVarRequestOptions.Operation = "MeApi.CreateBookmark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AudioBookmarkModel>("/api/me/item/{id}/bookmark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBookmark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Library Items In Progress Retrieves library items that are in progress for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit for how many library items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetItemsInProgressResponseModel</returns>
        public GetItemsInProgressResponseModel GetLibraryItemsInProgress(int? limit = default(int?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetItemsInProgressResponseModel> localVarResponse = GetLibraryItemsInProgressWithHttpInfo(limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Library Items In Progress Retrieves library items that are in progress for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit for how many library items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetItemsInProgressResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetItemsInProgressResponseModel> GetLibraryItemsInProgressWithHttpInfo(int? limit = default(int?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "MeApi.GetLibraryItemsInProgress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetItemsInProgressResponseModel>("/api/me/items-in-progress", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryItemsInProgress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Library Items In Progress Retrieves library items that are in progress for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit for how many library items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetItemsInProgressResponseModel</returns>
        public async System.Threading.Tasks.Task<GetItemsInProgressResponseModel> GetLibraryItemsInProgressAsync(int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetItemsInProgressResponseModel> localVarResponse = await GetLibraryItemsInProgressWithHttpInfoAsync(limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Library Items In Progress Retrieves library items that are in progress for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">A limit for how many library items to return. (optional, default to 25)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetItemsInProgressResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetItemsInProgressResponseModel>> GetLibraryItemsInProgressWithHttpInfoAsync(int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "MeApi.GetLibraryItemsInProgress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetItemsInProgressResponseModel>("/api/me/items-in-progress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryItemsInProgress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Media Progress Retrieves your media progress that is associated with the given library item ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MediaProgressModel</returns>
        public MediaProgressModel GetMediaProgress(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<MediaProgressModel> localVarResponse = GetMediaProgressWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Media Progress Retrieves your media progress that is associated with the given library item ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MediaProgressModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<MediaProgressModel> GetMediaProgressWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->GetMediaProgress");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MeApi.GetMediaProgress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MediaProgressModel>("/api/me/progress/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMediaProgress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Media Progress Retrieves your media progress that is associated with the given library item ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MediaProgressModel</returns>
        public async System.Threading.Tasks.Task<MediaProgressModel> GetMediaProgressAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<MediaProgressModel> localVarResponse = await GetMediaProgressWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Media Progress Retrieves your media progress that is associated with the given library item ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MediaProgressModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<MediaProgressModel>> GetMediaProgressWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->GetMediaProgress");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MeApi.GetMediaProgress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MediaProgressModel>("/api/me/progress/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMediaProgress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Media Progress for Episode Retrieves your media progress for the specified library item and podcast episode.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MediaProgressModel</returns>
        public MediaProgressModel GetMediaProgressForEpisode(string id, string episodeID, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<MediaProgressModel> localVarResponse = GetMediaProgressForEpisodeWithHttpInfo(id, episodeID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Media Progress for Episode Retrieves your media progress for the specified library item and podcast episode.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MediaProgressModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<MediaProgressModel> GetMediaProgressForEpisodeWithHttpInfo(string id, string episodeID, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->GetMediaProgressForEpisode");
            }

            // verify the required parameter 'episodeID' is set
            if (episodeID == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'episodeID' when calling MeApi->GetMediaProgressForEpisode");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("EpisodeID", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(episodeID)); // path parameter

            localVarRequestOptions.Operation = "MeApi.GetMediaProgressForEpisode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MediaProgressModel>("/api/me/progress/{id}/{EpisodeID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMediaProgressForEpisode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Media Progress for Episode Retrieves your media progress for the specified library item and podcast episode.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MediaProgressModel</returns>
        public async System.Threading.Tasks.Task<MediaProgressModel> GetMediaProgressForEpisodeAsync(string id, string episodeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<MediaProgressModel> localVarResponse = await GetMediaProgressForEpisodeWithHttpInfoAsync(id, episodeID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Media Progress for Episode Retrieves your media progress for the specified library item and podcast episode.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to retrieve the media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to retrieve the media progress for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MediaProgressModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<MediaProgressModel>> GetMediaProgressForEpisodeWithHttpInfoAsync(string id, string episodeID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->GetMediaProgressForEpisode");
            }

            // verify the required parameter 'episodeID' is set
            if (episodeID == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'episodeID' when calling MeApi->GetMediaProgressForEpisode");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("EpisodeID", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(episodeID)); // path parameter

            localVarRequestOptions.Operation = "MeApi.GetMediaProgressForEpisode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MediaProgressModel>("/api/me/progress/{id}/{EpisodeID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMediaProgressForEpisode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Your Listening Sessions Retrieves the listening sessions for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsPerPage">The number of listening sessions to retrieve per page. (optional, default to 10)</param>
        /// <param name="page">The page (0-indexed) to retrieve. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetListeningSessionsResponseModel</returns>
        public GetListeningSessionsResponseModel GetYourListeningSessions(int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetListeningSessionsResponseModel> localVarResponse = GetYourListeningSessionsWithHttpInfo(itemsPerPage, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Your Listening Sessions Retrieves the listening sessions for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsPerPage">The number of listening sessions to retrieve per page. (optional, default to 10)</param>
        /// <param name="page">The page (0-indexed) to retrieve. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetListeningSessionsResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetListeningSessionsResponseModel> GetYourListeningSessionsWithHttpInfo(int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "MeApi.GetYourListeningSessions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetListeningSessionsResponseModel>("/api/me/listening-sessions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetYourListeningSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Your Listening Sessions Retrieves the listening sessions for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsPerPage">The number of listening sessions to retrieve per page. (optional, default to 10)</param>
        /// <param name="page">The page (0-indexed) to retrieve. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetListeningSessionsResponseModel</returns>
        public async System.Threading.Tasks.Task<GetListeningSessionsResponseModel> GetYourListeningSessionsAsync(int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetListeningSessionsResponseModel> localVarResponse = await GetYourListeningSessionsWithHttpInfoAsync(itemsPerPage, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Your Listening Sessions Retrieves the listening sessions for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="itemsPerPage">The number of listening sessions to retrieve per page. (optional, default to 10)</param>
        /// <param name="page">The page (0-indexed) to retrieve. (optional, default to 0)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetListeningSessionsResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetListeningSessionsResponseModel>> GetYourListeningSessionsWithHttpInfoAsync(int? itemsPerPage = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "MeApi.GetYourListeningSessions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetListeningSessionsResponseModel>("/api/me/listening-sessions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetYourListeningSessions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Your Listening Stats Retrieves listening statistics for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetListeningStatsResponseModel</returns>
        public GetListeningStatsResponseModel GetYourListeningStats(int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetListeningStatsResponseModel> localVarResponse = GetYourListeningStatsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Your Listening Stats Retrieves listening statistics for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetListeningStatsResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetListeningStatsResponseModel> GetYourListeningStatsWithHttpInfo(int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MeApi.GetYourListeningStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetListeningStatsResponseModel>("/api/me/listening-stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetYourListeningStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Your Listening Stats Retrieves listening statistics for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetListeningStatsResponseModel</returns>
        public async System.Threading.Tasks.Task<GetListeningStatsResponseModel> GetYourListeningStatsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetListeningStatsResponseModel> localVarResponse = await GetYourListeningStatsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Your Listening Stats Retrieves listening statistics for the authenticated user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetListeningStatsResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetListeningStatsResponseModel>> GetYourListeningStatsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MeApi.GetYourListeningStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetListeningStatsResponseModel>("/api/me/listening-stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetYourListeningStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Your User Retrieves the authenticated user&#39;s details.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserModel</returns>
        public UserModel GetYourUser(int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UserModel> localVarResponse = GetYourUserWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Your User Retrieves the authenticated user&#39;s details.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<UserModel> GetYourUserWithHttpInfo(int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MeApi.GetYourUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserModel>("/api/me", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetYourUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Your User Retrieves the authenticated user&#39;s details.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserModel</returns>
        public async System.Threading.Tasks.Task<UserModel> GetYourUserAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UserModel> localVarResponse = await GetYourUserWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Your User Retrieves the authenticated user&#39;s details.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<UserModel>> GetYourUserWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "MeApi.GetYourUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserModel>("/api/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetYourUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Bookmark Removes a bookmark from a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to remove a bookmark from.</param>
        /// <param name="time">The time (in seconds) of the bookmark to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveBookmark(string id, int time, int operationIndex = 0)
        {
            RemoveBookmarkWithHttpInfo(id, time);
        }

        /// <summary>
        /// Remove a Bookmark Removes a bookmark from a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to remove a bookmark from.</param>
        /// <param name="time">The time (in seconds) of the bookmark to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> RemoveBookmarkWithHttpInfo(string id, int time, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->RemoveBookmark");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("time", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(time)); // path parameter

            localVarRequestOptions.Operation = "MeApi.RemoveBookmark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/me/item/{id}/bookmark/{time}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveBookmark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Bookmark Removes a bookmark from a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to remove a bookmark from.</param>
        /// <param name="time">The time (in seconds) of the bookmark to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveBookmarkAsync(string id, int time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RemoveBookmarkWithHttpInfoAsync(id, time, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a Bookmark Removes a bookmark from a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to remove a bookmark from.</param>
        /// <param name="time">The time (in seconds) of the bookmark to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> RemoveBookmarkWithHttpInfoAsync(string id, int time, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->RemoveBookmark");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("time", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(time)); // path parameter

            localVarRequestOptions.Operation = "MeApi.RemoveBookmark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/me/item/{id}/bookmark/{time}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveBookmark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an Item From Continue Listening Removes a library item from the user&#39;s \&quot;Continue Listening\&quot; shelf.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserModel</returns>
        public UserModel RemoveItemFromContinueListening(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UserModel> localVarResponse = RemoveItemFromContinueListeningWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an Item From Continue Listening Removes a library item from the user&#39;s \&quot;Continue Listening\&quot; shelf.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<UserModel> RemoveItemFromContinueListeningWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->RemoveItemFromContinueListening");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MeApi.RemoveItemFromContinueListening";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserModel>("/api/me/progress/{id}/remove-from-continue-listening", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveItemFromContinueListening", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an Item From Continue Listening Removes a library item from the user&#39;s \&quot;Continue Listening\&quot; shelf.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserModel</returns>
        public async System.Threading.Tasks.Task<UserModel> RemoveItemFromContinueListeningAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UserModel> localVarResponse = await RemoveItemFromContinueListeningWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an Item From Continue Listening Removes a library item from the user&#39;s \&quot;Continue Listening\&quot; shelf.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<UserModel>> RemoveItemFromContinueListeningWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->RemoveItemFromContinueListening");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MeApi.RemoveItemFromContinueListening";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserModel>("/api/me/progress/{id}/remove-from-continue-listening", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveItemFromContinueListening", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Media Progress Removes a media progress entry from the user&#39;s data.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveMediaProgress(string id, int operationIndex = 0)
        {
            RemoveMediaProgressWithHttpInfo(id);
        }

        /// <summary>
        /// Remove a Media Progress Removes a media progress entry from the user&#39;s data.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> RemoveMediaProgressWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->RemoveMediaProgress");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MeApi.RemoveMediaProgress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/me/progress/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveMediaProgress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Media Progress Removes a media progress entry from the user&#39;s data.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveMediaProgressAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RemoveMediaProgressWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a Media Progress Removes a media progress entry from the user&#39;s data.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the media progress to remove.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> RemoveMediaProgressWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->RemoveMediaProgress");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MeApi.RemoveMediaProgress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/me/progress/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveMediaProgress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Series From Continue Listening Removes a series from your \&quot;Continue Series\&quot; shelf. Your user is returned.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the series to remove from continue listening.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserModel</returns>
        public UserModel RemoveSeriesFromContinueListening(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UserModel> localVarResponse = RemoveSeriesFromContinueListeningWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a Series From Continue Listening Removes a series from your \&quot;Continue Series\&quot; shelf. Your user is returned.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the series to remove from continue listening.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<UserModel> RemoveSeriesFromContinueListeningWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->RemoveSeriesFromContinueListening");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MeApi.RemoveSeriesFromContinueListening";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserModel>("/api/me/series/{id}/remove-from-continue-listening", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSeriesFromContinueListening", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Series From Continue Listening Removes a series from your \&quot;Continue Series\&quot; shelf. Your user is returned.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the series to remove from continue listening.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserModel</returns>
        public async System.Threading.Tasks.Task<UserModel> RemoveSeriesFromContinueListeningAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<UserModel> localVarResponse = await RemoveSeriesFromContinueListeningWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a Series From Continue Listening Removes a series from your \&quot;Continue Series\&quot; shelf. Your user is returned.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the series to remove from continue listening.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<UserModel>> RemoveSeriesFromContinueListeningWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->RemoveSeriesFromContinueListening");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "MeApi.RemoveSeriesFromContinueListening";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserModel>("/api/me/series/{id}/remove-from-continue-listening", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSeriesFromContinueListening", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync Local Media Progress Syncs local media progress with the server. For any local media progress with a greater lastUpdate time than the lastUpdate time of the matching media progress on the server, the server&#39;s media progress is updated. If the server&#39;s lastUpdate time is greater, the local media progress will be returned with the updated information.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncLocalProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SyncLocalProgressResponseModel</returns>
        public SyncLocalProgressResponseModel SyncLocalProgress(SyncLocalProgressRequestModel syncLocalProgressRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<SyncLocalProgressResponseModel> localVarResponse = SyncLocalProgressWithHttpInfo(syncLocalProgressRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync Local Media Progress Syncs local media progress with the server. For any local media progress with a greater lastUpdate time than the lastUpdate time of the matching media progress on the server, the server&#39;s media progress is updated. If the server&#39;s lastUpdate time is greater, the local media progress will be returned with the updated information.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncLocalProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SyncLocalProgressResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<SyncLocalProgressResponseModel> SyncLocalProgressWithHttpInfo(SyncLocalProgressRequestModel syncLocalProgressRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'syncLocalProgressRequestModel' is set
            if (syncLocalProgressRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'syncLocalProgressRequestModel' when calling MeApi->SyncLocalProgress");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = syncLocalProgressRequestModel;

            localVarRequestOptions.Operation = "MeApi.SyncLocalProgress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SyncLocalProgressResponseModel>("/api/me/sync-local-progress", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncLocalProgress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync Local Media Progress Syncs local media progress with the server. For any local media progress with a greater lastUpdate time than the lastUpdate time of the matching media progress on the server, the server&#39;s media progress is updated. If the server&#39;s lastUpdate time is greater, the local media progress will be returned with the updated information.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncLocalProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SyncLocalProgressResponseModel</returns>
        public async System.Threading.Tasks.Task<SyncLocalProgressResponseModel> SyncLocalProgressAsync(SyncLocalProgressRequestModel syncLocalProgressRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<SyncLocalProgressResponseModel> localVarResponse = await SyncLocalProgressWithHttpInfoAsync(syncLocalProgressRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync Local Media Progress Syncs local media progress with the server. For any local media progress with a greater lastUpdate time than the lastUpdate time of the matching media progress on the server, the server&#39;s media progress is updated. If the server&#39;s lastUpdate time is greater, the local media progress will be returned with the updated information.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="syncLocalProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SyncLocalProgressResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<SyncLocalProgressResponseModel>> SyncLocalProgressWithHttpInfoAsync(SyncLocalProgressRequestModel syncLocalProgressRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'syncLocalProgressRequestModel' is set
            if (syncLocalProgressRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'syncLocalProgressRequestModel' when calling MeApi->SyncLocalProgress");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = syncLocalProgressRequestModel;

            localVarRequestOptions.Operation = "MeApi.SyncLocalProgress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SyncLocalProgressResponseModel>("/api/me/sync-local-progress", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncLocalProgress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Bookmark Updates a bookmark for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to update a bookmark for.</param>
        /// <param name="updateBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AudioBookmarkModel</returns>
        public AudioBookmarkModel UpdateBookmark(string id, UpdateBookmarkRequestModel updateBookmarkRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<AudioBookmarkModel> localVarResponse = UpdateBookmarkWithHttpInfo(id, updateBookmarkRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Bookmark Updates a bookmark for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to update a bookmark for.</param>
        /// <param name="updateBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AudioBookmarkModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<AudioBookmarkModel> UpdateBookmarkWithHttpInfo(string id, UpdateBookmarkRequestModel updateBookmarkRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->UpdateBookmark");
            }

            // verify the required parameter 'updateBookmarkRequestModel' is set
            if (updateBookmarkRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateBookmarkRequestModel' when calling MeApi->UpdateBookmark");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateBookmarkRequestModel;

            localVarRequestOptions.Operation = "MeApi.UpdateBookmark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<AudioBookmarkModel>("/api/me/item/{id}/bookmark", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBookmark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Bookmark Updates a bookmark for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to update a bookmark for.</param>
        /// <param name="updateBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AudioBookmarkModel</returns>
        public async System.Threading.Tasks.Task<AudioBookmarkModel> UpdateBookmarkAsync(string id, UpdateBookmarkRequestModel updateBookmarkRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<AudioBookmarkModel> localVarResponse = await UpdateBookmarkWithHttpInfoAsync(id, updateBookmarkRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Bookmark Updates a bookmark for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to update a bookmark for.</param>
        /// <param name="updateBookmarkRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AudioBookmarkModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<AudioBookmarkModel>> UpdateBookmarkWithHttpInfoAsync(string id, UpdateBookmarkRequestModel updateBookmarkRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->UpdateBookmark");
            }

            // verify the required parameter 'updateBookmarkRequestModel' is set
            if (updateBookmarkRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateBookmarkRequestModel' when calling MeApi->UpdateBookmark");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateBookmarkRequestModel;

            localVarRequestOptions.Operation = "MeApi.UpdateBookmark";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<AudioBookmarkModel>("/api/me/item/{id}/bookmark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBookmark", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create/Update Media Progress Creates or updates media progress for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateMediaProgress(string id, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0)
        {
            UpdateMediaProgressWithHttpInfo(id, updateMediaProgressRequestModel);
        }

        /// <summary>
        /// Create/Update Media Progress Creates or updates media progress for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> UpdateMediaProgressWithHttpInfo(string id, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->UpdateMediaProgress");
            }

            // verify the required parameter 'updateMediaProgressRequestModel' is set
            if (updateMediaProgressRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateMediaProgressRequestModel' when calling MeApi->UpdateMediaProgress");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateMediaProgressRequestModel;

            localVarRequestOptions.Operation = "MeApi.UpdateMediaProgress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/me/progress/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMediaProgress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create/Update Media Progress Creates or updates media progress for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMediaProgressAsync(string id, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await UpdateMediaProgressWithHttpInfoAsync(id, updateMediaProgressRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create/Update Media Progress Creates or updates media progress for a library item.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> UpdateMediaProgressWithHttpInfoAsync(string id, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->UpdateMediaProgress");
            }

            // verify the required parameter 'updateMediaProgressRequestModel' is set
            if (updateMediaProgressRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateMediaProgressRequestModel' when calling MeApi->UpdateMediaProgress");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateMediaProgressRequestModel;

            localVarRequestOptions.Operation = "MeApi.UpdateMediaProgress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/api/me/progress/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMediaProgress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create/Update Media Progress for Episode Creates or updates media progress for a library item and podcast episode.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateMediaProgressForEpisode(string id, string episodeID, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0)
        {
            UpdateMediaProgressForEpisodeWithHttpInfo(id, episodeID, updateMediaProgressRequestModel);
        }

        /// <summary>
        /// Create/Update Media Progress for Episode Creates or updates media progress for a library item and podcast episode.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> UpdateMediaProgressForEpisodeWithHttpInfo(string id, string episodeID, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->UpdateMediaProgressForEpisode");
            }

            // verify the required parameter 'episodeID' is set
            if (episodeID == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'episodeID' when calling MeApi->UpdateMediaProgressForEpisode");
            }

            // verify the required parameter 'updateMediaProgressRequestModel' is set
            if (updateMediaProgressRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateMediaProgressRequestModel' when calling MeApi->UpdateMediaProgressForEpisode");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("EpisodeID", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(episodeID)); // path parameter
            localVarRequestOptions.Data = updateMediaProgressRequestModel;

            localVarRequestOptions.Operation = "MeApi.UpdateMediaProgressForEpisode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/me/progress/{id}/{EpisodeID}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMediaProgressForEpisode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create/Update Media Progress for Episode Creates or updates media progress for a library item and podcast episode.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateMediaProgressForEpisodeAsync(string id, string episodeID, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await UpdateMediaProgressForEpisodeWithHttpInfoAsync(id, episodeID, updateMediaProgressRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create/Update Media Progress for Episode Creates or updates media progress for a library item and podcast episode.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the library item to create/update media progress for.</param>
        /// <param name="episodeID">The ID of the podcast episode to create/update media progress for.</param>
        /// <param name="updateMediaProgressRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> UpdateMediaProgressForEpisodeWithHttpInfoAsync(string id, string episodeID, UpdateMediaProgressRequestModel updateMediaProgressRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling MeApi->UpdateMediaProgressForEpisode");
            }

            // verify the required parameter 'episodeID' is set
            if (episodeID == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'episodeID' when calling MeApi->UpdateMediaProgressForEpisode");
            }

            // verify the required parameter 'updateMediaProgressRequestModel' is set
            if (updateMediaProgressRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateMediaProgressRequestModel' when calling MeApi->UpdateMediaProgressForEpisode");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("EpisodeID", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(episodeID)); // path parameter
            localVarRequestOptions.Data = updateMediaProgressRequestModel;

            localVarRequestOptions.Operation = "MeApi.UpdateMediaProgressForEpisode";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/api/me/progress/{id}/{EpisodeID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMediaProgressForEpisode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
