/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Audiobookshelf.ClientLibrary.Client;
using Audiobookshelf.ClientLibrary.Model;

namespace Audiobookshelf.ClientLibrary.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaylistsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add an Item to a Playlist
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="addPlaylistItemRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistExpandedModel</returns>
        PlaylistExpandedModel AddItemToPlaylist(string id, AddPlaylistItemRequestModel addPlaylistItemRequestModel, int operationIndex = 0);

        /// <summary>
        /// Add an Item to a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="addPlaylistItemRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistExpandedModel</returns>
        ApiResponse<PlaylistExpandedModel> AddItemToPlaylistWithHttpInfo(string id, AddPlaylistItemRequestModel addPlaylistItemRequestModel, int operationIndex = 0);
        /// <summary>
        /// Batch Add Items to a Playlist
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchAddItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistExpandedModel</returns>
        PlaylistExpandedModel BatchAddItemsToPlaylist(string id, BatchAddItemsRequestModel batchAddItemsRequestModel, int operationIndex = 0);

        /// <summary>
        /// Batch Add Items to a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchAddItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistExpandedModel</returns>
        ApiResponse<PlaylistExpandedModel> BatchAddItemsToPlaylistWithHttpInfo(string id, BatchAddItemsRequestModel batchAddItemsRequestModel, int operationIndex = 0);
        /// <summary>
        /// Batch Remove Items From a Playlist
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchRemoveItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistExpandedModel</returns>
        PlaylistExpandedModel BatchRemoveItemsFromPlaylist(string id, BatchRemoveItemsRequestModel batchRemoveItemsRequestModel, int operationIndex = 0);

        /// <summary>
        /// Batch Remove Items From a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchRemoveItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistExpandedModel</returns>
        ApiResponse<PlaylistExpandedModel> BatchRemoveItemsFromPlaylistWithHttpInfo(string id, BatchRemoveItemsRequestModel batchRemoveItemsRequestModel, int operationIndex = 0);
        /// <summary>
        /// Create a Playlist
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistExpandedModel</returns>
        PlaylistExpandedModel CreatePlaylist(CreatePlaylistRequestModel createPlaylistRequestModel, int operationIndex = 0);

        /// <summary>
        /// Create a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistExpandedModel</returns>
        ApiResponse<PlaylistExpandedModel> CreatePlaylistWithHttpInfo(CreatePlaylistRequestModel createPlaylistRequestModel, int operationIndex = 0);
        /// <summary>
        /// Delete a Playlist
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePlaylist(string id, int operationIndex = 0);

        /// <summary>
        /// Delete a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePlaylistWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get All User Playlists
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllPlaylistsResponseModel</returns>
        GetAllPlaylistsResponseModel GetAllUserPlaylists(int operationIndex = 0);

        /// <summary>
        /// Get All User Playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllPlaylistsResponseModel</returns>
        ApiResponse<GetAllPlaylistsResponseModel> GetAllUserPlaylistsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get a Playlist
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistExpandedModel</returns>
        PlaylistExpandedModel GetPlaylist(string id, int operationIndex = 0);

        /// <summary>
        /// Get a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistExpandedModel</returns>
        ApiResponse<PlaylistExpandedModel> GetPlaylistWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Remove an Item From a Playlist
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="libraryItemId">The ID of the library item the playlist item to remove is for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistExpandedModel</returns>
        PlaylistExpandedModel RemoveItemFromPlaylist(string id, string libraryItemId, int operationIndex = 0);

        /// <summary>
        /// Remove an Item From a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="libraryItemId">The ID of the library item the playlist item to remove is for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistExpandedModel</returns>
        ApiResponse<PlaylistExpandedModel> RemoveItemFromPlaylistWithHttpInfo(string id, string libraryItemId, int operationIndex = 0);
        /// <summary>
        /// Update a Playlist
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="updatePlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistExpandedModel</returns>
        PlaylistExpandedModel UpdatePlaylist(string id, UpdatePlaylistRequestModel updatePlaylistRequestModel, int operationIndex = 0);

        /// <summary>
        /// Update a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="updatePlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistExpandedModel</returns>
        ApiResponse<PlaylistExpandedModel> UpdatePlaylistWithHttpInfo(string id, UpdatePlaylistRequestModel updatePlaylistRequestModel, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaylistsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add an Item to a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="addPlaylistItemRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistExpandedModel</returns>
        System.Threading.Tasks.Task<PlaylistExpandedModel> AddItemToPlaylistAsync(string id, AddPlaylistItemRequestModel addPlaylistItemRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add an Item to a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="addPlaylistItemRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistExpandedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaylistExpandedModel>> AddItemToPlaylistWithHttpInfoAsync(string id, AddPlaylistItemRequestModel addPlaylistItemRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Batch Add Items to a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchAddItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistExpandedModel</returns>
        System.Threading.Tasks.Task<PlaylistExpandedModel> BatchAddItemsToPlaylistAsync(string id, BatchAddItemsRequestModel batchAddItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Batch Add Items to a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchAddItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistExpandedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaylistExpandedModel>> BatchAddItemsToPlaylistWithHttpInfoAsync(string id, BatchAddItemsRequestModel batchAddItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Batch Remove Items From a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchRemoveItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistExpandedModel</returns>
        System.Threading.Tasks.Task<PlaylistExpandedModel> BatchRemoveItemsFromPlaylistAsync(string id, BatchRemoveItemsRequestModel batchRemoveItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Batch Remove Items From a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchRemoveItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistExpandedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaylistExpandedModel>> BatchRemoveItemsFromPlaylistWithHttpInfoAsync(string id, BatchRemoveItemsRequestModel batchRemoveItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistExpandedModel</returns>
        System.Threading.Tasks.Task<PlaylistExpandedModel> CreatePlaylistAsync(CreatePlaylistRequestModel createPlaylistRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistExpandedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaylistExpandedModel>> CreatePlaylistWithHttpInfoAsync(CreatePlaylistRequestModel createPlaylistRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePlaylistAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePlaylistWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get All User Playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllPlaylistsResponseModel</returns>
        System.Threading.Tasks.Task<GetAllPlaylistsResponseModel> GetAllUserPlaylistsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get All User Playlists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllPlaylistsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllPlaylistsResponseModel>> GetAllUserPlaylistsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistExpandedModel</returns>
        System.Threading.Tasks.Task<PlaylistExpandedModel> GetPlaylistAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistExpandedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaylistExpandedModel>> GetPlaylistWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove an Item From a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="libraryItemId">The ID of the library item the playlist item to remove is for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistExpandedModel</returns>
        System.Threading.Tasks.Task<PlaylistExpandedModel> RemoveItemFromPlaylistAsync(string id, string libraryItemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove an Item From a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="libraryItemId">The ID of the library item the playlist item to remove is for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistExpandedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaylistExpandedModel>> RemoveItemFromPlaylistWithHttpInfoAsync(string id, string libraryItemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="updatePlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistExpandedModel</returns>
        System.Threading.Tasks.Task<PlaylistExpandedModel> UpdatePlaylistAsync(string id, UpdatePlaylistRequestModel updatePlaylistRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Playlist
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="updatePlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistExpandedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlaylistExpandedModel>> UpdatePlaylistWithHttpInfoAsync(string id, UpdatePlaylistRequestModel updatePlaylistRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlaylistsApi : IPlaylistsApiSync, IPlaylistsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlaylistsApi : IPlaylistsApi
    {
        private Audiobookshelf.ClientLibrary.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaylistsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlaylistsApi(string basePath)
        {
            this.Configuration = Audiobookshelf.ClientLibrary.Client.Configuration.MergeConfigurations(
                Audiobookshelf.ClientLibrary.Client.GlobalConfiguration.Instance,
                new Audiobookshelf.ClientLibrary.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlaylistsApi(Audiobookshelf.ClientLibrary.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Audiobookshelf.ClientLibrary.Client.Configuration.MergeConfigurations(
                Audiobookshelf.ClientLibrary.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PlaylistsApi(Audiobookshelf.ClientLibrary.Client.ISynchronousClient client, Audiobookshelf.ClientLibrary.Client.IAsynchronousClient asyncClient, Audiobookshelf.ClientLibrary.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Audiobookshelf.ClientLibrary.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add an Item to a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="addPlaylistItemRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistExpandedModel</returns>
        public PlaylistExpandedModel AddItemToPlaylist(string id, AddPlaylistItemRequestModel addPlaylistItemRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> localVarResponse = AddItemToPlaylistWithHttpInfo(id, addPlaylistItemRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an Item to a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="addPlaylistItemRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistExpandedModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> AddItemToPlaylistWithHttpInfo(string id, AddPlaylistItemRequestModel addPlaylistItemRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling PlaylistsApi->AddItemToPlaylist");
            }

            // verify the required parameter 'addPlaylistItemRequestModel' is set
            if (addPlaylistItemRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'addPlaylistItemRequestModel' when calling PlaylistsApi->AddItemToPlaylist");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = addPlaylistItemRequestModel;

            localVarRequestOptions.Operation = "PlaylistsApi.AddItemToPlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlaylistExpandedModel>("/api/playlists/{id}/item", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddItemToPlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add an Item to a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="addPlaylistItemRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistExpandedModel</returns>
        public async System.Threading.Tasks.Task<PlaylistExpandedModel> AddItemToPlaylistAsync(string id, AddPlaylistItemRequestModel addPlaylistItemRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> localVarResponse = await AddItemToPlaylistWithHttpInfoAsync(id, addPlaylistItemRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add an Item to a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="addPlaylistItemRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistExpandedModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel>> AddItemToPlaylistWithHttpInfoAsync(string id, AddPlaylistItemRequestModel addPlaylistItemRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling PlaylistsApi->AddItemToPlaylist");
            }

            // verify the required parameter 'addPlaylistItemRequestModel' is set
            if (addPlaylistItemRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'addPlaylistItemRequestModel' when calling PlaylistsApi->AddItemToPlaylist");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = addPlaylistItemRequestModel;

            localVarRequestOptions.Operation = "PlaylistsApi.AddItemToPlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PlaylistExpandedModel>("/api/playlists/{id}/item", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddItemToPlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Add Items to a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchAddItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistExpandedModel</returns>
        public PlaylistExpandedModel BatchAddItemsToPlaylist(string id, BatchAddItemsRequestModel batchAddItemsRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> localVarResponse = BatchAddItemsToPlaylistWithHttpInfo(id, batchAddItemsRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Add Items to a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchAddItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistExpandedModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> BatchAddItemsToPlaylistWithHttpInfo(string id, BatchAddItemsRequestModel batchAddItemsRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling PlaylistsApi->BatchAddItemsToPlaylist");
            }

            // verify the required parameter 'batchAddItemsRequestModel' is set
            if (batchAddItemsRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'batchAddItemsRequestModel' when calling PlaylistsApi->BatchAddItemsToPlaylist");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = batchAddItemsRequestModel;

            localVarRequestOptions.Operation = "PlaylistsApi.BatchAddItemsToPlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlaylistExpandedModel>("/api/playlists/{id}/batch/add", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchAddItemsToPlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Add Items to a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchAddItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistExpandedModel</returns>
        public async System.Threading.Tasks.Task<PlaylistExpandedModel> BatchAddItemsToPlaylistAsync(string id, BatchAddItemsRequestModel batchAddItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> localVarResponse = await BatchAddItemsToPlaylistWithHttpInfoAsync(id, batchAddItemsRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Add Items to a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchAddItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistExpandedModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel>> BatchAddItemsToPlaylistWithHttpInfoAsync(string id, BatchAddItemsRequestModel batchAddItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling PlaylistsApi->BatchAddItemsToPlaylist");
            }

            // verify the required parameter 'batchAddItemsRequestModel' is set
            if (batchAddItemsRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'batchAddItemsRequestModel' when calling PlaylistsApi->BatchAddItemsToPlaylist");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = batchAddItemsRequestModel;

            localVarRequestOptions.Operation = "PlaylistsApi.BatchAddItemsToPlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PlaylistExpandedModel>("/api/playlists/{id}/batch/add", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchAddItemsToPlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Remove Items From a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchRemoveItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistExpandedModel</returns>
        public PlaylistExpandedModel BatchRemoveItemsFromPlaylist(string id, BatchRemoveItemsRequestModel batchRemoveItemsRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> localVarResponse = BatchRemoveItemsFromPlaylistWithHttpInfo(id, batchRemoveItemsRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Remove Items From a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchRemoveItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistExpandedModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> BatchRemoveItemsFromPlaylistWithHttpInfo(string id, BatchRemoveItemsRequestModel batchRemoveItemsRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling PlaylistsApi->BatchRemoveItemsFromPlaylist");
            }

            // verify the required parameter 'batchRemoveItemsRequestModel' is set
            if (batchRemoveItemsRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'batchRemoveItemsRequestModel' when calling PlaylistsApi->BatchRemoveItemsFromPlaylist");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = batchRemoveItemsRequestModel;

            localVarRequestOptions.Operation = "PlaylistsApi.BatchRemoveItemsFromPlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlaylistExpandedModel>("/api/playlists/{id}/batch/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchRemoveItemsFromPlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Batch Remove Items From a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchRemoveItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistExpandedModel</returns>
        public async System.Threading.Tasks.Task<PlaylistExpandedModel> BatchRemoveItemsFromPlaylistAsync(string id, BatchRemoveItemsRequestModel batchRemoveItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> localVarResponse = await BatchRemoveItemsFromPlaylistWithHttpInfoAsync(id, batchRemoveItemsRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Batch Remove Items From a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="batchRemoveItemsRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistExpandedModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel>> BatchRemoveItemsFromPlaylistWithHttpInfoAsync(string id, BatchRemoveItemsRequestModel batchRemoveItemsRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling PlaylistsApi->BatchRemoveItemsFromPlaylist");
            }

            // verify the required parameter 'batchRemoveItemsRequestModel' is set
            if (batchRemoveItemsRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'batchRemoveItemsRequestModel' when calling PlaylistsApi->BatchRemoveItemsFromPlaylist");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = batchRemoveItemsRequestModel;

            localVarRequestOptions.Operation = "PlaylistsApi.BatchRemoveItemsFromPlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PlaylistExpandedModel>("/api/playlists/{id}/batch/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchRemoveItemsFromPlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistExpandedModel</returns>
        public PlaylistExpandedModel CreatePlaylist(CreatePlaylistRequestModel createPlaylistRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> localVarResponse = CreatePlaylistWithHttpInfo(createPlaylistRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistExpandedModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> CreatePlaylistWithHttpInfo(CreatePlaylistRequestModel createPlaylistRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'createPlaylistRequestModel' is set
            if (createPlaylistRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'createPlaylistRequestModel' when calling PlaylistsApi->CreatePlaylist");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPlaylistRequestModel;

            localVarRequestOptions.Operation = "PlaylistsApi.CreatePlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlaylistExpandedModel>("/api/playlists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistExpandedModel</returns>
        public async System.Threading.Tasks.Task<PlaylistExpandedModel> CreatePlaylistAsync(CreatePlaylistRequestModel createPlaylistRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> localVarResponse = await CreatePlaylistWithHttpInfoAsync(createPlaylistRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistExpandedModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel>> CreatePlaylistWithHttpInfoAsync(CreatePlaylistRequestModel createPlaylistRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createPlaylistRequestModel' is set
            if (createPlaylistRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'createPlaylistRequestModel' when calling PlaylistsApi->CreatePlaylist");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPlaylistRequestModel;

            localVarRequestOptions.Operation = "PlaylistsApi.CreatePlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PlaylistExpandedModel>("/api/playlists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePlaylist(string id, int operationIndex = 0)
        {
            DeletePlaylistWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> DeletePlaylistWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling PlaylistsApi->DeletePlaylist");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PlaylistsApi.DeletePlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/playlists/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePlaylistAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeletePlaylistWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> DeletePlaylistWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling PlaylistsApi->DeletePlaylist");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PlaylistsApi.DeletePlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/playlists/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All User Playlists 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllPlaylistsResponseModel</returns>
        public GetAllPlaylistsResponseModel GetAllUserPlaylists(int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetAllPlaylistsResponseModel> localVarResponse = GetAllUserPlaylistsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All User Playlists 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllPlaylistsResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetAllPlaylistsResponseModel> GetAllUserPlaylistsWithHttpInfo(int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PlaylistsApi.GetAllUserPlaylists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllPlaylistsResponseModel>("/api/playlists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUserPlaylists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All User Playlists 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllPlaylistsResponseModel</returns>
        public async System.Threading.Tasks.Task<GetAllPlaylistsResponseModel> GetAllUserPlaylistsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetAllPlaylistsResponseModel> localVarResponse = await GetAllUserPlaylistsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All User Playlists 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllPlaylistsResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetAllPlaylistsResponseModel>> GetAllUserPlaylistsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PlaylistsApi.GetAllUserPlaylists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllPlaylistsResponseModel>("/api/playlists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllUserPlaylists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistExpandedModel</returns>
        public PlaylistExpandedModel GetPlaylist(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> localVarResponse = GetPlaylistWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistExpandedModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> GetPlaylistWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling PlaylistsApi->GetPlaylist");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PlaylistsApi.GetPlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PlaylistExpandedModel>("/api/playlists/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistExpandedModel</returns>
        public async System.Threading.Tasks.Task<PlaylistExpandedModel> GetPlaylistAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> localVarResponse = await GetPlaylistWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistExpandedModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel>> GetPlaylistWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling PlaylistsApi->GetPlaylist");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PlaylistsApi.GetPlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PlaylistExpandedModel>("/api/playlists/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an Item From a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="libraryItemId">The ID of the library item the playlist item to remove is for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistExpandedModel</returns>
        public PlaylistExpandedModel RemoveItemFromPlaylist(string id, string libraryItemId, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> localVarResponse = RemoveItemFromPlaylistWithHttpInfo(id, libraryItemId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an Item From a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="libraryItemId">The ID of the library item the playlist item to remove is for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistExpandedModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> RemoveItemFromPlaylistWithHttpInfo(string id, string libraryItemId, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling PlaylistsApi->RemoveItemFromPlaylist");
            }

            // verify the required parameter 'libraryItemId' is set
            if (libraryItemId == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'libraryItemId' when calling PlaylistsApi->RemoveItemFromPlaylist");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("libraryItemId", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(libraryItemId)); // path parameter

            localVarRequestOptions.Operation = "PlaylistsApi.RemoveItemFromPlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<PlaylistExpandedModel>("/api/playlists/{id}/item/{libraryItemId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveItemFromPlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an Item From a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="libraryItemId">The ID of the library item the playlist item to remove is for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistExpandedModel</returns>
        public async System.Threading.Tasks.Task<PlaylistExpandedModel> RemoveItemFromPlaylistAsync(string id, string libraryItemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> localVarResponse = await RemoveItemFromPlaylistWithHttpInfoAsync(id, libraryItemId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an Item From a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="libraryItemId">The ID of the library item the playlist item to remove is for.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistExpandedModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel>> RemoveItemFromPlaylistWithHttpInfoAsync(string id, string libraryItemId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling PlaylistsApi->RemoveItemFromPlaylist");
            }

            // verify the required parameter 'libraryItemId' is set
            if (libraryItemId == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'libraryItemId' when calling PlaylistsApi->RemoveItemFromPlaylist");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("libraryItemId", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(libraryItemId)); // path parameter

            localVarRequestOptions.Operation = "PlaylistsApi.RemoveItemFromPlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<PlaylistExpandedModel>("/api/playlists/{id}/item/{libraryItemId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveItemFromPlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="updatePlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlaylistExpandedModel</returns>
        public PlaylistExpandedModel UpdatePlaylist(string id, UpdatePlaylistRequestModel updatePlaylistRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> localVarResponse = UpdatePlaylistWithHttpInfo(id, updatePlaylistRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="updatePlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlaylistExpandedModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> UpdatePlaylistWithHttpInfo(string id, UpdatePlaylistRequestModel updatePlaylistRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling PlaylistsApi->UpdatePlaylist");
            }

            // verify the required parameter 'updatePlaylistRequestModel' is set
            if (updatePlaylistRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updatePlaylistRequestModel' when calling PlaylistsApi->UpdatePlaylist");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updatePlaylistRequestModel;

            localVarRequestOptions.Operation = "PlaylistsApi.UpdatePlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<PlaylistExpandedModel>("/api/playlists/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="updatePlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlaylistExpandedModel</returns>
        public async System.Threading.Tasks.Task<PlaylistExpandedModel> UpdatePlaylistAsync(string id, UpdatePlaylistRequestModel updatePlaylistRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel> localVarResponse = await UpdatePlaylistWithHttpInfoAsync(id, updatePlaylistRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Playlist 
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the playlist.</param>
        /// <param name="updatePlaylistRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlaylistExpandedModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<PlaylistExpandedModel>> UpdatePlaylistWithHttpInfoAsync(string id, UpdatePlaylistRequestModel updatePlaylistRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling PlaylistsApi->UpdatePlaylist");
            }

            // verify the required parameter 'updatePlaylistRequestModel' is set
            if (updatePlaylistRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updatePlaylistRequestModel' when calling PlaylistsApi->UpdatePlaylist");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updatePlaylistRequestModel;

            localVarRequestOptions.Operation = "PlaylistsApi.UpdatePlaylist";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PlaylistExpandedModel>("/api/playlists/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlaylist", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
