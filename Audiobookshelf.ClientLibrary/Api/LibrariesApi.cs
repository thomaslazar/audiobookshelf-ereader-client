/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Audiobookshelf.ClientLibrary.Client;
using Audiobookshelf.ClientLibrary.Model;

namespace Audiobookshelf.ClientLibrary.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILibrariesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Library
        /// </summary>
        /// <remarks>
        /// Creates a library with the specified options.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LibraryResponseModel</returns>
        LibraryResponseModel CreateLibrary(CreateLibraryRequestModel createLibraryRequestModel, int operationIndex = 0);

        /// <summary>
        /// Create a Library
        /// </summary>
        /// <remarks>
        /// Creates a library with the specified options.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LibraryResponseModel</returns>
        ApiResponse<LibraryResponseModel> CreateLibraryWithHttpInfo(CreateLibraryRequestModel createLibraryRequestModel, int operationIndex = 0);
        /// <summary>
        /// Delete a Library
        /// </summary>
        /// <remarks>
        /// Deletes a library and its items.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LibraryResponseModel</returns>
        LibraryResponseModel DeleteLibrary(string id, int operationIndex = 0);

        /// <summary>
        /// Delete a Library
        /// </summary>
        /// <remarks>
        /// Deletes a library and its items.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LibraryResponseModel</returns>
        ApiResponse<LibraryResponseModel> DeleteLibraryWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get All Libraries
        /// </summary>
        /// <remarks>
        /// Retrieves all libraries accessible to the user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllLibrariesResponseModel</returns>
        GetAllLibrariesResponseModel GetAllLibraries(int operationIndex = 0);

        /// <summary>
        /// Get All Libraries
        /// </summary>
        /// <remarks>
        /// Retrieves all libraries accessible to the user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllLibrariesResponseModel</returns>
        ApiResponse<GetAllLibrariesResponseModel> GetAllLibrariesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get a Library
        /// </summary>
        /// <remarks>
        /// Retrieves a library by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="include">Options: filterdata (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryResponseModel</returns>
        GetLibraryResponseModel GetLibrary(string id, string? include = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get a Library
        /// </summary>
        /// <remarks>
        /// Retrieves a library by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="include">Options: filterdata (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryResponseModel</returns>
        ApiResponse<GetLibraryResponseModel> GetLibraryWithHttpInfo(string id, string? include = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get a Library&#39;s Authors
        /// </summary>
        /// <remarks>
        /// Returns authors in the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryAuthorsResponseModel</returns>
        GetLibraryAuthorsResponseModel GetLibraryAuthors(string id, int operationIndex = 0);

        /// <summary>
        /// Get a Library&#39;s Authors
        /// </summary>
        /// <remarks>
        /// Returns authors in the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryAuthorsResponseModel</returns>
        ApiResponse<GetLibraryAuthorsResponseModel> GetLibraryAuthorsWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get a Library&#39;s Collections
        /// </summary>
        /// <remarks>
        /// Returns the collections in a library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryCollectionsResponseModel</returns>
        GetLibraryCollectionsResponseModel GetLibraryCollections(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), string? include = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get a Library&#39;s Collections
        /// </summary>
        /// <remarks>
        /// Returns the collections in a library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryCollectionsResponseModel</returns>
        ApiResponse<GetLibraryCollectionsResponseModel> GetLibraryCollectionsWithHttpInfo(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), string? include = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get a Library&#39;s Podcast Episode Downloads
        /// </summary>
        /// <remarks>
        /// Retrieves the current and queued podcast episode downloads.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEpisodeDownloadsResponseModel</returns>
        GetEpisodeDownloadsResponseModel GetLibraryEpisodeDownloads(string id, int operationIndex = 0);

        /// <summary>
        /// Get a Library&#39;s Podcast Episode Downloads
        /// </summary>
        /// <remarks>
        /// Retrieves the current and queued podcast episode downloads.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEpisodeDownloadsResponseModel</returns>
        ApiResponse<GetEpisodeDownloadsResponseModel> GetLibraryEpisodeDownloadsWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get a Library&#39;s Filter Data
        /// </summary>
        /// <remarks>
        /// Returns filter data for use in building filter lists.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LibraryFilterDataModel</returns>
        LibraryFilterDataModel GetLibraryFilterData(string id, int operationIndex = 0);

        /// <summary>
        /// Get a Library&#39;s Filter Data
        /// </summary>
        /// <remarks>
        /// Returns filter data for use in building filter lists.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LibraryFilterDataModel</returns>
        ApiResponse<LibraryFilterDataModel> GetLibraryFilterDataWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Get a Library&#39;s Items
        /// </summary>
        /// <remarks>
        /// Returns library items, optionally filtered or sorted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="collapseseries"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryItemsResponseModel</returns>
        GetLibraryItemsResponseModel GetLibraryItems(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), int? collapseseries = default(int?), string? include = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get a Library&#39;s Items
        /// </summary>
        /// <remarks>
        /// Returns library items, optionally filtered or sorted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="collapseseries"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryItemsResponseModel</returns>
        ApiResponse<GetLibraryItemsResponseModel> GetLibraryItemsWithHttpInfo(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), int? collapseseries = default(int?), string? include = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get a Library&#39;s Personalized View
        /// </summary>
        /// <remarks>
        /// Returns a library&#39;s personalized view for home page display.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limit the number of items in each shelf. Default is 10. (optional)</param>
        /// <param name="include">A comma separated list of what to include with the library items. The only current option is rssfeed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ShelfModel&gt;</returns>
        List<ShelfModel> GetLibraryPersonalized(string id, int? limit = default(int?), string? include = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get a Library&#39;s Personalized View
        /// </summary>
        /// <remarks>
        /// Returns a library&#39;s personalized view for home page display.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limit the number of items in each shelf. Default is 10. (optional)</param>
        /// <param name="include">A comma separated list of what to include with the library items. The only current option is rssfeed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ShelfModel&gt;</returns>
        ApiResponse<List<ShelfModel>> GetLibraryPersonalizedWithHttpInfo(string id, int? limit = default(int?), string? include = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get a Library&#39;s User Playlists
        /// </summary>
        /// <remarks>
        /// Returns the playlists for the authenticated user within this library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryPlaylistsResponseModel</returns>
        GetLibraryPlaylistsResponseModel GetLibraryPlaylists(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a Library&#39;s User Playlists
        /// </summary>
        /// <remarks>
        /// Returns the playlists for the authenticated user within this library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryPlaylistsResponseModel</returns>
        ApiResponse<GetLibraryPlaylistsResponseModel> GetLibraryPlaylistsWithHttpInfo(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a Library&#39;s Recent Episodes
        /// </summary>
        /// <remarks>
        /// Returns the newest unfinished podcast episodes in the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryRecentEpisodesResponseModel</returns>
        GetLibraryRecentEpisodesResponseModel GetLibraryRecentEpisodes(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get a Library&#39;s Recent Episodes
        /// </summary>
        /// <remarks>
        /// Returns the newest unfinished podcast episodes in the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryRecentEpisodesResponseModel</returns>
        ApiResponse<GetLibraryRecentEpisodesResponseModel> GetLibraryRecentEpisodesWithHttpInfo(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// Get a Library&#39;s Series
        /// </summary>
        /// <remarks>
        /// Returns the series in a library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibrarySeriesResponseModel</returns>
        GetLibrarySeriesResponseModel GetLibrarySeries(string id, int limit, int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), string? include = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get a Library&#39;s Series
        /// </summary>
        /// <remarks>
        /// Returns the series in a library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibrarySeriesResponseModel</returns>
        ApiResponse<GetLibrarySeriesResponseModel> GetLibrarySeriesWithHttpInfo(string id, int limit, int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), string? include = default(string?), int operationIndex = 0);
        /// <summary>
        /// Get a Library&#39;s Stats
        /// </summary>
        /// <remarks>
        /// Returns statistics about the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryStatsResponseModel</returns>
        GetLibraryStatsResponseModel GetLibraryStats(string id, int operationIndex = 0);

        /// <summary>
        /// Get a Library&#39;s Stats
        /// </summary>
        /// <remarks>
        /// Returns statistics about the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryStatsResponseModel</returns>
        ApiResponse<GetLibraryStatsResponseModel> GetLibraryStatsWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Match All of a Library&#39;s Items
        /// </summary>
        /// <remarks>
        /// Performs a quick match of all items in the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object MatchAllLibraryItems(string id, int operationIndex = 0);

        /// <summary>
        /// Match All of a Library&#39;s Items
        /// </summary>
        /// <remarks>
        /// Performs a quick match of all items in the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MatchAllLibraryItemsWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Remove a Library&#39;s Items With Issues
        /// </summary>
        /// <remarks>
        /// Removes all items in a library that have issues.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RemoveLibraryIssues(string id, int operationIndex = 0);

        /// <summary>
        /// Remove a Library&#39;s Items With Issues
        /// </summary>
        /// <remarks>
        /// Removes all items in a library that have issues.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemoveLibraryIssuesWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Reorder Library List
        /// </summary>
        /// <remarks>
        /// Changes the displayOrder of the specified libraries.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reorderLibrariesRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReorderLibrariesResponseModel</returns>
        ReorderLibrariesResponseModel ReorderLibraries(List<ReorderLibrariesRequestInnerModel> reorderLibrariesRequestInnerModel, int operationIndex = 0);

        /// <summary>
        /// Reorder Library List
        /// </summary>
        /// <remarks>
        /// Changes the displayOrder of the specified libraries.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reorderLibrariesRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReorderLibrariesResponseModel</returns>
        ApiResponse<ReorderLibrariesResponseModel> ReorderLibrariesWithHttpInfo(List<ReorderLibrariesRequestInnerModel> reorderLibrariesRequestInnerModel, int operationIndex = 0);
        /// <summary>
        /// Scan a Library&#39;s Folders
        /// </summary>
        /// <remarks>
        /// Starts a scan of the library&#39;s folders.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object ScanLibraryFolders(string id, int? force = default(int?), int operationIndex = 0);

        /// <summary>
        /// Scan a Library&#39;s Folders
        /// </summary>
        /// <remarks>
        /// Starts a scan of the library&#39;s folders.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ScanLibraryFoldersWithHttpInfo(string id, int? force = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search a Library
        /// </summary>
        /// <remarks>
        /// Searches the library for the given query.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="q"></param>
        /// <param name="limit">Default: 12 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchLibraryResponseModel</returns>
        SearchLibraryResponseModel SearchLibrary(string id, string q, int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search a Library
        /// </summary>
        /// <remarks>
        /// Searches the library for the given query.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="q"></param>
        /// <param name="limit">Default: 12 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchLibraryResponseModel</returns>
        ApiResponse<SearchLibraryResponseModel> SearchLibraryWithHttpInfo(string id, string q, int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update a Library
        /// </summary>
        /// <remarks>
        /// Updates a library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LibraryResponseModel</returns>
        LibraryResponseModel UpdateLibrary(string id, UpdateLibraryRequestModel updateLibraryRequestModel, int operationIndex = 0);

        /// <summary>
        /// Update a Library
        /// </summary>
        /// <remarks>
        /// Updates a library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LibraryResponseModel</returns>
        ApiResponse<LibraryResponseModel> UpdateLibraryWithHttpInfo(string id, UpdateLibraryRequestModel updateLibraryRequestModel, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILibrariesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Library
        /// </summary>
        /// <remarks>
        /// Creates a library with the specified options.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LibraryResponseModel</returns>
        System.Threading.Tasks.Task<LibraryResponseModel> CreateLibraryAsync(CreateLibraryRequestModel createLibraryRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Library
        /// </summary>
        /// <remarks>
        /// Creates a library with the specified options.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LibraryResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryResponseModel>> CreateLibraryWithHttpInfoAsync(CreateLibraryRequestModel createLibraryRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Library
        /// </summary>
        /// <remarks>
        /// Deletes a library and its items.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LibraryResponseModel</returns>
        System.Threading.Tasks.Task<LibraryResponseModel> DeleteLibraryAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Library
        /// </summary>
        /// <remarks>
        /// Deletes a library and its items.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LibraryResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryResponseModel>> DeleteLibraryWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get All Libraries
        /// </summary>
        /// <remarks>
        /// Retrieves all libraries accessible to the user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllLibrariesResponseModel</returns>
        System.Threading.Tasks.Task<GetAllLibrariesResponseModel> GetAllLibrariesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get All Libraries
        /// </summary>
        /// <remarks>
        /// Retrieves all libraries accessible to the user.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllLibrariesResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllLibrariesResponseModel>> GetAllLibrariesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Library
        /// </summary>
        /// <remarks>
        /// Retrieves a library by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="include">Options: filterdata (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryResponseModel</returns>
        System.Threading.Tasks.Task<GetLibraryResponseModel> GetLibraryAsync(string id, string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Library
        /// </summary>
        /// <remarks>
        /// Retrieves a library by ID.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="include">Options: filterdata (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLibraryResponseModel>> GetLibraryWithHttpInfoAsync(string id, string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Library&#39;s Authors
        /// </summary>
        /// <remarks>
        /// Returns authors in the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryAuthorsResponseModel</returns>
        System.Threading.Tasks.Task<GetLibraryAuthorsResponseModel> GetLibraryAuthorsAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Library&#39;s Authors
        /// </summary>
        /// <remarks>
        /// Returns authors in the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryAuthorsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLibraryAuthorsResponseModel>> GetLibraryAuthorsWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Library&#39;s Collections
        /// </summary>
        /// <remarks>
        /// Returns the collections in a library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryCollectionsResponseModel</returns>
        System.Threading.Tasks.Task<GetLibraryCollectionsResponseModel> GetLibraryCollectionsAsync(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Library&#39;s Collections
        /// </summary>
        /// <remarks>
        /// Returns the collections in a library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryCollectionsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLibraryCollectionsResponseModel>> GetLibraryCollectionsWithHttpInfoAsync(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Library&#39;s Podcast Episode Downloads
        /// </summary>
        /// <remarks>
        /// Retrieves the current and queued podcast episode downloads.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEpisodeDownloadsResponseModel</returns>
        System.Threading.Tasks.Task<GetEpisodeDownloadsResponseModel> GetLibraryEpisodeDownloadsAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Library&#39;s Podcast Episode Downloads
        /// </summary>
        /// <remarks>
        /// Retrieves the current and queued podcast episode downloads.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEpisodeDownloadsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEpisodeDownloadsResponseModel>> GetLibraryEpisodeDownloadsWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Library&#39;s Filter Data
        /// </summary>
        /// <remarks>
        /// Returns filter data for use in building filter lists.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LibraryFilterDataModel</returns>
        System.Threading.Tasks.Task<LibraryFilterDataModel> GetLibraryFilterDataAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Library&#39;s Filter Data
        /// </summary>
        /// <remarks>
        /// Returns filter data for use in building filter lists.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LibraryFilterDataModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryFilterDataModel>> GetLibraryFilterDataWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Library&#39;s Items
        /// </summary>
        /// <remarks>
        /// Returns library items, optionally filtered or sorted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="collapseseries"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryItemsResponseModel</returns>
        System.Threading.Tasks.Task<GetLibraryItemsResponseModel> GetLibraryItemsAsync(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), int? collapseseries = default(int?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Library&#39;s Items
        /// </summary>
        /// <remarks>
        /// Returns library items, optionally filtered or sorted.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="collapseseries"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryItemsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLibraryItemsResponseModel>> GetLibraryItemsWithHttpInfoAsync(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), int? collapseseries = default(int?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Library&#39;s Personalized View
        /// </summary>
        /// <remarks>
        /// Returns a library&#39;s personalized view for home page display.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limit the number of items in each shelf. Default is 10. (optional)</param>
        /// <param name="include">A comma separated list of what to include with the library items. The only current option is rssfeed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ShelfModel&gt;</returns>
        System.Threading.Tasks.Task<List<ShelfModel>> GetLibraryPersonalizedAsync(string id, int? limit = default(int?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Library&#39;s Personalized View
        /// </summary>
        /// <remarks>
        /// Returns a library&#39;s personalized view for home page display.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limit the number of items in each shelf. Default is 10. (optional)</param>
        /// <param name="include">A comma separated list of what to include with the library items. The only current option is rssfeed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ShelfModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ShelfModel>>> GetLibraryPersonalizedWithHttpInfoAsync(string id, int? limit = default(int?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Library&#39;s User Playlists
        /// </summary>
        /// <remarks>
        /// Returns the playlists for the authenticated user within this library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryPlaylistsResponseModel</returns>
        System.Threading.Tasks.Task<GetLibraryPlaylistsResponseModel> GetLibraryPlaylistsAsync(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Library&#39;s User Playlists
        /// </summary>
        /// <remarks>
        /// Returns the playlists for the authenticated user within this library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryPlaylistsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLibraryPlaylistsResponseModel>> GetLibraryPlaylistsWithHttpInfoAsync(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Library&#39;s Recent Episodes
        /// </summary>
        /// <remarks>
        /// Returns the newest unfinished podcast episodes in the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryRecentEpisodesResponseModel</returns>
        System.Threading.Tasks.Task<GetLibraryRecentEpisodesResponseModel> GetLibraryRecentEpisodesAsync(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Library&#39;s Recent Episodes
        /// </summary>
        /// <remarks>
        /// Returns the newest unfinished podcast episodes in the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryRecentEpisodesResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLibraryRecentEpisodesResponseModel>> GetLibraryRecentEpisodesWithHttpInfoAsync(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Library&#39;s Series
        /// </summary>
        /// <remarks>
        /// Returns the series in a library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibrarySeriesResponseModel</returns>
        System.Threading.Tasks.Task<GetLibrarySeriesResponseModel> GetLibrarySeriesAsync(string id, int limit, int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Library&#39;s Series
        /// </summary>
        /// <remarks>
        /// Returns the series in a library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibrarySeriesResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLibrarySeriesResponseModel>> GetLibrarySeriesWithHttpInfoAsync(string id, int limit, int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Library&#39;s Stats
        /// </summary>
        /// <remarks>
        /// Returns statistics about the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryStatsResponseModel</returns>
        System.Threading.Tasks.Task<GetLibraryStatsResponseModel> GetLibraryStatsAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Library&#39;s Stats
        /// </summary>
        /// <remarks>
        /// Returns statistics about the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryStatsResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLibraryStatsResponseModel>> GetLibraryStatsWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Match All of a Library&#39;s Items
        /// </summary>
        /// <remarks>
        /// Performs a quick match of all items in the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MatchAllLibraryItemsAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Match All of a Library&#39;s Items
        /// </summary>
        /// <remarks>
        /// Performs a quick match of all items in the library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MatchAllLibraryItemsWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove a Library&#39;s Items With Issues
        /// </summary>
        /// <remarks>
        /// Removes all items in a library that have issues.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemoveLibraryIssuesAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove a Library&#39;s Items With Issues
        /// </summary>
        /// <remarks>
        /// Removes all items in a library that have issues.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveLibraryIssuesWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reorder Library List
        /// </summary>
        /// <remarks>
        /// Changes the displayOrder of the specified libraries.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reorderLibrariesRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReorderLibrariesResponseModel</returns>
        System.Threading.Tasks.Task<ReorderLibrariesResponseModel> ReorderLibrariesAsync(List<ReorderLibrariesRequestInnerModel> reorderLibrariesRequestInnerModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reorder Library List
        /// </summary>
        /// <remarks>
        /// Changes the displayOrder of the specified libraries.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reorderLibrariesRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReorderLibrariesResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReorderLibrariesResponseModel>> ReorderLibrariesWithHttpInfoAsync(List<ReorderLibrariesRequestInnerModel> reorderLibrariesRequestInnerModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Scan a Library&#39;s Folders
        /// </summary>
        /// <remarks>
        /// Starts a scan of the library&#39;s folders.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ScanLibraryFoldersAsync(string id, int? force = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Scan a Library&#39;s Folders
        /// </summary>
        /// <remarks>
        /// Starts a scan of the library&#39;s folders.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ScanLibraryFoldersWithHttpInfoAsync(string id, int? force = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search a Library
        /// </summary>
        /// <remarks>
        /// Searches the library for the given query.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="q"></param>
        /// <param name="limit">Default: 12 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchLibraryResponseModel</returns>
        System.Threading.Tasks.Task<SearchLibraryResponseModel> SearchLibraryAsync(string id, string q, int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search a Library
        /// </summary>
        /// <remarks>
        /// Searches the library for the given query.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="q"></param>
        /// <param name="limit">Default: 12 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchLibraryResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchLibraryResponseModel>> SearchLibraryWithHttpInfoAsync(string id, string q, int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Library
        /// </summary>
        /// <remarks>
        /// Updates a library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LibraryResponseModel</returns>
        System.Threading.Tasks.Task<LibraryResponseModel> UpdateLibraryAsync(string id, UpdateLibraryRequestModel updateLibraryRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Library
        /// </summary>
        /// <remarks>
        /// Updates a library.
        /// </remarks>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LibraryResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LibraryResponseModel>> UpdateLibraryWithHttpInfoAsync(string id, UpdateLibraryRequestModel updateLibraryRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILibrariesApi : ILibrariesApiSync, ILibrariesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LibrariesApi : ILibrariesApi
    {
        private Audiobookshelf.ClientLibrary.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LibrariesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LibrariesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibrariesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LibrariesApi(string basePath)
        {
            this.Configuration = Audiobookshelf.ClientLibrary.Client.Configuration.MergeConfigurations(
                Audiobookshelf.ClientLibrary.Client.GlobalConfiguration.Instance,
                new Audiobookshelf.ClientLibrary.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibrariesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LibrariesApi(Audiobookshelf.ClientLibrary.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Audiobookshelf.ClientLibrary.Client.Configuration.MergeConfigurations(
                Audiobookshelf.ClientLibrary.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Audiobookshelf.ClientLibrary.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LibrariesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LibrariesApi(Audiobookshelf.ClientLibrary.Client.ISynchronousClient client, Audiobookshelf.ClientLibrary.Client.IAsynchronousClient asyncClient, Audiobookshelf.ClientLibrary.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Audiobookshelf.ClientLibrary.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Audiobookshelf.ClientLibrary.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Audiobookshelf.ClientLibrary.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Library Creates a library with the specified options.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LibraryResponseModel</returns>
        public LibraryResponseModel CreateLibrary(CreateLibraryRequestModel createLibraryRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryResponseModel> localVarResponse = CreateLibraryWithHttpInfo(createLibraryRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Library Creates a library with the specified options.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LibraryResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryResponseModel> CreateLibraryWithHttpInfo(CreateLibraryRequestModel createLibraryRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'createLibraryRequestModel' is set
            if (createLibraryRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'createLibraryRequestModel' when calling LibrariesApi->CreateLibrary");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createLibraryRequestModel;

            localVarRequestOptions.Operation = "LibrariesApi.CreateLibrary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LibraryResponseModel>("/api/libraries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLibrary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Library Creates a library with the specified options.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LibraryResponseModel</returns>
        public async System.Threading.Tasks.Task<LibraryResponseModel> CreateLibraryAsync(CreateLibraryRequestModel createLibraryRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryResponseModel> localVarResponse = await CreateLibraryWithHttpInfoAsync(createLibraryRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Library Creates a library with the specified options.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LibraryResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryResponseModel>> CreateLibraryWithHttpInfoAsync(CreateLibraryRequestModel createLibraryRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createLibraryRequestModel' is set
            if (createLibraryRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'createLibraryRequestModel' when calling LibrariesApi->CreateLibrary");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createLibraryRequestModel;

            localVarRequestOptions.Operation = "LibrariesApi.CreateLibrary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LibraryResponseModel>("/api/libraries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLibrary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Library Deletes a library and its items.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LibraryResponseModel</returns>
        public LibraryResponseModel DeleteLibrary(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryResponseModel> localVarResponse = DeleteLibraryWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Library Deletes a library and its items.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LibraryResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryResponseModel> DeleteLibraryWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->DeleteLibrary");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibrariesApi.DeleteLibrary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<LibraryResponseModel>("/api/libraries/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLibrary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Library Deletes a library and its items.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LibraryResponseModel</returns>
        public async System.Threading.Tasks.Task<LibraryResponseModel> DeleteLibraryAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryResponseModel> localVarResponse = await DeleteLibraryWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a Library Deletes a library and its items.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LibraryResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryResponseModel>> DeleteLibraryWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->DeleteLibrary");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibrariesApi.DeleteLibrary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<LibraryResponseModel>("/api/libraries/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLibrary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Libraries Retrieves all libraries accessible to the user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllLibrariesResponseModel</returns>
        public GetAllLibrariesResponseModel GetAllLibraries(int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetAllLibrariesResponseModel> localVarResponse = GetAllLibrariesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Libraries Retrieves all libraries accessible to the user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllLibrariesResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetAllLibrariesResponseModel> GetAllLibrariesWithHttpInfo(int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LibrariesApi.GetAllLibraries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllLibrariesResponseModel>("/api/libraries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllLibraries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get All Libraries Retrieves all libraries accessible to the user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllLibrariesResponseModel</returns>
        public async System.Threading.Tasks.Task<GetAllLibrariesResponseModel> GetAllLibrariesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetAllLibrariesResponseModel> localVarResponse = await GetAllLibrariesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Libraries Retrieves all libraries accessible to the user.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllLibrariesResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetAllLibrariesResponseModel>> GetAllLibrariesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "LibrariesApi.GetAllLibraries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllLibrariesResponseModel>("/api/libraries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllLibraries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library Retrieves a library by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="include">Options: filterdata (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryResponseModel</returns>
        public GetLibraryResponseModel GetLibrary(string id, string? include = default(string?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryResponseModel> localVarResponse = GetLibraryWithHttpInfo(id, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library Retrieves a library by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="include">Options: filterdata (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryResponseModel> GetLibraryWithHttpInfo(string id, string? include = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibrary");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "LibrariesApi.GetLibrary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetLibraryResponseModel>("/api/libraries/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibrary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library Retrieves a library by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="include">Options: filterdata (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryResponseModel</returns>
        public async System.Threading.Tasks.Task<GetLibraryResponseModel> GetLibraryAsync(string id, string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryResponseModel> localVarResponse = await GetLibraryWithHttpInfoAsync(id, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library Retrieves a library by ID.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="include">Options: filterdata (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryResponseModel>> GetLibraryWithHttpInfoAsync(string id, string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibrary");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "LibrariesApi.GetLibrary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetLibraryResponseModel>("/api/libraries/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibrary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Authors Returns authors in the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryAuthorsResponseModel</returns>
        public GetLibraryAuthorsResponseModel GetLibraryAuthors(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryAuthorsResponseModel> localVarResponse = GetLibraryAuthorsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Authors Returns authors in the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryAuthorsResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryAuthorsResponseModel> GetLibraryAuthorsWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryAuthors");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryAuthors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetLibraryAuthorsResponseModel>("/api/libraries/{id}/authors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryAuthors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Authors Returns authors in the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryAuthorsResponseModel</returns>
        public async System.Threading.Tasks.Task<GetLibraryAuthorsResponseModel> GetLibraryAuthorsAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryAuthorsResponseModel> localVarResponse = await GetLibraryAuthorsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Authors Returns authors in the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryAuthorsResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryAuthorsResponseModel>> GetLibraryAuthorsWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryAuthors");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryAuthors";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetLibraryAuthorsResponseModel>("/api/libraries/{id}/authors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryAuthors", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Collections Returns the collections in a library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryCollectionsResponseModel</returns>
        public GetLibraryCollectionsResponseModel GetLibraryCollections(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), string? include = default(string?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryCollectionsResponseModel> localVarResponse = GetLibraryCollectionsWithHttpInfo(id, limit, page, sort, desc, filter, minified, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Collections Returns the collections in a library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryCollectionsResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryCollectionsResponseModel> GetLibraryCollectionsWithHttpInfo(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), string? include = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryCollections");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (desc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "desc", desc));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (minified != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "minified", minified));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryCollections";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetLibraryCollectionsResponseModel>("/api/libraries/{id}/collections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Collections Returns the collections in a library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryCollectionsResponseModel</returns>
        public async System.Threading.Tasks.Task<GetLibraryCollectionsResponseModel> GetLibraryCollectionsAsync(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryCollectionsResponseModel> localVarResponse = await GetLibraryCollectionsWithHttpInfoAsync(id, limit, page, sort, desc, filter, minified, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Collections Returns the collections in a library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryCollectionsResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryCollectionsResponseModel>> GetLibraryCollectionsWithHttpInfoAsync(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryCollections");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (desc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "desc", desc));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (minified != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "minified", minified));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryCollections";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetLibraryCollectionsResponseModel>("/api/libraries/{id}/collections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Podcast Episode Downloads Retrieves the current and queued podcast episode downloads.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEpisodeDownloadsResponseModel</returns>
        public GetEpisodeDownloadsResponseModel GetLibraryEpisodeDownloads(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetEpisodeDownloadsResponseModel> localVarResponse = GetLibraryEpisodeDownloadsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Podcast Episode Downloads Retrieves the current and queued podcast episode downloads.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEpisodeDownloadsResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetEpisodeDownloadsResponseModel> GetLibraryEpisodeDownloadsWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryEpisodeDownloads");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryEpisodeDownloads";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEpisodeDownloadsResponseModel>("/api/libraries/{id}/episode-downloads", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryEpisodeDownloads", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Podcast Episode Downloads Retrieves the current and queued podcast episode downloads.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEpisodeDownloadsResponseModel</returns>
        public async System.Threading.Tasks.Task<GetEpisodeDownloadsResponseModel> GetLibraryEpisodeDownloadsAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetEpisodeDownloadsResponseModel> localVarResponse = await GetLibraryEpisodeDownloadsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Podcast Episode Downloads Retrieves the current and queued podcast episode downloads.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEpisodeDownloadsResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetEpisodeDownloadsResponseModel>> GetLibraryEpisodeDownloadsWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryEpisodeDownloads");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryEpisodeDownloads";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEpisodeDownloadsResponseModel>("/api/libraries/{id}/episode-downloads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryEpisodeDownloads", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Filter Data Returns filter data for use in building filter lists.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LibraryFilterDataModel</returns>
        public LibraryFilterDataModel GetLibraryFilterData(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryFilterDataModel> localVarResponse = GetLibraryFilterDataWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Filter Data Returns filter data for use in building filter lists.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LibraryFilterDataModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryFilterDataModel> GetLibraryFilterDataWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryFilterData");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryFilterData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LibraryFilterDataModel>("/api/libraries/{id}/filterdata", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryFilterData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Filter Data Returns filter data for use in building filter lists.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LibraryFilterDataModel</returns>
        public async System.Threading.Tasks.Task<LibraryFilterDataModel> GetLibraryFilterDataAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryFilterDataModel> localVarResponse = await GetLibraryFilterDataWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Filter Data Returns filter data for use in building filter lists.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LibraryFilterDataModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryFilterDataModel>> GetLibraryFilterDataWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryFilterData");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryFilterData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LibraryFilterDataModel>("/api/libraries/{id}/filterdata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryFilterData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Items Returns library items, optionally filtered or sorted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="collapseseries"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryItemsResponseModel</returns>
        public GetLibraryItemsResponseModel GetLibraryItems(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), int? collapseseries = default(int?), string? include = default(string?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryItemsResponseModel> localVarResponse = GetLibraryItemsWithHttpInfo(id, limit, page, sort, desc, filter, minified, collapseseries, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Items Returns library items, optionally filtered or sorted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="collapseseries"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryItemsResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryItemsResponseModel> GetLibraryItemsWithHttpInfo(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), int? collapseseries = default(int?), string? include = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryItems");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (desc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "desc", desc));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (minified != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "minified", minified));
            }
            if (collapseseries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "collapseseries", collapseseries));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetLibraryItemsResponseModel>("/api/libraries/{id}/items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Items Returns library items, optionally filtered or sorted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="collapseseries"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryItemsResponseModel</returns>
        public async System.Threading.Tasks.Task<GetLibraryItemsResponseModel> GetLibraryItemsAsync(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), int? collapseseries = default(int?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryItemsResponseModel> localVarResponse = await GetLibraryItemsWithHttpInfoAsync(id, limit, page, sort, desc, filter, minified, collapseseries, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Items Returns library items, optionally filtered or sorted.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="minified"> (optional)</param>
        /// <param name="collapseseries"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryItemsResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryItemsResponseModel>> GetLibraryItemsWithHttpInfoAsync(string id, int? limit = default(int?), int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), int? minified = default(int?), int? collapseseries = default(int?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryItems");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (desc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "desc", desc));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (minified != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "minified", minified));
            }
            if (collapseseries != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "collapseseries", collapseseries));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetLibraryItemsResponseModel>("/api/libraries/{id}/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Personalized View Returns a library&#39;s personalized view for home page display.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limit the number of items in each shelf. Default is 10. (optional)</param>
        /// <param name="include">A comma separated list of what to include with the library items. The only current option is rssfeed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ShelfModel&gt;</returns>
        public List<ShelfModel> GetLibraryPersonalized(string id, int? limit = default(int?), string? include = default(string?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<List<ShelfModel>> localVarResponse = GetLibraryPersonalizedWithHttpInfo(id, limit, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Personalized View Returns a library&#39;s personalized view for home page display.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limit the number of items in each shelf. Default is 10. (optional)</param>
        /// <param name="include">A comma separated list of what to include with the library items. The only current option is rssfeed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ShelfModel&gt;</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<List<ShelfModel>> GetLibraryPersonalizedWithHttpInfo(string id, int? limit = default(int?), string? include = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryPersonalized");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryPersonalized";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ShelfModel>>("/api/libraries/{id}/personalized", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryPersonalized", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Personalized View Returns a library&#39;s personalized view for home page display.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limit the number of items in each shelf. Default is 10. (optional)</param>
        /// <param name="include">A comma separated list of what to include with the library items. The only current option is rssfeed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ShelfModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ShelfModel>> GetLibraryPersonalizedAsync(string id, int? limit = default(int?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<List<ShelfModel>> localVarResponse = await GetLibraryPersonalizedWithHttpInfoAsync(id, limit, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Personalized View Returns a library&#39;s personalized view for home page display.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit">Limit the number of items in each shelf. Default is 10. (optional)</param>
        /// <param name="include">A comma separated list of what to include with the library items. The only current option is rssfeed. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ShelfModel&gt;)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<List<ShelfModel>>> GetLibraryPersonalizedWithHttpInfoAsync(string id, int? limit = default(int?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryPersonalized");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryPersonalized";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ShelfModel>>("/api/libraries/{id}/personalized", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryPersonalized", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s User Playlists Returns the playlists for the authenticated user within this library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryPlaylistsResponseModel</returns>
        public GetLibraryPlaylistsResponseModel GetLibraryPlaylists(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryPlaylistsResponseModel> localVarResponse = GetLibraryPlaylistsWithHttpInfo(id, limit, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s User Playlists Returns the playlists for the authenticated user within this library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryPlaylistsResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryPlaylistsResponseModel> GetLibraryPlaylistsWithHttpInfo(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryPlaylists");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryPlaylists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetLibraryPlaylistsResponseModel>("/api/libraries/{id}/playlists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryPlaylists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s User Playlists Returns the playlists for the authenticated user within this library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryPlaylistsResponseModel</returns>
        public async System.Threading.Tasks.Task<GetLibraryPlaylistsResponseModel> GetLibraryPlaylistsAsync(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryPlaylistsResponseModel> localVarResponse = await GetLibraryPlaylistsWithHttpInfoAsync(id, limit, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s User Playlists Returns the playlists for the authenticated user within this library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryPlaylistsResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryPlaylistsResponseModel>> GetLibraryPlaylistsWithHttpInfoAsync(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryPlaylists");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryPlaylists";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetLibraryPlaylistsResponseModel>("/api/libraries/{id}/playlists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryPlaylists", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Recent Episodes Returns the newest unfinished podcast episodes in the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryRecentEpisodesResponseModel</returns>
        public GetLibraryRecentEpisodesResponseModel GetLibraryRecentEpisodes(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryRecentEpisodesResponseModel> localVarResponse = GetLibraryRecentEpisodesWithHttpInfo(id, limit, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Recent Episodes Returns the newest unfinished podcast episodes in the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryRecentEpisodesResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryRecentEpisodesResponseModel> GetLibraryRecentEpisodesWithHttpInfo(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryRecentEpisodes");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryRecentEpisodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetLibraryRecentEpisodesResponseModel>("/api/libraries/{id}/recent-episodes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryRecentEpisodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Recent Episodes Returns the newest unfinished podcast episodes in the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryRecentEpisodesResponseModel</returns>
        public async System.Threading.Tasks.Task<GetLibraryRecentEpisodesResponseModel> GetLibraryRecentEpisodesAsync(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryRecentEpisodesResponseModel> localVarResponse = await GetLibraryRecentEpisodesWithHttpInfoAsync(id, limit, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Recent Episodes Returns the newest unfinished podcast episodes in the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryRecentEpisodesResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryRecentEpisodesResponseModel>> GetLibraryRecentEpisodesWithHttpInfoAsync(string id, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryRecentEpisodes");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryRecentEpisodes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetLibraryRecentEpisodesResponseModel>("/api/libraries/{id}/recent-episodes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryRecentEpisodes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Series Returns the series in a library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibrarySeriesResponseModel</returns>
        public GetLibrarySeriesResponseModel GetLibrarySeries(string id, int limit, int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), string? include = default(string?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibrarySeriesResponseModel> localVarResponse = GetLibrarySeriesWithHttpInfo(id, limit, page, sort, desc, filter, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Series Returns the series in a library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibrarySeriesResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibrarySeriesResponseModel> GetLibrarySeriesWithHttpInfo(string id, int limit, int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), string? include = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibrarySeries");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (desc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "desc", desc));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "LibrariesApi.GetLibrarySeries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetLibrarySeriesResponseModel>("/api/libraries/{id}/series", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibrarySeries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Series Returns the series in a library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibrarySeriesResponseModel</returns>
        public async System.Threading.Tasks.Task<GetLibrarySeriesResponseModel> GetLibrarySeriesAsync(string id, int limit, int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibrarySeriesResponseModel> localVarResponse = await GetLibrarySeriesWithHttpInfoAsync(id, limit, page, sort, desc, filter, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Series Returns the series in a library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="limit"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="desc"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="include"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibrarySeriesResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibrarySeriesResponseModel>> GetLibrarySeriesWithHttpInfoAsync(string id, int limit, int? page = default(int?), string? sort = default(string?), int? desc = default(int?), string? filter = default(string?), string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibrarySeries");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (desc != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "desc", desc));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "LibrariesApi.GetLibrarySeries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetLibrarySeriesResponseModel>("/api/libraries/{id}/series", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibrarySeries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Stats Returns statistics about the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLibraryStatsResponseModel</returns>
        public GetLibraryStatsResponseModel GetLibraryStats(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryStatsResponseModel> localVarResponse = GetLibraryStatsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Stats Returns statistics about the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLibraryStatsResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryStatsResponseModel> GetLibraryStatsWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryStats");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetLibraryStatsResponseModel>("/api/libraries/{id}/stats", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Library&#39;s Stats Returns statistics about the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLibraryStatsResponseModel</returns>
        public async System.Threading.Tasks.Task<GetLibraryStatsResponseModel> GetLibraryStatsAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryStatsResponseModel> localVarResponse = await GetLibraryStatsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Library&#39;s Stats Returns statistics about the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLibraryStatsResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<GetLibraryStatsResponseModel>> GetLibraryStatsWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->GetLibraryStats");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibrariesApi.GetLibraryStats";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetLibraryStatsResponseModel>("/api/libraries/{id}/stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLibraryStats", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Match All of a Library&#39;s Items Performs a quick match of all items in the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object MatchAllLibraryItems(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> localVarResponse = MatchAllLibraryItemsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Match All of a Library&#39;s Items Performs a quick match of all items in the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> MatchAllLibraryItemsWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->MatchAllLibraryItems");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibrariesApi.MatchAllLibraryItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/libraries/{id}/matchall", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchAllLibraryItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Match All of a Library&#39;s Items Performs a quick match of all items in the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MatchAllLibraryItemsAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> localVarResponse = await MatchAllLibraryItemsWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Match All of a Library&#39;s Items Performs a quick match of all items in the library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> MatchAllLibraryItemsWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->MatchAllLibraryItems");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibrariesApi.MatchAllLibraryItems";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/libraries/{id}/matchall", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MatchAllLibraryItems", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Library&#39;s Items With Issues Removes all items in a library that have issues.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RemoveLibraryIssues(string id, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> localVarResponse = RemoveLibraryIssuesWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a Library&#39;s Items With Issues Removes all items in a library that have issues.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> RemoveLibraryIssuesWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->RemoveLibraryIssues");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibrariesApi.RemoveLibraryIssues";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/libraries/{id}/issues", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLibraryIssues", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Library&#39;s Items With Issues Removes all items in a library that have issues.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemoveLibraryIssuesAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> localVarResponse = await RemoveLibraryIssuesWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a Library&#39;s Items With Issues Removes all items in a library that have issues.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> RemoveLibraryIssuesWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->RemoveLibraryIssues");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "LibrariesApi.RemoveLibraryIssues";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/libraries/{id}/issues", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveLibraryIssues", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reorder Library List Changes the displayOrder of the specified libraries.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reorderLibrariesRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReorderLibrariesResponseModel</returns>
        public ReorderLibrariesResponseModel ReorderLibraries(List<ReorderLibrariesRequestInnerModel> reorderLibrariesRequestInnerModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<ReorderLibrariesResponseModel> localVarResponse = ReorderLibrariesWithHttpInfo(reorderLibrariesRequestInnerModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reorder Library List Changes the displayOrder of the specified libraries.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reorderLibrariesRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReorderLibrariesResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<ReorderLibrariesResponseModel> ReorderLibrariesWithHttpInfo(List<ReorderLibrariesRequestInnerModel> reorderLibrariesRequestInnerModel, int operationIndex = 0)
        {
            // verify the required parameter 'reorderLibrariesRequestInnerModel' is set
            if (reorderLibrariesRequestInnerModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'reorderLibrariesRequestInnerModel' when calling LibrariesApi->ReorderLibraries");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reorderLibrariesRequestInnerModel;

            localVarRequestOptions.Operation = "LibrariesApi.ReorderLibraries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReorderLibrariesResponseModel>("/api/libraries/order", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReorderLibraries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reorder Library List Changes the displayOrder of the specified libraries.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reorderLibrariesRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReorderLibrariesResponseModel</returns>
        public async System.Threading.Tasks.Task<ReorderLibrariesResponseModel> ReorderLibrariesAsync(List<ReorderLibrariesRequestInnerModel> reorderLibrariesRequestInnerModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<ReorderLibrariesResponseModel> localVarResponse = await ReorderLibrariesWithHttpInfoAsync(reorderLibrariesRequestInnerModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reorder Library List Changes the displayOrder of the specified libraries.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reorderLibrariesRequestInnerModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReorderLibrariesResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<ReorderLibrariesResponseModel>> ReorderLibrariesWithHttpInfoAsync(List<ReorderLibrariesRequestInnerModel> reorderLibrariesRequestInnerModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'reorderLibrariesRequestInnerModel' is set
            if (reorderLibrariesRequestInnerModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'reorderLibrariesRequestInnerModel' when calling LibrariesApi->ReorderLibraries");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = reorderLibrariesRequestInnerModel;

            localVarRequestOptions.Operation = "LibrariesApi.ReorderLibraries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReorderLibrariesResponseModel>("/api/libraries/order", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReorderLibraries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan a Library&#39;s Folders Starts a scan of the library&#39;s folders.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object ScanLibraryFolders(string id, int? force = default(int?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> localVarResponse = ScanLibraryFoldersWithHttpInfo(id, force);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan a Library&#39;s Folders Starts a scan of the library&#39;s folders.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> ScanLibraryFoldersWithHttpInfo(string id, int? force = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->ScanLibraryFolders");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            localVarRequestOptions.Operation = "LibrariesApi.ScanLibraryFolders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/libraries/{id}/scan", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanLibraryFolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan a Library&#39;s Folders Starts a scan of the library&#39;s folders.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ScanLibraryFoldersAsync(string id, int? force = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<Object> localVarResponse = await ScanLibraryFoldersWithHttpInfoAsync(id, force, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan a Library&#39;s Folders Starts a scan of the library&#39;s folders.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="force"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<Object>> ScanLibraryFoldersWithHttpInfoAsync(string id, int? force = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->ScanLibraryFolders");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            localVarRequestOptions.Operation = "LibrariesApi.ScanLibraryFolders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/libraries/{id}/scan", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanLibraryFolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search a Library Searches the library for the given query.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="q"></param>
        /// <param name="limit">Default: 12 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchLibraryResponseModel</returns>
        public SearchLibraryResponseModel SearchLibrary(string id, string q, int? limit = default(int?), int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<SearchLibraryResponseModel> localVarResponse = SearchLibraryWithHttpInfo(id, q, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search a Library Searches the library for the given query.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="q"></param>
        /// <param name="limit">Default: 12 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchLibraryResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<SearchLibraryResponseModel> SearchLibraryWithHttpInfo(string id, string q, int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->SearchLibrary");
            }

            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'q' when calling LibrariesApi->SearchLibrary");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "LibrariesApi.SearchLibrary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchLibraryResponseModel>("/api/libraries/{id}/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchLibrary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search a Library Searches the library for the given query.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="q"></param>
        /// <param name="limit">Default: 12 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchLibraryResponseModel</returns>
        public async System.Threading.Tasks.Task<SearchLibraryResponseModel> SearchLibraryAsync(string id, string q, int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<SearchLibraryResponseModel> localVarResponse = await SearchLibraryWithHttpInfoAsync(id, q, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search a Library Searches the library for the given query.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="q"></param>
        /// <param name="limit">Default: 12 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchLibraryResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<SearchLibraryResponseModel>> SearchLibraryWithHttpInfoAsync(string id, string q, int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->SearchLibrary");
            }

            // verify the required parameter 'q' is set
            if (q == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'q' when calling LibrariesApi->SearchLibrary");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "q", q));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "LibrariesApi.SearchLibrary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchLibraryResponseModel>("/api/libraries/{id}/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchLibrary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Library Updates a library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LibraryResponseModel</returns>
        public LibraryResponseModel UpdateLibrary(string id, UpdateLibraryRequestModel updateLibraryRequestModel, int operationIndex = 0)
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryResponseModel> localVarResponse = UpdateLibraryWithHttpInfo(id, updateLibraryRequestModel);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Library Updates a library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LibraryResponseModel</returns>
        public Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryResponseModel> UpdateLibraryWithHttpInfo(string id, UpdateLibraryRequestModel updateLibraryRequestModel, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->UpdateLibrary");
            }

            // verify the required parameter 'updateLibraryRequestModel' is set
            if (updateLibraryRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateLibraryRequestModel' when calling LibrariesApi->UpdateLibrary");
            }

            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateLibraryRequestModel;

            localVarRequestOptions.Operation = "LibrariesApi.UpdateLibrary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<LibraryResponseModel>("/api/libraries/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLibrary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Library Updates a library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LibraryResponseModel</returns>
        public async System.Threading.Tasks.Task<LibraryResponseModel> UpdateLibraryAsync(string id, UpdateLibraryRequestModel updateLibraryRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryResponseModel> localVarResponse = await UpdateLibraryWithHttpInfoAsync(id, updateLibraryRequestModel, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Library Updates a library.
        /// </summary>
        /// <exception cref="Audiobookshelf.ClientLibrary.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="updateLibraryRequestModel"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LibraryResponseModel)</returns>
        public async System.Threading.Tasks.Task<Audiobookshelf.ClientLibrary.Client.ApiResponse<LibraryResponseModel>> UpdateLibraryWithHttpInfoAsync(string id, UpdateLibraryRequestModel updateLibraryRequestModel, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'id' when calling LibrariesApi->UpdateLibrary");
            }

            // verify the required parameter 'updateLibraryRequestModel' is set
            if (updateLibraryRequestModel == null)
            {
                throw new Audiobookshelf.ClientLibrary.Client.ApiException(400, "Missing required parameter 'updateLibraryRequestModel' when calling LibrariesApi->UpdateLibrary");
            }


            Audiobookshelf.ClientLibrary.Client.RequestOptions localVarRequestOptions = new Audiobookshelf.ClientLibrary.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Audiobookshelf.ClientLibrary.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Audiobookshelf.ClientLibrary.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateLibraryRequestModel;

            localVarRequestOptions.Operation = "LibrariesApi.UpdateLibrary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<LibraryResponseModel>("/api/libraries/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLibrary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
