/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// GetLibraryStatsResponseModel
    /// </summary>
    [DataContract(Name = "GetLibraryStatsResponse")]
    public partial class GetLibraryStatsResponseModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetLibraryStatsResponseModel" /> class.
        /// </summary>
        /// <param name="totalItems">totalItems.</param>
        /// <param name="totalAuthors">totalAuthors.</param>
        /// <param name="totalGenres">totalGenres.</param>
        /// <param name="totalDuration">totalDuration.</param>
        /// <param name="longestItems">longestItems.</param>
        /// <param name="numAudioTrack">numAudioTrack.</param>
        /// <param name="totalSize">totalSize.</param>
        /// <param name="largestItems">largestItems.</param>
        /// <param name="authorsWithCount">authorsWithCount.</param>
        /// <param name="genresWithCount">genresWithCount.</param>
        public GetLibraryStatsResponseModel(int totalItems = default(int), int totalAuthors = default(int), int totalGenres = default(int), decimal totalDuration = default(decimal), List<LibraryItemDurationStatsModel> longestItems = default(List<LibraryItemDurationStatsModel>), int numAudioTrack = default(int), int totalSize = default(int), List<LibraryItemSizeStatsModel> largestItems = default(List<LibraryItemSizeStatsModel>), List<AuthorStatsModel> authorsWithCount = default(List<AuthorStatsModel>), List<GenreStatsModel> genresWithCount = default(List<GenreStatsModel>))
        {
            this.TotalItems = totalItems;
            this.TotalAuthors = totalAuthors;
            this.TotalGenres = totalGenres;
            this.TotalDuration = totalDuration;
            this.LongestItems = longestItems;
            this.NumAudioTrack = numAudioTrack;
            this.TotalSize = totalSize;
            this.LargestItems = largestItems;
            this.AuthorsWithCount = authorsWithCount;
            this.GenresWithCount = genresWithCount;
        }

        /// <summary>
        /// Gets or Sets TotalItems
        /// </summary>
        [DataMember(Name = "totalItems", EmitDefaultValue = false)]
        public int TotalItems { get; set; }

        /// <summary>
        /// Gets or Sets TotalAuthors
        /// </summary>
        [DataMember(Name = "totalAuthors", EmitDefaultValue = false)]
        public int TotalAuthors { get; set; }

        /// <summary>
        /// Gets or Sets TotalGenres
        /// </summary>
        [DataMember(Name = "totalGenres", EmitDefaultValue = false)]
        public int TotalGenres { get; set; }

        /// <summary>
        /// Gets or Sets TotalDuration
        /// </summary>
        [DataMember(Name = "totalDuration", EmitDefaultValue = false)]
        public decimal TotalDuration { get; set; }

        /// <summary>
        /// Gets or Sets LongestItems
        /// </summary>
        [DataMember(Name = "longestItems", EmitDefaultValue = false)]
        public List<LibraryItemDurationStatsModel> LongestItems { get; set; }

        /// <summary>
        /// Gets or Sets NumAudioTrack
        /// </summary>
        [DataMember(Name = "numAudioTrack", EmitDefaultValue = false)]
        public int NumAudioTrack { get; set; }

        /// <summary>
        /// Gets or Sets TotalSize
        /// </summary>
        [DataMember(Name = "totalSize", EmitDefaultValue = false)]
        public int TotalSize { get; set; }

        /// <summary>
        /// Gets or Sets LargestItems
        /// </summary>
        [DataMember(Name = "largestItems", EmitDefaultValue = false)]
        public List<LibraryItemSizeStatsModel> LargestItems { get; set; }

        /// <summary>
        /// Gets or Sets AuthorsWithCount
        /// </summary>
        [DataMember(Name = "authorsWithCount", EmitDefaultValue = false)]
        public List<AuthorStatsModel> AuthorsWithCount { get; set; }

        /// <summary>
        /// Gets or Sets GenresWithCount
        /// </summary>
        [DataMember(Name = "genresWithCount", EmitDefaultValue = false)]
        public List<GenreStatsModel> GenresWithCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetLibraryStatsResponseModel {\n");
            sb.Append("  TotalItems: ").Append(TotalItems).Append("\n");
            sb.Append("  TotalAuthors: ").Append(TotalAuthors).Append("\n");
            sb.Append("  TotalGenres: ").Append(TotalGenres).Append("\n");
            sb.Append("  TotalDuration: ").Append(TotalDuration).Append("\n");
            sb.Append("  LongestItems: ").Append(LongestItems).Append("\n");
            sb.Append("  NumAudioTrack: ").Append(NumAudioTrack).Append("\n");
            sb.Append("  TotalSize: ").Append(TotalSize).Append("\n");
            sb.Append("  LargestItems: ").Append(LargestItems).Append("\n");
            sb.Append("  AuthorsWithCount: ").Append(AuthorsWithCount).Append("\n");
            sb.Append("  GenresWithCount: ").Append(GenresWithCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
