/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// A shelf representing a category of items in the personalized view.
    /// </summary>
    [DataContract(Name = "Shelf")]
    public partial class ShelfModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShelfModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShelfModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShelfModel" /> class.
        /// </summary>
        /// <param name="id">The ID of the shelf. (required).</param>
        /// <param name="label">The label of the shelf. (required).</param>
        /// <param name="labelStringKey">The i18n key for the label. (required).</param>
        /// <param name="type">The type of items this shelf holds. Can be book, series, authors, episode, or podcast. (required).</param>
        /// <param name="entities">The entities displayed on the shelf. (required).</param>
        /// <param name="category">The category of the shelf. (required).</param>
        public ShelfModel(string id = default(string), string label = default(string), string labelStringKey = default(string), string type = default(string), List<ShelfEntityModel> entities = default(List<ShelfEntityModel>), string category = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ShelfModel and cannot be null");
            }
            this.Id = id;
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new ArgumentNullException("label is a required property for ShelfModel and cannot be null");
            }
            this.Label = label;
            // to ensure "labelStringKey" is required (not null)
            if (labelStringKey == null)
            {
                throw new ArgumentNullException("labelStringKey is a required property for ShelfModel and cannot be null");
            }
            this.LabelStringKey = labelStringKey;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for ShelfModel and cannot be null");
            }
            this.Type = type;
            // to ensure "entities" is required (not null)
            if (entities == null)
            {
                throw new ArgumentNullException("entities is a required property for ShelfModel and cannot be null");
            }
            this.Entities = entities;
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new ArgumentNullException("category is a required property for ShelfModel and cannot be null");
            }
            this.Category = category;
        }

        /// <summary>
        /// The ID of the shelf.
        /// </summary>
        /// <value>The ID of the shelf.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The label of the shelf.
        /// </summary>
        /// <value>The label of the shelf.</value>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = true)]
        public string Label { get; set; }

        /// <summary>
        /// The i18n key for the label.
        /// </summary>
        /// <value>The i18n key for the label.</value>
        [DataMember(Name = "labelStringKey", IsRequired = true, EmitDefaultValue = true)]
        public string LabelStringKey { get; set; }

        /// <summary>
        /// The type of items this shelf holds. Can be book, series, authors, episode, or podcast.
        /// </summary>
        /// <value>The type of items this shelf holds. Can be book, series, authors, episode, or podcast.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The entities displayed on the shelf.
        /// </summary>
        /// <value>The entities displayed on the shelf.</value>
        [DataMember(Name = "entities", IsRequired = true, EmitDefaultValue = true)]
        public List<ShelfEntityModel> Entities { get; set; }

        /// <summary>
        /// The category of the shelf.
        /// </summary>
        /// <value>The category of the shelf.</value>
        [DataMember(Name = "category", IsRequired = true, EmitDefaultValue = true)]
        public string Category { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShelfModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  LabelStringKey: ").Append(LabelStringKey).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
