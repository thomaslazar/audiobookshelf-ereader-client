/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// A playlist with expanded items.
    /// </summary>
    [DataContract(Name = "PlaylistExpanded")]
    public partial class PlaylistExpandedModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlaylistExpandedModel" /> class.
        /// </summary>
        /// <param name="id">The ID of the playlist..</param>
        /// <param name="libraryId">The ID of the library the playlist belongs to..</param>
        /// <param name="userId">The ID of the user the playlist belongs to..</param>
        /// <param name="name">The playlist&#39;s name..</param>
        /// <param name="description">The playlist&#39;s description..</param>
        /// <param name="coverPath">The path of the playlist&#39;s cover..</param>
        /// <param name="items">The items in the playlist..</param>
        /// <param name="lastUpdate">The time (in ms since POSIX epoch) when the playlist was last updated..</param>
        /// <param name="createdAt">The time (in ms since POSIX epoch) when the playlist was created..</param>
        public PlaylistExpandedModel(string id = default(string), string libraryId = default(string), string userId = default(string), string name = default(string), string description = default(string), string coverPath = default(string), List<PlaylistItemExpandedModel> items = default(List<PlaylistItemExpandedModel>), long lastUpdate = default(long), long createdAt = default(long))
        {
            this.Id = id;
            this.LibraryId = libraryId;
            this.UserId = userId;
            this.Name = name;
            this.Description = description;
            this.CoverPath = coverPath;
            this.Items = items;
            this.LastUpdate = lastUpdate;
            this.CreatedAt = createdAt;
        }

        /// <summary>
        /// The ID of the playlist.
        /// </summary>
        /// <value>The ID of the playlist.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the library the playlist belongs to.
        /// </summary>
        /// <value>The ID of the library the playlist belongs to.</value>
        [DataMember(Name = "libraryId", EmitDefaultValue = false)]
        public string LibraryId { get; set; }

        /// <summary>
        /// The ID of the user the playlist belongs to.
        /// </summary>
        /// <value>The ID of the user the playlist belongs to.</value>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// The playlist&#39;s name.
        /// </summary>
        /// <value>The playlist&#39;s name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The playlist&#39;s description.
        /// </summary>
        /// <value>The playlist&#39;s description.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The path of the playlist&#39;s cover.
        /// </summary>
        /// <value>The path of the playlist&#39;s cover.</value>
        [DataMember(Name = "coverPath", EmitDefaultValue = true)]
        public string CoverPath { get; set; }

        /// <summary>
        /// The items in the playlist.
        /// </summary>
        /// <value>The items in the playlist.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<PlaylistItemExpandedModel> Items { get; set; }

        /// <summary>
        /// The time (in ms since POSIX epoch) when the playlist was last updated.
        /// </summary>
        /// <value>The time (in ms since POSIX epoch) when the playlist was last updated.</value>
        [DataMember(Name = "lastUpdate", EmitDefaultValue = false)]
        public long LastUpdate { get; set; }

        /// <summary>
        /// The time (in ms since POSIX epoch) when the playlist was created.
        /// </summary>
        /// <value>The time (in ms since POSIX epoch) when the playlist was created.</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlaylistExpandedModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LibraryId: ").Append(LibraryId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CoverPath: ").Append(CoverPath).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
