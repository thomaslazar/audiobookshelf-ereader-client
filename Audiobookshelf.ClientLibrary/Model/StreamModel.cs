/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// A stream.
    /// </summary>
    [DataContract(Name = "Stream")]
    public partial class StreamModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StreamModel" /> class.
        /// </summary>
        /// <param name="id">The ID of the stream. Same as playback session ID. UUIDv4.</param>
        /// <param name="userId">The ID of the user. UUIDv4.</param>
        /// <param name="libraryItem">libraryItem.</param>
        /// <param name="episode">episode.</param>
        /// <param name="segmentLength">The length (in seconds) of each segment..</param>
        /// <param name="playlistPath">The path on the server of the stream output..</param>
        /// <param name="clientPlaylistUri">The URI path for the client to access the stream..</param>
        /// <param name="startTime">The time (in seconds) where playback started..</param>
        /// <param name="segmentStartNumber">The segment where transcoding began..</param>
        /// <param name="isTranscodeComplete">Whether transcoding is complete..</param>
        public StreamModel(string id = default(string), string userId = default(string), LibraryItemExpandedModel libraryItem = default(LibraryItemExpandedModel), PodcastEpisodeExpandedModel episode = default(PodcastEpisodeExpandedModel), int segmentLength = default(int), string playlistPath = default(string), string clientPlaylistUri = default(string), decimal startTime = default(decimal), int segmentStartNumber = default(int), bool isTranscodeComplete = default(bool))
        {
            this.Id = id;
            this.UserId = userId;
            this.LibraryItem = libraryItem;
            this.Episode = episode;
            this.SegmentLength = segmentLength;
            this.PlaylistPath = playlistPath;
            this.ClientPlaylistUri = clientPlaylistUri;
            this.StartTime = startTime;
            this.SegmentStartNumber = segmentStartNumber;
            this.IsTranscodeComplete = isTranscodeComplete;
        }

        /// <summary>
        /// The ID of the stream. Same as playback session ID. UUIDv4
        /// </summary>
        /// <value>The ID of the stream. Same as playback session ID. UUIDv4</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the user. UUIDv4
        /// </summary>
        /// <value>The ID of the user. UUIDv4</value>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets LibraryItem
        /// </summary>
        [DataMember(Name = "libraryItem", EmitDefaultValue = false)]
        public LibraryItemExpandedModel LibraryItem { get; set; }

        /// <summary>
        /// Gets or Sets Episode
        /// </summary>
        [DataMember(Name = "episode", EmitDefaultValue = false)]
        public PodcastEpisodeExpandedModel Episode { get; set; }

        /// <summary>
        /// The length (in seconds) of each segment.
        /// </summary>
        /// <value>The length (in seconds) of each segment.</value>
        [DataMember(Name = "segmentLength", EmitDefaultValue = false)]
        public int SegmentLength { get; set; }

        /// <summary>
        /// The path on the server of the stream output.
        /// </summary>
        /// <value>The path on the server of the stream output.</value>
        [DataMember(Name = "playlistPath", EmitDefaultValue = false)]
        public string PlaylistPath { get; set; }

        /// <summary>
        /// The URI path for the client to access the stream.
        /// </summary>
        /// <value>The URI path for the client to access the stream.</value>
        [DataMember(Name = "clientPlaylistUri", EmitDefaultValue = false)]
        public string ClientPlaylistUri { get; set; }

        /// <summary>
        /// The time (in seconds) where playback started.
        /// </summary>
        /// <value>The time (in seconds) where playback started.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public decimal StartTime { get; set; }

        /// <summary>
        /// The segment where transcoding began.
        /// </summary>
        /// <value>The segment where transcoding began.</value>
        [DataMember(Name = "segmentStartNumber", EmitDefaultValue = false)]
        public int SegmentStartNumber { get; set; }

        /// <summary>
        /// Whether transcoding is complete.
        /// </summary>
        /// <value>Whether transcoding is complete.</value>
        [DataMember(Name = "isTranscodeComplete", EmitDefaultValue = true)]
        public bool IsTranscodeComplete { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StreamModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  LibraryItem: ").Append(LibraryItem).Append("\n");
            sb.Append("  Episode: ").Append(Episode).Append("\n");
            sb.Append("  SegmentLength: ").Append(SegmentLength).Append("\n");
            sb.Append("  PlaylistPath: ").Append(PlaylistPath).Append("\n");
            sb.Append("  ClientPlaylistUri: ").Append(ClientPlaylistUri).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  SegmentStartNumber: ").Append(SegmentStartNumber).Append("\n");
            sb.Append("  IsTranscodeComplete: ").Append(IsTranscodeComplete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
