/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// A backup.
    /// </summary>
    [DataContract(Name = "Backup")]
    public partial class BackupModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BackupModel" /> class.
        /// </summary>
        /// <param name="id">The ID of the backup. Will be the date/time created..</param>
        /// <param name="backupMetadataCovers">Whether the backup includes metadata covers..</param>
        /// <param name="backupDirPath">The backup directory path..</param>
        /// <param name="datePretty">A human-readable date..</param>
        /// <param name="fullPath">The full path of the backup..</param>
        /// <param name="path">The path of the backup relative to metadata directory..</param>
        /// <param name="filename">The filename of the backup..</param>
        /// <param name="fileSize">The size (in bytes) of the backup file..</param>
        /// <param name="createdAt">When the backup was created..</param>
        /// <param name="serverVersion">The server version at backup time..</param>
        public BackupModel(string id = default(string), bool backupMetadataCovers = default(bool), string backupDirPath = default(string), string datePretty = default(string), string fullPath = default(string), string path = default(string), string filename = default(string), int fileSize = default(int), long createdAt = default(long), string serverVersion = default(string))
        {
            this.Id = id;
            this.BackupMetadataCovers = backupMetadataCovers;
            this.BackupDirPath = backupDirPath;
            this.DatePretty = datePretty;
            this.FullPath = fullPath;
            this.Path = path;
            this.Filename = filename;
            this.FileSize = fileSize;
            this.CreatedAt = createdAt;
            this.ServerVersion = serverVersion;
        }

        /// <summary>
        /// The ID of the backup. Will be the date/time created.
        /// </summary>
        /// <value>The ID of the backup. Will be the date/time created.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the backup includes metadata covers.
        /// </summary>
        /// <value>Whether the backup includes metadata covers.</value>
        [DataMember(Name = "backupMetadataCovers", EmitDefaultValue = true)]
        public bool BackupMetadataCovers { get; set; }

        /// <summary>
        /// The backup directory path.
        /// </summary>
        /// <value>The backup directory path.</value>
        [DataMember(Name = "backupDirPath", EmitDefaultValue = false)]
        public string BackupDirPath { get; set; }

        /// <summary>
        /// A human-readable date.
        /// </summary>
        /// <value>A human-readable date.</value>
        [DataMember(Name = "datePretty", EmitDefaultValue = false)]
        public string DatePretty { get; set; }

        /// <summary>
        /// The full path of the backup.
        /// </summary>
        /// <value>The full path of the backup.</value>
        [DataMember(Name = "fullPath", EmitDefaultValue = false)]
        public string FullPath { get; set; }

        /// <summary>
        /// The path of the backup relative to metadata directory.
        /// </summary>
        /// <value>The path of the backup relative to metadata directory.</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// The filename of the backup.
        /// </summary>
        /// <value>The filename of the backup.</value>
        [DataMember(Name = "filename", EmitDefaultValue = false)]
        public string Filename { get; set; }

        /// <summary>
        /// The size (in bytes) of the backup file.
        /// </summary>
        /// <value>The size (in bytes) of the backup file.</value>
        [DataMember(Name = "fileSize", EmitDefaultValue = false)]
        public int FileSize { get; set; }

        /// <summary>
        /// When the backup was created.
        /// </summary>
        /// <value>When the backup was created.</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// The server version at backup time.
        /// </summary>
        /// <value>The server version at backup time.</value>
        [DataMember(Name = "serverVersion", EmitDefaultValue = false)]
        public string ServerVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BackupModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BackupMetadataCovers: ").Append(BackupMetadataCovers).Append("\n");
            sb.Append("  BackupDirPath: ").Append(BackupDirPath).Append("\n");
            sb.Append("  DatePretty: ").Append(DatePretty).Append("\n");
            sb.Append("  FullPath: ").Append(FullPath).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ServerVersion: ").Append(ServerVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
