/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// An RSS feed episode.
    /// </summary>
    [DataContract(Name = "RSSFeedEpisode")]
    public partial class RSSFeedEpisodeModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RSSFeedEpisodeModel" /> class.
        /// </summary>
        /// <param name="id">The ID of the RSS feed episode..</param>
        /// <param name="title">The title of the RSS feed episode..</param>
        /// <param name="description">An HTML encoded description of the RSS feed episode..</param>
        /// <param name="enclosure">enclosure.</param>
        /// <param name="pubDate">The RSS feed episode&#39;s publication date..</param>
        /// <param name="link">A URL to show to the RSS feed user..</param>
        /// <param name="author">The author of the RSS feed episode..</param>
        /// <param name="varExplicit">Whether the episode is explicit..</param>
        /// <param name="duration">The duration (in seconds)..</param>
        /// <param name="season">The season of the episode..</param>
        /// <param name="episode">The episode number..</param>
        /// <param name="episodeType">The type of the episode..</param>
        /// <param name="libraryItemId">The ID of the library item..</param>
        /// <param name="episodeId">The ID of the podcast episode if any..</param>
        /// <param name="trackIndex">The track index..</param>
        /// <param name="fullPath">The path on the server of the audio file..</param>
        public RSSFeedEpisodeModel(string id = default(string), string title = default(string), string description = default(string), RSSFeedEpisodeEnclosureModel enclosure = default(RSSFeedEpisodeEnclosureModel), string pubDate = default(string), string link = default(string), string author = default(string), bool varExplicit = default(bool), decimal duration = default(decimal), string season = default(string), string episode = default(string), string episodeType = default(string), string libraryItemId = default(string), string episodeId = default(string), int trackIndex = default(int), string fullPath = default(string))
        {
            this.Id = id;
            this.Title = title;
            this.Description = description;
            this.Enclosure = enclosure;
            this.PubDate = pubDate;
            this.Link = link;
            this.Author = author;
            this.Explicit = varExplicit;
            this.Duration = duration;
            this.Season = season;
            this.Episode = episode;
            this.EpisodeType = episodeType;
            this.LibraryItemId = libraryItemId;
            this.EpisodeId = episodeId;
            this.TrackIndex = trackIndex;
            this.FullPath = fullPath;
        }

        /// <summary>
        /// The ID of the RSS feed episode.
        /// </summary>
        /// <value>The ID of the RSS feed episode.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The title of the RSS feed episode.
        /// </summary>
        /// <value>The title of the RSS feed episode.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// An HTML encoded description of the RSS feed episode.
        /// </summary>
        /// <value>An HTML encoded description of the RSS feed episode.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Enclosure
        /// </summary>
        [DataMember(Name = "enclosure", EmitDefaultValue = false)]
        public RSSFeedEpisodeEnclosureModel Enclosure { get; set; }

        /// <summary>
        /// The RSS feed episode&#39;s publication date.
        /// </summary>
        /// <value>The RSS feed episode&#39;s publication date.</value>
        [DataMember(Name = "pubDate", EmitDefaultValue = false)]
        public string PubDate { get; set; }

        /// <summary>
        /// A URL to show to the RSS feed user.
        /// </summary>
        /// <value>A URL to show to the RSS feed user.</value>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public string Link { get; set; }

        /// <summary>
        /// The author of the RSS feed episode.
        /// </summary>
        /// <value>The author of the RSS feed episode.</value>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public string Author { get; set; }

        /// <summary>
        /// Whether the episode is explicit.
        /// </summary>
        /// <value>Whether the episode is explicit.</value>
        [DataMember(Name = "explicit", EmitDefaultValue = true)]
        public bool Explicit { get; set; }

        /// <summary>
        /// The duration (in seconds).
        /// </summary>
        /// <value>The duration (in seconds).</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public decimal Duration { get; set; }

        /// <summary>
        /// The season of the episode.
        /// </summary>
        /// <value>The season of the episode.</value>
        [DataMember(Name = "season", EmitDefaultValue = true)]
        public string Season { get; set; }

        /// <summary>
        /// The episode number.
        /// </summary>
        /// <value>The episode number.</value>
        [DataMember(Name = "episode", EmitDefaultValue = true)]
        public string Episode { get; set; }

        /// <summary>
        /// The type of the episode.
        /// </summary>
        /// <value>The type of the episode.</value>
        [DataMember(Name = "episodeType", EmitDefaultValue = true)]
        public string EpisodeType { get; set; }

        /// <summary>
        /// The ID of the library item.
        /// </summary>
        /// <value>The ID of the library item.</value>
        [DataMember(Name = "libraryItemId", EmitDefaultValue = false)]
        public string LibraryItemId { get; set; }

        /// <summary>
        /// The ID of the podcast episode if any.
        /// </summary>
        /// <value>The ID of the podcast episode if any.</value>
        [DataMember(Name = "episodeId", EmitDefaultValue = true)]
        public string EpisodeId { get; set; }

        /// <summary>
        /// The track index.
        /// </summary>
        /// <value>The track index.</value>
        [DataMember(Name = "trackIndex", EmitDefaultValue = false)]
        public int TrackIndex { get; set; }

        /// <summary>
        /// The path on the server of the audio file.
        /// </summary>
        /// <value>The path on the server of the audio file.</value>
        [DataMember(Name = "fullPath", EmitDefaultValue = false)]
        public string FullPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RSSFeedEpisodeModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Enclosure: ").Append(Enclosure).Append("\n");
            sb.Append("  PubDate: ").Append(PubDate).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Explicit: ").Append(Explicit).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  Episode: ").Append(Episode).Append("\n");
            sb.Append("  EpisodeType: ").Append(EpisodeType).Append("\n");
            sb.Append("  LibraryItemId: ").Append(LibraryItemId).Append("\n");
            sb.Append("  EpisodeId: ").Append(EpisodeId).Append("\n");
            sb.Append("  TrackIndex: ").Append(TrackIndex).Append("\n");
            sb.Append("  FullPath: ").Append(FullPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
