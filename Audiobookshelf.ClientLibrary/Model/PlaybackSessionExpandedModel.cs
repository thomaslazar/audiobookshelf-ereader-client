/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// Expanded Playback Session
    /// </summary>
    [DataContract(Name = "PlaybackSessionExpanded")]
    public partial class PlaybackSessionExpandedModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlaybackSessionExpandedModel" /> class.
        /// </summary>
        /// <param name="audioTracks">The audio tracks being played..</param>
        /// <param name="videoTrack">The video track if any..</param>
        /// <param name="libraryItem">libraryItem.</param>
        /// <param name="id">The ID of the playback session..</param>
        /// <param name="userId">The ID of the user..</param>
        /// <param name="libraryId">The ID of the library..</param>
        /// <param name="libraryItemId">The ID of the library item..</param>
        /// <param name="episodeId">The ID of the podcast episode if any..</param>
        /// <param name="mediaType">The media type (book or podcast)..</param>
        /// <param name="mediaMetadata">mediaMetadata.</param>
        /// <param name="chapters">Chapters if it&#39;s a book..</param>
        /// <param name="displayTitle">The title of the playing item..</param>
        /// <param name="displayAuthor">The author of the playing item..</param>
        /// <param name="coverPath">The cover path..</param>
        /// <param name="duration">Total duration in seconds..</param>
        /// <param name="playMethod">Play method (0&#x3D;Direct Play, 1&#x3D;Direct Stream, 2&#x3D;Transcode, 3&#x3D;Local).</param>
        /// <param name="mediaPlayer">The given media player..</param>
        /// <param name="deviceInfo">deviceInfo.</param>
        /// <param name="serverVersion">The server version..</param>
        /// <param name="date">The day (YYYY-MM-DD) playback started..</param>
        /// <param name="dayOfWeek">The day of the week playback started..</param>
        /// <param name="timeListening">How long user has been listening with this session..</param>
        /// <param name="startTime">The time (in sec) where playback started..</param>
        /// <param name="currentTime">The current time in the item..</param>
        /// <param name="startedAt">When the playback session started..</param>
        /// <param name="updatedAt">When last updated..</param>
        public PlaybackSessionExpandedModel(List<AudioTrackModel> audioTracks = default(List<AudioTrackModel>), Object videoTrack = default(Object), LibraryItemExpandedModel libraryItem = default(LibraryItemExpandedModel), string id = default(string), string userId = default(string), string libraryId = default(string), string libraryItemId = default(string), string episodeId = default(string), string mediaType = default(string), PlaybackSessionMediaMetadataModel mediaMetadata = default(PlaybackSessionMediaMetadataModel), List<BookChapterModel> chapters = default(List<BookChapterModel>), string displayTitle = default(string), string displayAuthor = default(string), string coverPath = default(string), decimal duration = default(decimal), int playMethod = default(int), string mediaPlayer = default(string), DeviceInfoModel deviceInfo = default(DeviceInfoModel), string serverVersion = default(string), string date = default(string), string dayOfWeek = default(string), decimal timeListening = default(decimal), decimal startTime = default(decimal), decimal currentTime = default(decimal), long startedAt = default(long), long updatedAt = default(long))
        {
            this.AudioTracks = audioTracks;
            this.VideoTrack = videoTrack;
            this.LibraryItem = libraryItem;
            this.Id = id;
            this.UserId = userId;
            this.LibraryId = libraryId;
            this.LibraryItemId = libraryItemId;
            this.EpisodeId = episodeId;
            this.MediaType = mediaType;
            this.MediaMetadata = mediaMetadata;
            this.Chapters = chapters;
            this.DisplayTitle = displayTitle;
            this.DisplayAuthor = displayAuthor;
            this.CoverPath = coverPath;
            this.Duration = duration;
            this.PlayMethod = playMethod;
            this.MediaPlayer = mediaPlayer;
            this.DeviceInfo = deviceInfo;
            this.ServerVersion = serverVersion;
            this.Date = date;
            this.DayOfWeek = dayOfWeek;
            this.TimeListening = timeListening;
            this.StartTime = startTime;
            this.CurrentTime = currentTime;
            this.StartedAt = startedAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// The audio tracks being played.
        /// </summary>
        /// <value>The audio tracks being played.</value>
        [DataMember(Name = "audioTracks", EmitDefaultValue = false)]
        public List<AudioTrackModel> AudioTracks { get; set; }

        /// <summary>
        /// The video track if any.
        /// </summary>
        /// <value>The video track if any.</value>
        [DataMember(Name = "videoTrack", EmitDefaultValue = true)]
        public Object VideoTrack { get; set; }

        /// <summary>
        /// Gets or Sets LibraryItem
        /// </summary>
        [DataMember(Name = "libraryItem", EmitDefaultValue = false)]
        public LibraryItemExpandedModel LibraryItem { get; set; }

        /// <summary>
        /// The ID of the playback session.
        /// </summary>
        /// <value>The ID of the playback session.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the user.
        /// </summary>
        /// <value>The ID of the user.</value>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// The ID of the library.
        /// </summary>
        /// <value>The ID of the library.</value>
        [DataMember(Name = "libraryId", EmitDefaultValue = false)]
        public string LibraryId { get; set; }

        /// <summary>
        /// The ID of the library item.
        /// </summary>
        /// <value>The ID of the library item.</value>
        [DataMember(Name = "libraryItemId", EmitDefaultValue = false)]
        public string LibraryItemId { get; set; }

        /// <summary>
        /// The ID of the podcast episode if any.
        /// </summary>
        /// <value>The ID of the podcast episode if any.</value>
        [DataMember(Name = "episodeId", EmitDefaultValue = true)]
        public string EpisodeId { get; set; }

        /// <summary>
        /// The media type (book or podcast).
        /// </summary>
        /// <value>The media type (book or podcast).</value>
        [DataMember(Name = "mediaType", EmitDefaultValue = false)]
        public string MediaType { get; set; }

        /// <summary>
        /// Gets or Sets MediaMetadata
        /// </summary>
        [DataMember(Name = "mediaMetadata", EmitDefaultValue = false)]
        public PlaybackSessionMediaMetadataModel MediaMetadata { get; set; }

        /// <summary>
        /// Chapters if it&#39;s a book.
        /// </summary>
        /// <value>Chapters if it&#39;s a book.</value>
        [DataMember(Name = "chapters", EmitDefaultValue = false)]
        public List<BookChapterModel> Chapters { get; set; }

        /// <summary>
        /// The title of the playing item.
        /// </summary>
        /// <value>The title of the playing item.</value>
        [DataMember(Name = "displayTitle", EmitDefaultValue = false)]
        public string DisplayTitle { get; set; }

        /// <summary>
        /// The author of the playing item.
        /// </summary>
        /// <value>The author of the playing item.</value>
        [DataMember(Name = "displayAuthor", EmitDefaultValue = false)]
        public string DisplayAuthor { get; set; }

        /// <summary>
        /// The cover path.
        /// </summary>
        /// <value>The cover path.</value>
        [DataMember(Name = "coverPath", EmitDefaultValue = false)]
        public string CoverPath { get; set; }

        /// <summary>
        /// Total duration in seconds.
        /// </summary>
        /// <value>Total duration in seconds.</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public decimal Duration { get; set; }

        /// <summary>
        /// Play method (0&#x3D;Direct Play, 1&#x3D;Direct Stream, 2&#x3D;Transcode, 3&#x3D;Local)
        /// </summary>
        /// <value>Play method (0&#x3D;Direct Play, 1&#x3D;Direct Stream, 2&#x3D;Transcode, 3&#x3D;Local)</value>
        [DataMember(Name = "playMethod", EmitDefaultValue = false)]
        public int PlayMethod { get; set; }

        /// <summary>
        /// The given media player.
        /// </summary>
        /// <value>The given media player.</value>
        [DataMember(Name = "mediaPlayer", EmitDefaultValue = false)]
        public string MediaPlayer { get; set; }

        /// <summary>
        /// Gets or Sets DeviceInfo
        /// </summary>
        [DataMember(Name = "deviceInfo", EmitDefaultValue = false)]
        public DeviceInfoModel DeviceInfo { get; set; }

        /// <summary>
        /// The server version.
        /// </summary>
        /// <value>The server version.</value>
        [DataMember(Name = "serverVersion", EmitDefaultValue = false)]
        public string ServerVersion { get; set; }

        /// <summary>
        /// The day (YYYY-MM-DD) playback started.
        /// </summary>
        /// <value>The day (YYYY-MM-DD) playback started.</value>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// The day of the week playback started.
        /// </summary>
        /// <value>The day of the week playback started.</value>
        [DataMember(Name = "dayOfWeek", EmitDefaultValue = false)]
        public string DayOfWeek { get; set; }

        /// <summary>
        /// How long user has been listening with this session.
        /// </summary>
        /// <value>How long user has been listening with this session.</value>
        [DataMember(Name = "timeListening", EmitDefaultValue = false)]
        public decimal TimeListening { get; set; }

        /// <summary>
        /// The time (in sec) where playback started.
        /// </summary>
        /// <value>The time (in sec) where playback started.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public decimal StartTime { get; set; }

        /// <summary>
        /// The current time in the item.
        /// </summary>
        /// <value>The current time in the item.</value>
        [DataMember(Name = "currentTime", EmitDefaultValue = false)]
        public decimal CurrentTime { get; set; }

        /// <summary>
        /// When the playback session started.
        /// </summary>
        /// <value>When the playback session started.</value>
        [DataMember(Name = "startedAt", EmitDefaultValue = false)]
        public long StartedAt { get; set; }

        /// <summary>
        /// When last updated.
        /// </summary>
        /// <value>When last updated.</value>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public long UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlaybackSessionExpandedModel {\n");
            sb.Append("  AudioTracks: ").Append(AudioTracks).Append("\n");
            sb.Append("  VideoTrack: ").Append(VideoTrack).Append("\n");
            sb.Append("  LibraryItem: ").Append(LibraryItem).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  LibraryId: ").Append(LibraryId).Append("\n");
            sb.Append("  LibraryItemId: ").Append(LibraryItemId).Append("\n");
            sb.Append("  EpisodeId: ").Append(EpisodeId).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  MediaMetadata: ").Append(MediaMetadata).Append("\n");
            sb.Append("  Chapters: ").Append(Chapters).Append("\n");
            sb.Append("  DisplayTitle: ").Append(DisplayTitle).Append("\n");
            sb.Append("  DisplayAuthor: ").Append(DisplayAuthor).Append("\n");
            sb.Append("  CoverPath: ").Append(CoverPath).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  PlayMethod: ").Append(PlayMethod).Append("\n");
            sb.Append("  MediaPlayer: ").Append(MediaPlayer).Append("\n");
            sb.Append("  DeviceInfo: ").Append(DeviceInfo).Append("\n");
            sb.Append("  ServerVersion: ").Append(ServerVersion).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
            sb.Append("  TimeListening: ").Append(TimeListening).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  CurrentTime: ").Append(CurrentTime).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
