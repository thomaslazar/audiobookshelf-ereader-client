/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// Podcast Feed Metadata
    /// </summary>
    [DataContract(Name = "PodcastFeedMetadata")]
    public partial class PodcastFeedMetadataModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PodcastFeedMetadataModel" /> class.
        /// </summary>
        /// <param name="image">A URL for the podcast&#39;s cover image..</param>
        /// <param name="categories">The podcast&#39;s categories..</param>
        /// <param name="feedUrl">A URL of an RSS feed for the podcast..</param>
        /// <param name="description">A HTML encoded description of the podcast..</param>
        /// <param name="descriptionPlain">A plain text description of the podcast..</param>
        /// <param name="title">The podcast&#39;s title..</param>
        /// <param name="language">The podcast&#39;s language..</param>
        /// <param name="varExplicit">Whether the podcast is explicit. Probably &#39;true&#39; or &#39;false&#39;..</param>
        /// <param name="author">The podcast&#39;s author..</param>
        /// <param name="pubDate">The podcast&#39;s publication date..</param>
        /// <param name="link">A URL the RSS feed provided for display to the user..</param>
        public PodcastFeedMetadataModel(string image = default(string), List<string> categories = default(List<string>), string feedUrl = default(string), string description = default(string), string descriptionPlain = default(string), string title = default(string), string language = default(string), string varExplicit = default(string), string author = default(string), string pubDate = default(string), string link = default(string))
        {
            this.Image = image;
            this.Categories = categories;
            this.FeedUrl = feedUrl;
            this.Description = description;
            this.DescriptionPlain = descriptionPlain;
            this.Title = title;
            this.Language = language;
            this.Explicit = varExplicit;
            this.Author = author;
            this.PubDate = pubDate;
            this.Link = link;
        }

        /// <summary>
        /// A URL for the podcast&#39;s cover image.
        /// </summary>
        /// <value>A URL for the podcast&#39;s cover image.</value>
        [DataMember(Name = "image", EmitDefaultValue = false)]
        public string Image { get; set; }

        /// <summary>
        /// The podcast&#39;s categories.
        /// </summary>
        /// <value>The podcast&#39;s categories.</value>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// A URL of an RSS feed for the podcast.
        /// </summary>
        /// <value>A URL of an RSS feed for the podcast.</value>
        [DataMember(Name = "feedUrl", EmitDefaultValue = false)]
        public string FeedUrl { get; set; }

        /// <summary>
        /// A HTML encoded description of the podcast.
        /// </summary>
        /// <value>A HTML encoded description of the podcast.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// A plain text description of the podcast.
        /// </summary>
        /// <value>A plain text description of the podcast.</value>
        [DataMember(Name = "descriptionPlain", EmitDefaultValue = false)]
        public string DescriptionPlain { get; set; }

        /// <summary>
        /// The podcast&#39;s title.
        /// </summary>
        /// <value>The podcast&#39;s title.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The podcast&#39;s language.
        /// </summary>
        /// <value>The podcast&#39;s language.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Whether the podcast is explicit. Probably &#39;true&#39; or &#39;false&#39;.
        /// </summary>
        /// <value>Whether the podcast is explicit. Probably &#39;true&#39; or &#39;false&#39;.</value>
        [DataMember(Name = "explicit", EmitDefaultValue = false)]
        public string Explicit { get; set; }

        /// <summary>
        /// The podcast&#39;s author.
        /// </summary>
        /// <value>The podcast&#39;s author.</value>
        [DataMember(Name = "author", EmitDefaultValue = false)]
        public string Author { get; set; }

        /// <summary>
        /// The podcast&#39;s publication date.
        /// </summary>
        /// <value>The podcast&#39;s publication date.</value>
        [DataMember(Name = "pubDate", EmitDefaultValue = false)]
        public string PubDate { get; set; }

        /// <summary>
        /// A URL the RSS feed provided for display to the user.
        /// </summary>
        /// <value>A URL the RSS feed provided for display to the user.</value>
        [DataMember(Name = "link", EmitDefaultValue = false)]
        public string Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PodcastFeedMetadataModel {\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  FeedUrl: ").Append(FeedUrl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DescriptionPlain: ").Append(DescriptionPlain).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Explicit: ").Append(Explicit).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  PubDate: ").Append(PubDate).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
