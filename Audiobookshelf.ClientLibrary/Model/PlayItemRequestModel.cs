/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// PlayItemRequestModel
    /// </summary>
    [DataContract(Name = "PlayItemRequest")]
    public partial class PlayItemRequestModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayItemRequestModel" /> class.
        /// </summary>
        /// <param name="deviceInfo">deviceInfo.</param>
        /// <param name="forceDirectPlay">forceDirectPlay (default to false).</param>
        /// <param name="forceTranscode">forceTranscode (default to false).</param>
        /// <param name="supportedMimeTypes">supportedMimeTypes.</param>
        /// <param name="mediaPlayer">mediaPlayer (default to &quot;unknown&quot;).</param>
        public PlayItemRequestModel(Object deviceInfo = default(Object), bool forceDirectPlay = false, bool forceTranscode = false, List<string> supportedMimeTypes = default(List<string>), string mediaPlayer = @"unknown")
        {
            this.DeviceInfo = deviceInfo;
            this.ForceDirectPlay = forceDirectPlay;
            this.ForceTranscode = forceTranscode;
            this.SupportedMimeTypes = supportedMimeTypes;
            // use default value if no "mediaPlayer" provided
            this.MediaPlayer = mediaPlayer ?? @"unknown";
        }

        /// <summary>
        /// Gets or Sets DeviceInfo
        /// </summary>
        [DataMember(Name = "deviceInfo", EmitDefaultValue = false)]
        public Object DeviceInfo { get; set; }

        /// <summary>
        /// Gets or Sets ForceDirectPlay
        /// </summary>
        [DataMember(Name = "forceDirectPlay", EmitDefaultValue = true)]
        public bool ForceDirectPlay { get; set; }

        /// <summary>
        /// Gets or Sets ForceTranscode
        /// </summary>
        [DataMember(Name = "forceTranscode", EmitDefaultValue = true)]
        public bool ForceTranscode { get; set; }

        /// <summary>
        /// Gets or Sets SupportedMimeTypes
        /// </summary>
        [DataMember(Name = "supportedMimeTypes", EmitDefaultValue = false)]
        public List<string> SupportedMimeTypes { get; set; }

        /// <summary>
        /// Gets or Sets MediaPlayer
        /// </summary>
        [DataMember(Name = "mediaPlayer", EmitDefaultValue = false)]
        public string MediaPlayer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayItemRequestModel {\n");
            sb.Append("  DeviceInfo: ").Append(DeviceInfo).Append("\n");
            sb.Append("  ForceDirectPlay: ").Append(ForceDirectPlay).Append("\n");
            sb.Append("  ForceTranscode: ").Append(ForceTranscode).Append("\n");
            sb.Append("  SupportedMimeTypes: ").Append(SupportedMimeTypes).Append("\n");
            sb.Append("  MediaPlayer: ").Append(MediaPlayer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
