/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// Minified Podcast.
    /// </summary>
    [DataContract(Name = "PodcastMinified")]
    public partial class PodcastMinifiedModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PodcastMinifiedModel" /> class.
        /// </summary>
        /// <param name="metadata">metadata.</param>
        /// <param name="coverPath">Cover path..</param>
        /// <param name="tags">Tags..</param>
        /// <param name="numEpisodes">Number of downloaded episodes..</param>
        /// <param name="autoDownloadEpisodes">Auto download episodes?.</param>
        /// <param name="autoDownloadSchedule">Cron for auto download..</param>
        /// <param name="lastEpisodeCheck">Last episode check time..</param>
        /// <param name="maxEpisodesToKeep">Max episodes to keep..</param>
        /// <param name="maxNewEpisodesToDownload">Max new episodes to download..</param>
        /// <param name="size">Total size in bytes..</param>
        public PodcastMinifiedModel(PodcastMetadataMinifiedModel metadata = default(PodcastMetadataMinifiedModel), string coverPath = default(string), List<string> tags = default(List<string>), int numEpisodes = default(int), bool autoDownloadEpisodes = default(bool), string autoDownloadSchedule = default(string), long lastEpisodeCheck = default(long), int maxEpisodesToKeep = default(int), int maxNewEpisodesToDownload = default(int), int size = default(int))
        {
            this.Metadata = metadata;
            this.CoverPath = coverPath;
            this.Tags = tags;
            this.NumEpisodes = numEpisodes;
            this.AutoDownloadEpisodes = autoDownloadEpisodes;
            this.AutoDownloadSchedule = autoDownloadSchedule;
            this.LastEpisodeCheck = lastEpisodeCheck;
            this.MaxEpisodesToKeep = maxEpisodesToKeep;
            this.MaxNewEpisodesToDownload = maxNewEpisodesToDownload;
            this.Size = size;
        }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public PodcastMetadataMinifiedModel Metadata { get; set; }

        /// <summary>
        /// Cover path.
        /// </summary>
        /// <value>Cover path.</value>
        [DataMember(Name = "coverPath", EmitDefaultValue = true)]
        public string CoverPath { get; set; }

        /// <summary>
        /// Tags.
        /// </summary>
        /// <value>Tags.</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Number of downloaded episodes.
        /// </summary>
        /// <value>Number of downloaded episodes.</value>
        [DataMember(Name = "numEpisodes", EmitDefaultValue = false)]
        public int NumEpisodes { get; set; }

        /// <summary>
        /// Auto download episodes?
        /// </summary>
        /// <value>Auto download episodes?</value>
        [DataMember(Name = "autoDownloadEpisodes", EmitDefaultValue = true)]
        public bool AutoDownloadEpisodes { get; set; }

        /// <summary>
        /// Cron for auto download.
        /// </summary>
        /// <value>Cron for auto download.</value>
        [DataMember(Name = "autoDownloadSchedule", EmitDefaultValue = true)]
        public string AutoDownloadSchedule { get; set; }

        /// <summary>
        /// Last episode check time.
        /// </summary>
        /// <value>Last episode check time.</value>
        [DataMember(Name = "lastEpisodeCheck", EmitDefaultValue = false)]
        public long LastEpisodeCheck { get; set; }

        /// <summary>
        /// Max episodes to keep.
        /// </summary>
        /// <value>Max episodes to keep.</value>
        [DataMember(Name = "maxEpisodesToKeep", EmitDefaultValue = false)]
        public int MaxEpisodesToKeep { get; set; }

        /// <summary>
        /// Max new episodes to download.
        /// </summary>
        /// <value>Max new episodes to download.</value>
        [DataMember(Name = "maxNewEpisodesToDownload", EmitDefaultValue = false)]
        public int MaxNewEpisodesToDownload { get; set; }

        /// <summary>
        /// Total size in bytes.
        /// </summary>
        /// <value>Total size in bytes.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PodcastMinifiedModel {\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CoverPath: ").Append(CoverPath).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  NumEpisodes: ").Append(NumEpisodes).Append("\n");
            sb.Append("  AutoDownloadEpisodes: ").Append(AutoDownloadEpisodes).Append("\n");
            sb.Append("  AutoDownloadSchedule: ").Append(AutoDownloadSchedule).Append("\n");
            sb.Append("  LastEpisodeCheck: ").Append(LastEpisodeCheck).Append("\n");
            sb.Append("  MaxEpisodesToKeep: ").Append(MaxEpisodesToKeep).Append("\n");
            sb.Append("  MaxNewEpisodesToDownload: ").Append(MaxNewEpisodesToDownload).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
