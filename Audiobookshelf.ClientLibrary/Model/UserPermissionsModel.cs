/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// User Permissions
    /// </summary>
    [DataContract(Name = "UserPermissions")]
    public partial class UserPermissionsModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPermissionsModel" /> class.
        /// </summary>
        /// <param name="download">Whether the user can download items..</param>
        /// <param name="update">Whether the user can update library items..</param>
        /// <param name="delete">Whether the user can delete library items..</param>
        /// <param name="upload">Whether the user can upload items..</param>
        /// <param name="accessAllLibraries">Whether the user can access all libraries..</param>
        /// <param name="accessAllTags">Whether the user can access all tags..</param>
        /// <param name="accessExplicitContent">Whether the user can access explicit content..</param>
        public UserPermissionsModel(bool download = default(bool), bool update = default(bool), bool delete = default(bool), bool upload = default(bool), bool accessAllLibraries = default(bool), bool accessAllTags = default(bool), bool accessExplicitContent = default(bool))
        {
            this.Download = download;
            this.Update = update;
            this.Delete = delete;
            this.Upload = upload;
            this.AccessAllLibraries = accessAllLibraries;
            this.AccessAllTags = accessAllTags;
            this.AccessExplicitContent = accessExplicitContent;
        }

        /// <summary>
        /// Whether the user can download items.
        /// </summary>
        /// <value>Whether the user can download items.</value>
        [DataMember(Name = "download", EmitDefaultValue = true)]
        public bool Download { get; set; }

        /// <summary>
        /// Whether the user can update library items.
        /// </summary>
        /// <value>Whether the user can update library items.</value>
        [DataMember(Name = "update", EmitDefaultValue = true)]
        public bool Update { get; set; }

        /// <summary>
        /// Whether the user can delete library items.
        /// </summary>
        /// <value>Whether the user can delete library items.</value>
        [DataMember(Name = "delete", EmitDefaultValue = true)]
        public bool Delete { get; set; }

        /// <summary>
        /// Whether the user can upload items.
        /// </summary>
        /// <value>Whether the user can upload items.</value>
        [DataMember(Name = "upload", EmitDefaultValue = true)]
        public bool Upload { get; set; }

        /// <summary>
        /// Whether the user can access all libraries.
        /// </summary>
        /// <value>Whether the user can access all libraries.</value>
        [DataMember(Name = "accessAllLibraries", EmitDefaultValue = true)]
        public bool AccessAllLibraries { get; set; }

        /// <summary>
        /// Whether the user can access all tags.
        /// </summary>
        /// <value>Whether the user can access all tags.</value>
        [DataMember(Name = "accessAllTags", EmitDefaultValue = true)]
        public bool AccessAllTags { get; set; }

        /// <summary>
        /// Whether the user can access explicit content.
        /// </summary>
        /// <value>Whether the user can access explicit content.</value>
        [DataMember(Name = "accessExplicitContent", EmitDefaultValue = true)]
        public bool AccessExplicitContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserPermissionsModel {\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("  Update: ").Append(Update).Append("\n");
            sb.Append("  Delete: ").Append(Delete).Append("\n");
            sb.Append("  Upload: ").Append(Upload).Append("\n");
            sb.Append("  AccessAllLibraries: ").Append(AccessAllLibraries).Append("\n");
            sb.Append("  AccessAllTags: ").Append(AccessAllTags).Append("\n");
            sb.Append("  AccessExplicitContent: ").Append(AccessExplicitContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
