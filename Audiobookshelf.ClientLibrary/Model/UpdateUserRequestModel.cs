/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// UpdateUserRequestModel
    /// </summary>
    [DataContract(Name = "UpdateUserRequest")]
    public partial class UpdateUserRequestModel : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Guest for value: guest
            /// </summary>
            [EnumMember(Value = "guest")]
            Guest = 1,

            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 2,

            /// <summary>
            /// Enum Admin for value: admin
            /// </summary>
            [EnumMember(Value = "admin")]
            Admin = 3
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateUserRequestModel" /> class.
        /// </summary>
        /// <param name="username">username.</param>
        /// <param name="password">password.</param>
        /// <param name="type">type.</param>
        /// <param name="seriesHideFromContinueListening">seriesHideFromContinueListening.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="librariesAccessible">librariesAccessible.</param>
        /// <param name="itemTagsAccessible">itemTagsAccessible.</param>
        public UpdateUserRequestModel(string username = default(string), string password = default(string), TypeEnum? type = default(TypeEnum?), List<string> seriesHideFromContinueListening = default(List<string>), bool isActive = default(bool), UserPermissionsModel permissions = default(UserPermissionsModel), List<string> librariesAccessible = default(List<string>), List<string> itemTagsAccessible = default(List<string>))
        {
            this.Username = username;
            this.Password = password;
            this.Type = type;
            this.SeriesHideFromContinueListening = seriesHideFromContinueListening;
            this.IsActive = isActive;
            this.Permissions = permissions;
            this.LibrariesAccessible = librariesAccessible;
            this.ItemTagsAccessible = itemTagsAccessible;
        }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets SeriesHideFromContinueListening
        /// </summary>
        [DataMember(Name = "seriesHideFromContinueListening", EmitDefaultValue = false)]
        public List<string> SeriesHideFromContinueListening { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "isActive", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name = "permissions", EmitDefaultValue = false)]
        public UserPermissionsModel Permissions { get; set; }

        /// <summary>
        /// Gets or Sets LibrariesAccessible
        /// </summary>
        [DataMember(Name = "librariesAccessible", EmitDefaultValue = false)]
        public List<string> LibrariesAccessible { get; set; }

        /// <summary>
        /// Gets or Sets ItemTagsAccessible
        /// </summary>
        [DataMember(Name = "itemTagsAccessible", EmitDefaultValue = false)]
        public List<string> ItemTagsAccessible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateUserRequestModel {\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SeriesHideFromContinueListening: ").Append(SeriesHideFromContinueListening).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  LibrariesAccessible: ").Append(LibrariesAccessible).Append("\n");
            sb.Append("  ItemTagsAccessible: ").Append(ItemTagsAccessible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
