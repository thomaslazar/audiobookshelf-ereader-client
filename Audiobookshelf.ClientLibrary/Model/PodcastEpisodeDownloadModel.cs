/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// Information about a podcast episode download.
    /// </summary>
    [DataContract(Name = "PodcastEpisodeDownload")]
    public partial class PodcastEpisodeDownloadModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PodcastEpisodeDownloadModel" /> class.
        /// </summary>
        /// <param name="id">The ID of the podcast episode download..</param>
        /// <param name="episodeDisplayTitle">The display title of the episode to be downloaded..</param>
        /// <param name="url">The URL from which to download the episode..</param>
        /// <param name="libraryItemId">The ID of the library item the episode belongs to..</param>
        /// <param name="libraryId">The ID of the library the episode&#39;s podcast belongs to..</param>
        /// <param name="isFinished">Whether the episode has finished downloading..</param>
        /// <param name="failed">Whether the episode failed to download..</param>
        /// <param name="startedAt">The time (in ms since POSIX epoch) when the episode started downloading..</param>
        /// <param name="createdAt">The time (in ms since POSIX epoch) when the podcast episode download request was created..</param>
        /// <param name="finishedAt">The time (in ms since POSIX epoch) when the episode finished downloading..</param>
        /// <param name="podcastTitle">The title of the episode&#39;s podcast..</param>
        /// <param name="podcastExplicit">Whether the episode&#39;s podcast is explicit..</param>
        /// <param name="season">The season of the podcast episode..</param>
        /// <param name="episode">The episode number of the podcast episode..</param>
        /// <param name="episodeType">The type of the podcast episode..</param>
        /// <param name="publishedAt">The time (in ms since POSIX epoch) when the episode was published..</param>
        public PodcastEpisodeDownloadModel(string id = default(string), string episodeDisplayTitle = default(string), string url = default(string), string libraryItemId = default(string), string libraryId = default(string), bool isFinished = default(bool), bool failed = default(bool), long? startedAt = default(long?), long createdAt = default(long), long? finishedAt = default(long?), string podcastTitle = default(string), bool podcastExplicit = default(bool), string season = default(string), string episode = default(string), string episodeType = default(string), long? publishedAt = default(long?))
        {
            this.Id = id;
            this.EpisodeDisplayTitle = episodeDisplayTitle;
            this.Url = url;
            this.LibraryItemId = libraryItemId;
            this.LibraryId = libraryId;
            this.IsFinished = isFinished;
            this.Failed = failed;
            this.StartedAt = startedAt;
            this.CreatedAt = createdAt;
            this.FinishedAt = finishedAt;
            this.PodcastTitle = podcastTitle;
            this.PodcastExplicit = podcastExplicit;
            this.Season = season;
            this.Episode = episode;
            this.EpisodeType = episodeType;
            this.PublishedAt = publishedAt;
        }

        /// <summary>
        /// The ID of the podcast episode download.
        /// </summary>
        /// <value>The ID of the podcast episode download.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The display title of the episode to be downloaded.
        /// </summary>
        /// <value>The display title of the episode to be downloaded.</value>
        [DataMember(Name = "episodeDisplayTitle", EmitDefaultValue = false)]
        public string EpisodeDisplayTitle { get; set; }

        /// <summary>
        /// The URL from which to download the episode.
        /// </summary>
        /// <value>The URL from which to download the episode.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// The ID of the library item the episode belongs to.
        /// </summary>
        /// <value>The ID of the library item the episode belongs to.</value>
        [DataMember(Name = "libraryItemId", EmitDefaultValue = false)]
        public string LibraryItemId { get; set; }

        /// <summary>
        /// The ID of the library the episode&#39;s podcast belongs to.
        /// </summary>
        /// <value>The ID of the library the episode&#39;s podcast belongs to.</value>
        [DataMember(Name = "libraryId", EmitDefaultValue = false)]
        public string LibraryId { get; set; }

        /// <summary>
        /// Whether the episode has finished downloading.
        /// </summary>
        /// <value>Whether the episode has finished downloading.</value>
        [DataMember(Name = "isFinished", EmitDefaultValue = true)]
        public bool IsFinished { get; set; }

        /// <summary>
        /// Whether the episode failed to download.
        /// </summary>
        /// <value>Whether the episode failed to download.</value>
        [DataMember(Name = "failed", EmitDefaultValue = true)]
        public bool Failed { get; set; }

        /// <summary>
        /// The time (in ms since POSIX epoch) when the episode started downloading.
        /// </summary>
        /// <value>The time (in ms since POSIX epoch) when the episode started downloading.</value>
        [DataMember(Name = "startedAt", EmitDefaultValue = true)]
        public long? StartedAt { get; set; }

        /// <summary>
        /// The time (in ms since POSIX epoch) when the podcast episode download request was created.
        /// </summary>
        /// <value>The time (in ms since POSIX epoch) when the podcast episode download request was created.</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// The time (in ms since POSIX epoch) when the episode finished downloading.
        /// </summary>
        /// <value>The time (in ms since POSIX epoch) when the episode finished downloading.</value>
        [DataMember(Name = "finishedAt", EmitDefaultValue = true)]
        public long? FinishedAt { get; set; }

        /// <summary>
        /// The title of the episode&#39;s podcast.
        /// </summary>
        /// <value>The title of the episode&#39;s podcast.</value>
        [DataMember(Name = "podcastTitle", EmitDefaultValue = true)]
        public string PodcastTitle { get; set; }

        /// <summary>
        /// Whether the episode&#39;s podcast is explicit.
        /// </summary>
        /// <value>Whether the episode&#39;s podcast is explicit.</value>
        [DataMember(Name = "podcastExplicit", EmitDefaultValue = true)]
        public bool PodcastExplicit { get; set; }

        /// <summary>
        /// The season of the podcast episode.
        /// </summary>
        /// <value>The season of the podcast episode.</value>
        [DataMember(Name = "season", EmitDefaultValue = true)]
        public string Season { get; set; }

        /// <summary>
        /// The episode number of the podcast episode.
        /// </summary>
        /// <value>The episode number of the podcast episode.</value>
        [DataMember(Name = "episode", EmitDefaultValue = true)]
        public string Episode { get; set; }

        /// <summary>
        /// The type of the podcast episode.
        /// </summary>
        /// <value>The type of the podcast episode.</value>
        [DataMember(Name = "episodeType", EmitDefaultValue = false)]
        public string EpisodeType { get; set; }

        /// <summary>
        /// The time (in ms since POSIX epoch) when the episode was published.
        /// </summary>
        /// <value>The time (in ms since POSIX epoch) when the episode was published.</value>
        [DataMember(Name = "publishedAt", EmitDefaultValue = true)]
        public long? PublishedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PodcastEpisodeDownloadModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EpisodeDisplayTitle: ").Append(EpisodeDisplayTitle).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  LibraryItemId: ").Append(LibraryItemId).Append("\n");
            sb.Append("  LibraryId: ").Append(LibraryId).Append("\n");
            sb.Append("  IsFinished: ").Append(IsFinished).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  PodcastTitle: ").Append(PodcastTitle).Append("\n");
            sb.Append("  PodcastExplicit: ").Append(PodcastExplicit).Append("\n");
            sb.Append("  Season: ").Append(Season).Append("\n");
            sb.Append("  Episode: ").Append(Episode).Append("\n");
            sb.Append("  EpisodeType: ").Append(EpisodeType).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
