/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// UpdateLibraryRequestModel
    /// </summary>
    [DataContract(Name = "UpdateLibraryRequest")]
    public partial class UpdateLibraryRequestModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateLibraryRequestModel" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="folders">folders.</param>
        /// <param name="displayOrder">displayOrder.</param>
        /// <param name="icon">icon.</param>
        /// <param name="provider">provider.</param>
        /// <param name="settings">settings.</param>
        public UpdateLibraryRequestModel(string name = default(string), List<UpdateLibraryRequestFoldersInnerModel> folders = default(List<UpdateLibraryRequestFoldersInnerModel>), int displayOrder = default(int), string icon = default(string), string provider = default(string), UpdateLibraryRequestSettingsModel settings = default(UpdateLibraryRequestSettingsModel))
        {
            this.Name = name;
            this.Folders = folders;
            this.DisplayOrder = displayOrder;
            this.Icon = icon;
            this.Provider = provider;
            this.Settings = settings;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Folders
        /// </summary>
        [DataMember(Name = "folders", EmitDefaultValue = false)]
        public List<UpdateLibraryRequestFoldersInnerModel> Folders { get; set; }

        /// <summary>
        /// Gets or Sets DisplayOrder
        /// </summary>
        [DataMember(Name = "displayOrder", EmitDefaultValue = false)]
        public int DisplayOrder { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name = "provider", EmitDefaultValue = false)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name = "settings", EmitDefaultValue = false)]
        public UpdateLibraryRequestSettingsModel Settings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateLibraryRequestModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
