/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// A book object.
    /// </summary>
    [DataContract(Name = "Book")]
    public partial class BookModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookModel" /> class.
        /// </summary>
        /// <param name="id">The ID of the library item that contains the book..</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="coverPath">The absolute path on the server of the cover file. Will be null if there is no cover..</param>
        /// <param name="tags">The book&#39;s tags..</param>
        /// <param name="audioFiles">The book&#39;s audio files..</param>
        /// <param name="chapters">The book&#39;s chapters..</param>
        /// <param name="ebookFile">ebookFile.</param>
        public BookModel(string id = default(string), BookMetadataModel metadata = default(BookMetadataModel), string coverPath = default(string), List<string> tags = default(List<string>), List<AudioFileModel> audioFiles = default(List<AudioFileModel>), List<BookChapterModel> chapters = default(List<BookChapterModel>), EBookFileModel ebookFile = default(EBookFileModel))
        {
            this.Id = id;
            this.Metadata = metadata;
            this.CoverPath = coverPath;
            this.Tags = tags;
            this.AudioFiles = audioFiles;
            this.Chapters = chapters;
            this.EbookFile = ebookFile;
        }

        /// <summary>
        /// The ID of the library item that contains the book.
        /// </summary>
        /// <value>The ID of the library item that contains the book.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public BookMetadataModel Metadata { get; set; }

        /// <summary>
        /// The absolute path on the server of the cover file. Will be null if there is no cover.
        /// </summary>
        /// <value>The absolute path on the server of the cover file. Will be null if there is no cover.</value>
        [DataMember(Name = "coverPath", EmitDefaultValue = true)]
        public string CoverPath { get; set; }

        /// <summary>
        /// The book&#39;s tags.
        /// </summary>
        /// <value>The book&#39;s tags.</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// The book&#39;s audio files.
        /// </summary>
        /// <value>The book&#39;s audio files.</value>
        [DataMember(Name = "audioFiles", EmitDefaultValue = false)]
        public List<AudioFileModel> AudioFiles { get; set; }

        /// <summary>
        /// The book&#39;s chapters.
        /// </summary>
        /// <value>The book&#39;s chapters.</value>
        [DataMember(Name = "chapters", EmitDefaultValue = false)]
        public List<BookChapterModel> Chapters { get; set; }

        /// <summary>
        /// Gets or Sets EbookFile
        /// </summary>
        [DataMember(Name = "ebookFile", EmitDefaultValue = false)]
        public EBookFileModel EbookFile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BookModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CoverPath: ").Append(CoverPath).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  AudioFiles: ").Append(AudioFiles).Append("\n");
            sb.Append("  Chapters: ").Append(Chapters).Append("\n");
            sb.Append("  EbookFile: ").Append(EbookFile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
