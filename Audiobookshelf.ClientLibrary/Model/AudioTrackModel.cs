/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// An audio track.
    /// </summary>
    [DataContract(Name = "AudioTrack")]
    public partial class AudioTrackModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AudioTrackModel" /> class.
        /// </summary>
        /// <param name="index">The index of the audio track..</param>
        /// <param name="startOffset">When in the audio file (in seconds) the track starts..</param>
        /// <param name="duration">The length (in seconds) of the audio track..</param>
        /// <param name="title">The filename of the audio file the audio track belongs to..</param>
        /// <param name="contentUrl">The URL path of the audio file..</param>
        /// <param name="mimeType">The MIME type of the audio file..</param>
        /// <param name="metadata">metadata.</param>
        public AudioTrackModel(int index = default(int), decimal startOffset = default(decimal), decimal duration = default(decimal), string title = default(string), string contentUrl = default(string), string mimeType = default(string), FileMetadataModel metadata = default(FileMetadataModel))
        {
            this.Index = index;
            this.StartOffset = startOffset;
            this.Duration = duration;
            this.Title = title;
            this.ContentUrl = contentUrl;
            this.MimeType = mimeType;
            this.Metadata = metadata;
        }

        /// <summary>
        /// The index of the audio track.
        /// </summary>
        /// <value>The index of the audio track.</value>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public int Index { get; set; }

        /// <summary>
        /// When in the audio file (in seconds) the track starts.
        /// </summary>
        /// <value>When in the audio file (in seconds) the track starts.</value>
        [DataMember(Name = "startOffset", EmitDefaultValue = false)]
        public decimal StartOffset { get; set; }

        /// <summary>
        /// The length (in seconds) of the audio track.
        /// </summary>
        /// <value>The length (in seconds) of the audio track.</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public decimal Duration { get; set; }

        /// <summary>
        /// The filename of the audio file the audio track belongs to.
        /// </summary>
        /// <value>The filename of the audio file the audio track belongs to.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The URL path of the audio file.
        /// </summary>
        /// <value>The URL path of the audio file.</value>
        [DataMember(Name = "contentUrl", EmitDefaultValue = false)]
        public string ContentUrl { get; set; }

        /// <summary>
        /// The MIME type of the audio file.
        /// </summary>
        /// <value>The MIME type of the audio file.</value>
        [DataMember(Name = "mimeType", EmitDefaultValue = false)]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public FileMetadataModel Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AudioTrackModel {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  StartOffset: ").Append(StartOffset).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ContentUrl: ").Append(ContentUrl).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
