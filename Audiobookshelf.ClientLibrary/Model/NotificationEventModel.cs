/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// Notification Event
    /// </summary>
    [DataContract(Name = "NotificationEvent")]
    public partial class NotificationEventModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationEventModel" /> class.
        /// </summary>
        /// <param name="name">The name of the notification event..</param>
        /// <param name="requiresLibrary">Whether the event depends on a library..</param>
        /// <param name="libraryMediaType">The library media type if required..</param>
        /// <param name="description">The description of the event..</param>
        /// <param name="variables">The variables of the event..</param>
        /// <param name="defaults">defaults.</param>
        /// <param name="testData">Test data for the event..</param>
        public NotificationEventModel(string name = default(string), bool requiresLibrary = default(bool), string libraryMediaType = default(string), string description = default(string), List<string> variables = default(List<string>), NotificationEventDefaultsModel defaults = default(NotificationEventDefaultsModel), Object testData = default(Object))
        {
            this.Name = name;
            this.RequiresLibrary = requiresLibrary;
            this.LibraryMediaType = libraryMediaType;
            this.Description = description;
            this.Variables = variables;
            this.Defaults = defaults;
            this.TestData = testData;
        }

        /// <summary>
        /// The name of the notification event.
        /// </summary>
        /// <value>The name of the notification event.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the event depends on a library.
        /// </summary>
        /// <value>Whether the event depends on a library.</value>
        [DataMember(Name = "requiresLibrary", EmitDefaultValue = true)]
        public bool RequiresLibrary { get; set; }

        /// <summary>
        /// The library media type if required.
        /// </summary>
        /// <value>The library media type if required.</value>
        [DataMember(Name = "libraryMediaType", EmitDefaultValue = true)]
        public string LibraryMediaType { get; set; }

        /// <summary>
        /// The description of the event.
        /// </summary>
        /// <value>The description of the event.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The variables of the event.
        /// </summary>
        /// <value>The variables of the event.</value>
        [DataMember(Name = "variables", EmitDefaultValue = false)]
        public List<string> Variables { get; set; }

        /// <summary>
        /// Gets or Sets Defaults
        /// </summary>
        [DataMember(Name = "defaults", EmitDefaultValue = false)]
        public NotificationEventDefaultsModel Defaults { get; set; }

        /// <summary>
        /// Test data for the event.
        /// </summary>
        /// <value>Test data for the event.</value>
        [DataMember(Name = "testData", EmitDefaultValue = false)]
        public Object TestData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotificationEventModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RequiresLibrary: ").Append(RequiresLibrary).Append("\n");
            sb.Append("  LibraryMediaType: ").Append(LibraryMediaType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("  Defaults: ").Append(Defaults).Append("\n");
            sb.Append("  TestData: ").Append(TestData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
