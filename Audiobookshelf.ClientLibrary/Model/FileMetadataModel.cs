/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// File metadata.
    /// </summary>
    [DataContract(Name = "FileMetadata")]
    public partial class FileMetadataModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileMetadataModel" /> class.
        /// </summary>
        /// <param name="filename">The filename of the file..</param>
        /// <param name="ext">The file extension of the file..</param>
        /// <param name="path">The absolute path on the server of the file..</param>
        /// <param name="relPath">The path of the file, relative to the book&#39;s or podcast&#39;s folder..</param>
        /// <param name="size">The size (in bytes) of the file..</param>
        /// <param name="mtimeMs">The time (in ms since POSIX epoch) when the file was last modified on disk..</param>
        /// <param name="ctimeMs">The time (in ms since POSIX epoch) when the file status was changed on disk..</param>
        /// <param name="birthtimeMs">The time (in ms since POSIX epoch) when the file was created on disk. Will be 0 if unknown..</param>
        public FileMetadataModel(string filename = default(string), string ext = default(string), string path = default(string), string relPath = default(string), int size = default(int), long mtimeMs = default(long), long ctimeMs = default(long), long birthtimeMs = default(long))
        {
            this.Filename = filename;
            this.Ext = ext;
            this.Path = path;
            this.RelPath = relPath;
            this.Size = size;
            this.MtimeMs = mtimeMs;
            this.CtimeMs = ctimeMs;
            this.BirthtimeMs = birthtimeMs;
        }

        /// <summary>
        /// The filename of the file.
        /// </summary>
        /// <value>The filename of the file.</value>
        [DataMember(Name = "filename", EmitDefaultValue = false)]
        public string Filename { get; set; }

        /// <summary>
        /// The file extension of the file.
        /// </summary>
        /// <value>The file extension of the file.</value>
        [DataMember(Name = "ext", EmitDefaultValue = false)]
        public string Ext { get; set; }

        /// <summary>
        /// The absolute path on the server of the file.
        /// </summary>
        /// <value>The absolute path on the server of the file.</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// The path of the file, relative to the book&#39;s or podcast&#39;s folder.
        /// </summary>
        /// <value>The path of the file, relative to the book&#39;s or podcast&#39;s folder.</value>
        [DataMember(Name = "relPath", EmitDefaultValue = false)]
        public string RelPath { get; set; }

        /// <summary>
        /// The size (in bytes) of the file.
        /// </summary>
        /// <value>The size (in bytes) of the file.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// The time (in ms since POSIX epoch) when the file was last modified on disk.
        /// </summary>
        /// <value>The time (in ms since POSIX epoch) when the file was last modified on disk.</value>
        [DataMember(Name = "mtimeMs", EmitDefaultValue = false)]
        public long MtimeMs { get; set; }

        /// <summary>
        /// The time (in ms since POSIX epoch) when the file status was changed on disk.
        /// </summary>
        /// <value>The time (in ms since POSIX epoch) when the file status was changed on disk.</value>
        [DataMember(Name = "ctimeMs", EmitDefaultValue = false)]
        public long CtimeMs { get; set; }

        /// <summary>
        /// The time (in ms since POSIX epoch) when the file was created on disk. Will be 0 if unknown.
        /// </summary>
        /// <value>The time (in ms since POSIX epoch) when the file was created on disk. Will be 0 if unknown.</value>
        [DataMember(Name = "birthtimeMs", EmitDefaultValue = false)]
        public long BirthtimeMs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileMetadataModel {\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  RelPath: ").Append(RelPath).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  MtimeMs: ").Append(MtimeMs).Append("\n");
            sb.Append("  CtimeMs: ").Append(CtimeMs).Append("\n");
            sb.Append("  BirthtimeMs: ").Append(BirthtimeMs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
