/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// Server Settings
    /// </summary>
    [DataContract(Name = "ServerSettings")]
    public partial class ServerSettingsModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerSettingsModel" /> class.
        /// </summary>
        /// <param name="id">The ID of the server settings..</param>
        /// <param name="scannerFindCovers">Whether the scanner will attempt to find covers..</param>
        /// <param name="scannerCoverProvider">Which metadata provider to use if find covers enabled..</param>
        /// <param name="scannerParseSubtitle">Whether to parse subtitles from folder names..</param>
        /// <param name="scannerPreferMatchedMetadata">Whether matched data overrides item details in Quick Match..</param>
        /// <param name="scannerDisableWatcher">Disable folder watcher?.</param>
        /// <param name="storeCoverWithItem">Store covers in item&#39;s folder?.</param>
        /// <param name="storeMetadataWithItem">Store metadata files in item&#39;s folder?.</param>
        /// <param name="metadataFileFormat">Must be json or abs..</param>
        /// <param name="rateLimitLoginRequests">Max login requests per window..</param>
        /// <param name="rateLimitLoginWindow">Length (ms) of login rate limit window..</param>
        /// <param name="backupSchedule">Cron expression for automatic backups..</param>
        /// <param name="backupsToKeep">Number of backups to keep..</param>
        /// <param name="maxBackupSize">Max backup size (GB)..</param>
        /// <param name="loggerDailyLogsToKeep">Number of daily logs to keep..</param>
        /// <param name="loggerScannerLogsToKeep">Number of scanner logs to keep..</param>
        /// <param name="homeBookshelfView">Use skeuomorphic design on home page?.</param>
        /// <param name="bookshelfView">Use skeuomorphic design on other pages?.</param>
        /// <param name="sortingIgnorePrefix">Ignore prefixes when sorting?.</param>
        /// <param name="sortingPrefixes">Prefixes to ignore if sortingIgnorePrefix is true..</param>
        /// <param name="chromecastEnabled">Enable Chromecast?.</param>
        /// <param name="dateFormat">Date format. Options are MM/dd/yyyy, dd/MM/yyyy, dd.MM.yyyy, yyyy-MM-dd, MMM do, yyyy, MMMM do, yyyy, dd MMM yyyy, or dd MMMM yyyy..</param>
        /// <param name="timeFormat">Time format..</param>
        /// <param name="language">Default server language..</param>
        /// <param name="logLevel">Log level (1&#x3D;debug,2&#x3D;info,3&#x3D;warnings)..</param>
        /// <param name="varVersion">Server version..</param>
        public ServerSettingsModel(string id = default(string), bool scannerFindCovers = default(bool), string scannerCoverProvider = default(string), bool scannerParseSubtitle = default(bool), bool scannerPreferMatchedMetadata = default(bool), bool scannerDisableWatcher = default(bool), bool storeCoverWithItem = default(bool), bool storeMetadataWithItem = default(bool), string metadataFileFormat = default(string), int rateLimitLoginRequests = default(int), int rateLimitLoginWindow = default(int), string backupSchedule = default(string), int backupsToKeep = default(int), int maxBackupSize = default(int), int loggerDailyLogsToKeep = default(int), int loggerScannerLogsToKeep = default(int), int homeBookshelfView = default(int), int bookshelfView = default(int), bool sortingIgnorePrefix = default(bool), List<string> sortingPrefixes = default(List<string>), bool chromecastEnabled = default(bool), string dateFormat = default(string), string timeFormat = default(string), string language = default(string), int logLevel = default(int), string varVersion = default(string))
        {
            this.Id = id;
            this.ScannerFindCovers = scannerFindCovers;
            this.ScannerCoverProvider = scannerCoverProvider;
            this.ScannerParseSubtitle = scannerParseSubtitle;
            this.ScannerPreferMatchedMetadata = scannerPreferMatchedMetadata;
            this.ScannerDisableWatcher = scannerDisableWatcher;
            this.StoreCoverWithItem = storeCoverWithItem;
            this.StoreMetadataWithItem = storeMetadataWithItem;
            this.MetadataFileFormat = metadataFileFormat;
            this.RateLimitLoginRequests = rateLimitLoginRequests;
            this.RateLimitLoginWindow = rateLimitLoginWindow;
            this.BackupSchedule = backupSchedule;
            this.BackupsToKeep = backupsToKeep;
            this.MaxBackupSize = maxBackupSize;
            this.LoggerDailyLogsToKeep = loggerDailyLogsToKeep;
            this.LoggerScannerLogsToKeep = loggerScannerLogsToKeep;
            this.HomeBookshelfView = homeBookshelfView;
            this.BookshelfView = bookshelfView;
            this.SortingIgnorePrefix = sortingIgnorePrefix;
            this.SortingPrefixes = sortingPrefixes;
            this.ChromecastEnabled = chromecastEnabled;
            this.DateFormat = dateFormat;
            this.TimeFormat = timeFormat;
            this.Language = language;
            this.LogLevel = logLevel;
            this.VarVersion = varVersion;
        }

        /// <summary>
        /// The ID of the server settings.
        /// </summary>
        /// <value>The ID of the server settings.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the scanner will attempt to find covers.
        /// </summary>
        /// <value>Whether the scanner will attempt to find covers.</value>
        [DataMember(Name = "scannerFindCovers", EmitDefaultValue = true)]
        public bool ScannerFindCovers { get; set; }

        /// <summary>
        /// Which metadata provider to use if find covers enabled.
        /// </summary>
        /// <value>Which metadata provider to use if find covers enabled.</value>
        [DataMember(Name = "scannerCoverProvider", EmitDefaultValue = false)]
        public string ScannerCoverProvider { get; set; }

        /// <summary>
        /// Whether to parse subtitles from folder names.
        /// </summary>
        /// <value>Whether to parse subtitles from folder names.</value>
        [DataMember(Name = "scannerParseSubtitle", EmitDefaultValue = true)]
        public bool ScannerParseSubtitle { get; set; }

        /// <summary>
        /// Whether matched data overrides item details in Quick Match.
        /// </summary>
        /// <value>Whether matched data overrides item details in Quick Match.</value>
        [DataMember(Name = "scannerPreferMatchedMetadata", EmitDefaultValue = true)]
        public bool ScannerPreferMatchedMetadata { get; set; }

        /// <summary>
        /// Disable folder watcher?
        /// </summary>
        /// <value>Disable folder watcher?</value>
        [DataMember(Name = "scannerDisableWatcher", EmitDefaultValue = true)]
        public bool ScannerDisableWatcher { get; set; }

        /// <summary>
        /// Store covers in item&#39;s folder?
        /// </summary>
        /// <value>Store covers in item&#39;s folder?</value>
        [DataMember(Name = "storeCoverWithItem", EmitDefaultValue = true)]
        public bool StoreCoverWithItem { get; set; }

        /// <summary>
        /// Store metadata files in item&#39;s folder?
        /// </summary>
        /// <value>Store metadata files in item&#39;s folder?</value>
        [DataMember(Name = "storeMetadataWithItem", EmitDefaultValue = true)]
        public bool StoreMetadataWithItem { get; set; }

        /// <summary>
        /// Must be json or abs.
        /// </summary>
        /// <value>Must be json or abs.</value>
        [DataMember(Name = "metadataFileFormat", EmitDefaultValue = false)]
        public string MetadataFileFormat { get; set; }

        /// <summary>
        /// Max login requests per window.
        /// </summary>
        /// <value>Max login requests per window.</value>
        [DataMember(Name = "rateLimitLoginRequests", EmitDefaultValue = false)]
        public int RateLimitLoginRequests { get; set; }

        /// <summary>
        /// Length (ms) of login rate limit window.
        /// </summary>
        /// <value>Length (ms) of login rate limit window.</value>
        [DataMember(Name = "rateLimitLoginWindow", EmitDefaultValue = false)]
        public int RateLimitLoginWindow { get; set; }

        /// <summary>
        /// Cron expression for automatic backups.
        /// </summary>
        /// <value>Cron expression for automatic backups.</value>
        [DataMember(Name = "backupSchedule", EmitDefaultValue = false)]
        public string BackupSchedule { get; set; }

        /// <summary>
        /// Number of backups to keep.
        /// </summary>
        /// <value>Number of backups to keep.</value>
        [DataMember(Name = "backupsToKeep", EmitDefaultValue = false)]
        public int BackupsToKeep { get; set; }

        /// <summary>
        /// Max backup size (GB).
        /// </summary>
        /// <value>Max backup size (GB).</value>
        [DataMember(Name = "maxBackupSize", EmitDefaultValue = false)]
        public int MaxBackupSize { get; set; }

        /// <summary>
        /// Number of daily logs to keep.
        /// </summary>
        /// <value>Number of daily logs to keep.</value>
        [DataMember(Name = "loggerDailyLogsToKeep", EmitDefaultValue = false)]
        public int LoggerDailyLogsToKeep { get; set; }

        /// <summary>
        /// Number of scanner logs to keep.
        /// </summary>
        /// <value>Number of scanner logs to keep.</value>
        [DataMember(Name = "loggerScannerLogsToKeep", EmitDefaultValue = false)]
        public int LoggerScannerLogsToKeep { get; set; }

        /// <summary>
        /// Use skeuomorphic design on home page?
        /// </summary>
        /// <value>Use skeuomorphic design on home page?</value>
        [DataMember(Name = "homeBookshelfView", EmitDefaultValue = false)]
        public int HomeBookshelfView { get; set; }

        /// <summary>
        /// Use skeuomorphic design on other pages?
        /// </summary>
        /// <value>Use skeuomorphic design on other pages?</value>
        [DataMember(Name = "bookshelfView", EmitDefaultValue = false)]
        public int BookshelfView { get; set; }

        /// <summary>
        /// Ignore prefixes when sorting?
        /// </summary>
        /// <value>Ignore prefixes when sorting?</value>
        [DataMember(Name = "sortingIgnorePrefix", EmitDefaultValue = true)]
        public bool SortingIgnorePrefix { get; set; }

        /// <summary>
        /// Prefixes to ignore if sortingIgnorePrefix is true.
        /// </summary>
        /// <value>Prefixes to ignore if sortingIgnorePrefix is true.</value>
        [DataMember(Name = "sortingPrefixes", EmitDefaultValue = false)]
        public List<string> SortingPrefixes { get; set; }

        /// <summary>
        /// Enable Chromecast?
        /// </summary>
        /// <value>Enable Chromecast?</value>
        [DataMember(Name = "chromecastEnabled", EmitDefaultValue = true)]
        public bool ChromecastEnabled { get; set; }

        /// <summary>
        /// Date format. Options are MM/dd/yyyy, dd/MM/yyyy, dd.MM.yyyy, yyyy-MM-dd, MMM do, yyyy, MMMM do, yyyy, dd MMM yyyy, or dd MMMM yyyy.
        /// </summary>
        /// <value>Date format. Options are MM/dd/yyyy, dd/MM/yyyy, dd.MM.yyyy, yyyy-MM-dd, MMM do, yyyy, MMMM do, yyyy, dd MMM yyyy, or dd MMMM yyyy.</value>
        [DataMember(Name = "dateFormat", EmitDefaultValue = false)]
        public string DateFormat { get; set; }

        /// <summary>
        /// Time format.
        /// </summary>
        /// <value>Time format.</value>
        [DataMember(Name = "timeFormat", EmitDefaultValue = false)]
        public string TimeFormat { get; set; }

        /// <summary>
        /// Default server language.
        /// </summary>
        /// <value>Default server language.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Log level (1&#x3D;debug,2&#x3D;info,3&#x3D;warnings).
        /// </summary>
        /// <value>Log level (1&#x3D;debug,2&#x3D;info,3&#x3D;warnings).</value>
        [DataMember(Name = "logLevel", EmitDefaultValue = false)]
        public int LogLevel { get; set; }

        /// <summary>
        /// Server version.
        /// </summary>
        /// <value>Server version.</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ServerSettingsModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ScannerFindCovers: ").Append(ScannerFindCovers).Append("\n");
            sb.Append("  ScannerCoverProvider: ").Append(ScannerCoverProvider).Append("\n");
            sb.Append("  ScannerParseSubtitle: ").Append(ScannerParseSubtitle).Append("\n");
            sb.Append("  ScannerPreferMatchedMetadata: ").Append(ScannerPreferMatchedMetadata).Append("\n");
            sb.Append("  ScannerDisableWatcher: ").Append(ScannerDisableWatcher).Append("\n");
            sb.Append("  StoreCoverWithItem: ").Append(StoreCoverWithItem).Append("\n");
            sb.Append("  StoreMetadataWithItem: ").Append(StoreMetadataWithItem).Append("\n");
            sb.Append("  MetadataFileFormat: ").Append(MetadataFileFormat).Append("\n");
            sb.Append("  RateLimitLoginRequests: ").Append(RateLimitLoginRequests).Append("\n");
            sb.Append("  RateLimitLoginWindow: ").Append(RateLimitLoginWindow).Append("\n");
            sb.Append("  BackupSchedule: ").Append(BackupSchedule).Append("\n");
            sb.Append("  BackupsToKeep: ").Append(BackupsToKeep).Append("\n");
            sb.Append("  MaxBackupSize: ").Append(MaxBackupSize).Append("\n");
            sb.Append("  LoggerDailyLogsToKeep: ").Append(LoggerDailyLogsToKeep).Append("\n");
            sb.Append("  LoggerScannerLogsToKeep: ").Append(LoggerScannerLogsToKeep).Append("\n");
            sb.Append("  HomeBookshelfView: ").Append(HomeBookshelfView).Append("\n");
            sb.Append("  BookshelfView: ").Append(BookshelfView).Append("\n");
            sb.Append("  SortingIgnorePrefix: ").Append(SortingIgnorePrefix).Append("\n");
            sb.Append("  SortingPrefixes: ").Append(SortingPrefixes).Append("\n");
            sb.Append("  ChromecastEnabled: ").Append(ChromecastEnabled).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("  TimeFormat: ").Append(TimeFormat).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  LogLevel: ").Append(LogLevel).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
