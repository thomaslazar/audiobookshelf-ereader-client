/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// Settings for a library.
    /// </summary>
    [DataContract(Name = "LibrarySettings")]
    public partial class LibrarySettingsModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibrarySettingsModel" /> class.
        /// </summary>
        /// <param name="coverAspectRatio">Whether the library should use square book covers. Must be 0 (for false) or 1 (for true)..</param>
        /// <param name="disableWatcher">Whether to disable the folder watcher for the library..</param>
        /// <param name="skipMatchingMediaWithAsin">Whether to skip matching books that already have an ASIN..</param>
        /// <param name="skipMatchingMediaWithIsbn">Whether to skip matching books that already have an ISBN..</param>
        /// <param name="autoScanCronExpression">The cron expression for when to automatically scan the library folders. If null, automatic scanning will be disabled..</param>
        public LibrarySettingsModel(int coverAspectRatio = default(int), bool disableWatcher = default(bool), bool skipMatchingMediaWithAsin = default(bool), bool skipMatchingMediaWithIsbn = default(bool), string autoScanCronExpression = default(string))
        {
            this.CoverAspectRatio = coverAspectRatio;
            this.DisableWatcher = disableWatcher;
            this.SkipMatchingMediaWithAsin = skipMatchingMediaWithAsin;
            this.SkipMatchingMediaWithIsbn = skipMatchingMediaWithIsbn;
            this.AutoScanCronExpression = autoScanCronExpression;
        }

        /// <summary>
        /// Whether the library should use square book covers. Must be 0 (for false) or 1 (for true).
        /// </summary>
        /// <value>Whether the library should use square book covers. Must be 0 (for false) or 1 (for true).</value>
        [DataMember(Name = "coverAspectRatio", EmitDefaultValue = false)]
        public int CoverAspectRatio { get; set; }

        /// <summary>
        /// Whether to disable the folder watcher for the library.
        /// </summary>
        /// <value>Whether to disable the folder watcher for the library.</value>
        [DataMember(Name = "disableWatcher", EmitDefaultValue = true)]
        public bool DisableWatcher { get; set; }

        /// <summary>
        /// Whether to skip matching books that already have an ASIN.
        /// </summary>
        /// <value>Whether to skip matching books that already have an ASIN.</value>
        [DataMember(Name = "skipMatchingMediaWithAsin", EmitDefaultValue = true)]
        public bool SkipMatchingMediaWithAsin { get; set; }

        /// <summary>
        /// Whether to skip matching books that already have an ISBN.
        /// </summary>
        /// <value>Whether to skip matching books that already have an ISBN.</value>
        [DataMember(Name = "skipMatchingMediaWithIsbn", EmitDefaultValue = true)]
        public bool SkipMatchingMediaWithIsbn { get; set; }

        /// <summary>
        /// The cron expression for when to automatically scan the library folders. If null, automatic scanning will be disabled.
        /// </summary>
        /// <value>The cron expression for when to automatically scan the library folders. If null, automatic scanning will be disabled.</value>
        [DataMember(Name = "autoScanCronExpression", EmitDefaultValue = true)]
        public string AutoScanCronExpression { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LibrarySettingsModel {\n");
            sb.Append("  CoverAspectRatio: ").Append(CoverAspectRatio).Append("\n");
            sb.Append("  DisableWatcher: ").Append(DisableWatcher).Append("\n");
            sb.Append("  SkipMatchingMediaWithAsin: ").Append(SkipMatchingMediaWithAsin).Append("\n");
            sb.Append("  SkipMatchingMediaWithIsbn: ").Append(SkipMatchingMediaWithIsbn).Append("\n");
            sb.Append("  AutoScanCronExpression: ").Append(AutoScanCronExpression).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
