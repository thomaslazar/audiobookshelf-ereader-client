/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// RSS Feed
    /// </summary>
    [DataContract(Name = "RSSFeed")]
    public partial class RSSFeedModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RSSFeedModel" /> class.
        /// </summary>
        /// <param name="id">The ID of the RSS feed. UUIDv4.</param>
        /// <param name="slug">The slug of the RSS feed..</param>
        /// <param name="userId">The ID of the user that created the RSS feed. UUIDv4.</param>
        /// <param name="entityType">The type of entity the RSS feed is for..</param>
        /// <param name="entityId">The ID of the entity the RSS feed is for. UUIDv4.</param>
        /// <param name="coverPath">The path of the cover to use for the RSS feed..</param>
        /// <param name="serverAddress">The server&#39;s address..</param>
        /// <param name="feedUrl">The full URL of the RSS feed..</param>
        /// <param name="meta">meta.</param>
        /// <param name="episodes">The RSS feed&#39;s episodes..</param>
        /// <param name="createdAt">When the RSS feed was created..</param>
        /// <param name="updatedAt">When the RSS feed was last updated..</param>
        public RSSFeedModel(string id = default(string), string slug = default(string), string userId = default(string), string entityType = default(string), string entityId = default(string), string coverPath = default(string), string serverAddress = default(string), string feedUrl = default(string), RSSFeedMetadataModel meta = default(RSSFeedMetadataModel), List<RSSFeedEpisodeModel> episodes = default(List<RSSFeedEpisodeModel>), long createdAt = default(long), long updatedAt = default(long))
        {
            this.Id = id;
            this.Slug = slug;
            this.UserId = userId;
            this.EntityType = entityType;
            this.EntityId = entityId;
            this.CoverPath = coverPath;
            this.ServerAddress = serverAddress;
            this.FeedUrl = feedUrl;
            this.Meta = meta;
            this.Episodes = episodes;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// The ID of the RSS feed. UUIDv4
        /// </summary>
        /// <value>The ID of the RSS feed. UUIDv4</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The slug of the RSS feed.
        /// </summary>
        /// <value>The slug of the RSS feed.</value>
        [DataMember(Name = "slug", EmitDefaultValue = false)]
        public string Slug { get; set; }

        /// <summary>
        /// The ID of the user that created the RSS feed. UUIDv4
        /// </summary>
        /// <value>The ID of the user that created the RSS feed. UUIDv4</value>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// The type of entity the RSS feed is for.
        /// </summary>
        /// <value>The type of entity the RSS feed is for.</value>
        [DataMember(Name = "entityType", EmitDefaultValue = false)]
        public string EntityType { get; set; }

        /// <summary>
        /// The ID of the entity the RSS feed is for. UUIDv4
        /// </summary>
        /// <value>The ID of the entity the RSS feed is for. UUIDv4</value>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        /// The path of the cover to use for the RSS feed.
        /// </summary>
        /// <value>The path of the cover to use for the RSS feed.</value>
        [DataMember(Name = "coverPath", EmitDefaultValue = false)]
        public string CoverPath { get; set; }

        /// <summary>
        /// The server&#39;s address.
        /// </summary>
        /// <value>The server&#39;s address.</value>
        [DataMember(Name = "serverAddress", EmitDefaultValue = false)]
        public string ServerAddress { get; set; }

        /// <summary>
        /// The full URL of the RSS feed.
        /// </summary>
        /// <value>The full URL of the RSS feed.</value>
        [DataMember(Name = "feedUrl", EmitDefaultValue = false)]
        public string FeedUrl { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", EmitDefaultValue = false)]
        public RSSFeedMetadataModel Meta { get; set; }

        /// <summary>
        /// The RSS feed&#39;s episodes.
        /// </summary>
        /// <value>The RSS feed&#39;s episodes.</value>
        [DataMember(Name = "episodes", EmitDefaultValue = false)]
        public List<RSSFeedEpisodeModel> Episodes { get; set; }

        /// <summary>
        /// When the RSS feed was created.
        /// </summary>
        /// <value>When the RSS feed was created.</value>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// When the RSS feed was last updated.
        /// </summary>
        /// <value>When the RSS feed was last updated.</value>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public long UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RSSFeedModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  CoverPath: ").Append(CoverPath).Append("\n");
            sb.Append("  ServerAddress: ").Append(ServerAddress).Append("\n");
            sb.Append("  FeedUrl: ").Append(FeedUrl).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Episodes: ").Append(Episodes).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
