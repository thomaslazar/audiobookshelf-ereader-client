/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// A minified version of Book.
    /// </summary>
    [DataContract(Name = "BookMinified")]
    public partial class BookMinifiedModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BookMinifiedModel" /> class.
        /// </summary>
        /// <param name="id">The ID of the library item that contains the book..</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="coverPath">Cover path..</param>
        /// <param name="tags">Tags..</param>
        /// <param name="numTracks">The number of tracks..</param>
        /// <param name="numAudioFiles">Number of audio files..</param>
        /// <param name="numChapters">Number of chapters..</param>
        /// <param name="duration">Total length in seconds..</param>
        /// <param name="size">Total size in bytes..</param>
        /// <param name="ebookFormat">Ebook format or null if audiobook..</param>
        public BookMinifiedModel(string id = default(string), BookMetadataMinifiedModel metadata = default(BookMetadataMinifiedModel), string coverPath = default(string), List<string> tags = default(List<string>), int numTracks = default(int), int numAudioFiles = default(int), int numChapters = default(int), decimal duration = default(decimal), int size = default(int), string ebookFormat = default(string))
        {
            this.Id = id;
            this.Metadata = metadata;
            this.CoverPath = coverPath;
            this.Tags = tags;
            this.NumTracks = numTracks;
            this.NumAudioFiles = numAudioFiles;
            this.NumChapters = numChapters;
            this.Duration = duration;
            this.Size = size;
            this.EbookFormat = ebookFormat;
        }

        /// <summary>
        /// The ID of the library item that contains the book.
        /// </summary>
        /// <value>The ID of the library item that contains the book.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public BookMetadataMinifiedModel Metadata { get; set; }

        /// <summary>
        /// Cover path.
        /// </summary>
        /// <value>Cover path.</value>
        [DataMember(Name = "coverPath", EmitDefaultValue = true)]
        public string CoverPath { get; set; }

        /// <summary>
        /// Tags.
        /// </summary>
        /// <value>Tags.</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// The number of tracks.
        /// </summary>
        /// <value>The number of tracks.</value>
        [DataMember(Name = "numTracks", EmitDefaultValue = false)]
        public int NumTracks { get; set; }

        /// <summary>
        /// Number of audio files.
        /// </summary>
        /// <value>Number of audio files.</value>
        [DataMember(Name = "numAudioFiles", EmitDefaultValue = false)]
        public int NumAudioFiles { get; set; }

        /// <summary>
        /// Number of chapters.
        /// </summary>
        /// <value>Number of chapters.</value>
        [DataMember(Name = "numChapters", EmitDefaultValue = false)]
        public int NumChapters { get; set; }

        /// <summary>
        /// Total length in seconds.
        /// </summary>
        /// <value>Total length in seconds.</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public decimal Duration { get; set; }

        /// <summary>
        /// Total size in bytes.
        /// </summary>
        /// <value>Total size in bytes.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Ebook format or null if audiobook.
        /// </summary>
        /// <value>Ebook format or null if audiobook.</value>
        [DataMember(Name = "ebookFormat", EmitDefaultValue = true)]
        public string EbookFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BookMinifiedModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CoverPath: ").Append(CoverPath).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  NumTracks: ").Append(NumTracks).Append("\n");
            sb.Append("  NumAudioFiles: ").Append(NumAudioFiles).Append("\n");
            sb.Append("  NumChapters: ").Append(NumChapters).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  EbookFormat: ").Append(EbookFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
