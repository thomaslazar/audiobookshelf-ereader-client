/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// CreateLibraryRequestModel
    /// </summary>
    [DataContract(Name = "CreateLibraryRequest")]
    public partial class CreateLibraryRequestModel : IValidatableObject
    {
        /// <summary>
        /// Defines MediaType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaTypeEnum
        {
            /// <summary>
            /// Enum Book for value: book
            /// </summary>
            [EnumMember(Value = "book")]
            Book = 1,

            /// <summary>
            /// Enum Podcast for value: podcast
            /// </summary>
            [EnumMember(Value = "podcast")]
            Podcast = 2
        }


        /// <summary>
        /// Gets or Sets MediaType
        /// </summary>
        [DataMember(Name = "mediaType", EmitDefaultValue = false)]
        public MediaTypeEnum? MediaType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateLibraryRequestModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateLibraryRequestModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateLibraryRequestModel" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="folders">folders (required).</param>
        /// <param name="icon">icon (default to &quot;database&quot;).</param>
        /// <param name="mediaType">mediaType (default to MediaTypeEnum.Book).</param>
        /// <param name="provider">provider (default to &quot;google&quot;).</param>
        /// <param name="settings">settings.</param>
        public CreateLibraryRequestModel(string name = default(string), List<CreateLibraryRequestFoldersInnerModel> folders = default(List<CreateLibraryRequestFoldersInnerModel>), string icon = @"database", MediaTypeEnum? mediaType = MediaTypeEnum.Book, string provider = @"google", CreateLibraryRequestSettingsModel settings = default(CreateLibraryRequestSettingsModel))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateLibraryRequestModel and cannot be null");
            }
            this.Name = name;
            // to ensure "folders" is required (not null)
            if (folders == null)
            {
                throw new ArgumentNullException("folders is a required property for CreateLibraryRequestModel and cannot be null");
            }
            this.Folders = folders;
            // use default value if no "icon" provided
            this.Icon = icon ?? @"database";
            this.MediaType = mediaType;
            // use default value if no "provider" provided
            this.Provider = provider ?? @"google";
            this.Settings = settings;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Folders
        /// </summary>
        [DataMember(Name = "folders", IsRequired = true, EmitDefaultValue = true)]
        public List<CreateLibraryRequestFoldersInnerModel> Folders { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name = "provider", EmitDefaultValue = false)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name = "settings", EmitDefaultValue = false)]
        public CreateLibraryRequestSettingsModel Settings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateLibraryRequestModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Folders: ").Append(Folders).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
