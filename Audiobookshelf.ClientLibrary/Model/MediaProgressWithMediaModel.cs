/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// Media Progress with media included.
    /// </summary>
    [DataContract(Name = "MediaProgressWithMedia")]
    public partial class MediaProgressWithMediaModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaProgressWithMediaModel" /> class.
        /// </summary>
        /// <param name="id">The ID of the media progress. For podcasts it&#39;s libraryItemId-episodeId..</param>
        /// <param name="libraryItemId">The ID of the library item..</param>
        /// <param name="episodeId">The ID of the podcast episode. Null if for a book..</param>
        /// <param name="duration">Total duration in seconds..</param>
        /// <param name="progress">Percentage completion progress. 1 if finished..</param>
        /// <param name="currentTime">Current time in seconds..</param>
        /// <param name="isFinished">Whether the media is finished..</param>
        /// <param name="hideFromContinueListening">Whether to hide from &#39;Continue Listening&#39;..</param>
        /// <param name="lastUpdate">When progress was last updated..</param>
        /// <param name="startedAt">When progress was created..</param>
        /// <param name="finishedAt">When media was finished..</param>
        /// <param name="media">media.</param>
        /// <param name="episode">episode.</param>
        public MediaProgressWithMediaModel(string id = default(string), string libraryItemId = default(string), string episodeId = default(string), decimal duration = default(decimal), decimal progress = default(decimal), decimal currentTime = default(decimal), bool isFinished = default(bool), bool hideFromContinueListening = default(bool), long lastUpdate = default(long), long startedAt = default(long), long? finishedAt = default(long?), MediaProgressWithMediaMediaModel media = default(MediaProgressWithMediaMediaModel), PodcastEpisodeModel episode = default(PodcastEpisodeModel))
        {
            this.Id = id;
            this.LibraryItemId = libraryItemId;
            this.EpisodeId = episodeId;
            this.Duration = duration;
            this.Progress = progress;
            this.CurrentTime = currentTime;
            this.IsFinished = isFinished;
            this.HideFromContinueListening = hideFromContinueListening;
            this.LastUpdate = lastUpdate;
            this.StartedAt = startedAt;
            this.FinishedAt = finishedAt;
            this.Media = media;
            this.Episode = episode;
        }

        /// <summary>
        /// The ID of the media progress. For podcasts it&#39;s libraryItemId-episodeId.
        /// </summary>
        /// <value>The ID of the media progress. For podcasts it&#39;s libraryItemId-episodeId.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the library item.
        /// </summary>
        /// <value>The ID of the library item.</value>
        [DataMember(Name = "libraryItemId", EmitDefaultValue = false)]
        public string LibraryItemId { get; set; }

        /// <summary>
        /// The ID of the podcast episode. Null if for a book.
        /// </summary>
        /// <value>The ID of the podcast episode. Null if for a book.</value>
        [DataMember(Name = "episodeId", EmitDefaultValue = true)]
        public string EpisodeId { get; set; }

        /// <summary>
        /// Total duration in seconds.
        /// </summary>
        /// <value>Total duration in seconds.</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public decimal Duration { get; set; }

        /// <summary>
        /// Percentage completion progress. 1 if finished.
        /// </summary>
        /// <value>Percentage completion progress. 1 if finished.</value>
        [DataMember(Name = "progress", EmitDefaultValue = false)]
        public decimal Progress { get; set; }

        /// <summary>
        /// Current time in seconds.
        /// </summary>
        /// <value>Current time in seconds.</value>
        [DataMember(Name = "currentTime", EmitDefaultValue = false)]
        public decimal CurrentTime { get; set; }

        /// <summary>
        /// Whether the media is finished.
        /// </summary>
        /// <value>Whether the media is finished.</value>
        [DataMember(Name = "isFinished", EmitDefaultValue = true)]
        public bool IsFinished { get; set; }

        /// <summary>
        /// Whether to hide from &#39;Continue Listening&#39;.
        /// </summary>
        /// <value>Whether to hide from &#39;Continue Listening&#39;.</value>
        [DataMember(Name = "hideFromContinueListening", EmitDefaultValue = true)]
        public bool HideFromContinueListening { get; set; }

        /// <summary>
        /// When progress was last updated.
        /// </summary>
        /// <value>When progress was last updated.</value>
        [DataMember(Name = "lastUpdate", EmitDefaultValue = false)]
        public long LastUpdate { get; set; }

        /// <summary>
        /// When progress was created.
        /// </summary>
        /// <value>When progress was created.</value>
        [DataMember(Name = "startedAt", EmitDefaultValue = false)]
        public long StartedAt { get; set; }

        /// <summary>
        /// When media was finished.
        /// </summary>
        /// <value>When media was finished.</value>
        [DataMember(Name = "finishedAt", EmitDefaultValue = true)]
        public long? FinishedAt { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public MediaProgressWithMediaMediaModel Media { get; set; }

        /// <summary>
        /// Gets or Sets Episode
        /// </summary>
        [DataMember(Name = "episode", EmitDefaultValue = false)]
        public PodcastEpisodeModel Episode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MediaProgressWithMediaModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LibraryItemId: ").Append(LibraryItemId).Append("\n");
            sb.Append("  EpisodeId: ").Append(EpisodeId).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  CurrentTime: ").Append(CurrentTime).Append("\n");
            sb.Append("  IsFinished: ").Append(IsFinished).Append("\n");
            sb.Append("  HideFromContinueListening: ").Append(HideFromContinueListening).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Episode: ").Append(Episode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
