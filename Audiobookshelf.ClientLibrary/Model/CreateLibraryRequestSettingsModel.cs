/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// CreateLibraryRequestSettingsModel
    /// </summary>
    [DataContract(Name = "CreateLibraryRequest_settings")]
    public partial class CreateLibraryRequestSettingsModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateLibraryRequestSettingsModel" /> class.
        /// </summary>
        /// <param name="coverAspectRatio">coverAspectRatio (default to 1).</param>
        /// <param name="disableWatcher">disableWatcher (default to false).</param>
        /// <param name="skipMatchingMediaWithAsin">skipMatchingMediaWithAsin (default to false).</param>
        /// <param name="skipMatchingMediaWithIsbn">skipMatchingMediaWithIsbn (default to false).</param>
        /// <param name="autoScanCronExpression">autoScanCronExpression.</param>
        public CreateLibraryRequestSettingsModel(int coverAspectRatio = 1, bool disableWatcher = false, bool skipMatchingMediaWithAsin = false, bool skipMatchingMediaWithIsbn = false, string autoScanCronExpression = default(string))
        {
            this.CoverAspectRatio = coverAspectRatio;
            this.DisableWatcher = disableWatcher;
            this.SkipMatchingMediaWithAsin = skipMatchingMediaWithAsin;
            this.SkipMatchingMediaWithIsbn = skipMatchingMediaWithIsbn;
            this.AutoScanCronExpression = autoScanCronExpression;
        }

        /// <summary>
        /// Gets or Sets CoverAspectRatio
        /// </summary>
        [DataMember(Name = "coverAspectRatio", EmitDefaultValue = false)]
        public int CoverAspectRatio { get; set; }

        /// <summary>
        /// Gets or Sets DisableWatcher
        /// </summary>
        [DataMember(Name = "disableWatcher", EmitDefaultValue = true)]
        public bool DisableWatcher { get; set; }

        /// <summary>
        /// Gets or Sets SkipMatchingMediaWithAsin
        /// </summary>
        [DataMember(Name = "skipMatchingMediaWithAsin", EmitDefaultValue = true)]
        public bool SkipMatchingMediaWithAsin { get; set; }

        /// <summary>
        /// Gets or Sets SkipMatchingMediaWithIsbn
        /// </summary>
        [DataMember(Name = "skipMatchingMediaWithIsbn", EmitDefaultValue = true)]
        public bool SkipMatchingMediaWithIsbn { get; set; }

        /// <summary>
        /// Gets or Sets AutoScanCronExpression
        /// </summary>
        [DataMember(Name = "autoScanCronExpression", EmitDefaultValue = true)]
        public string AutoScanCronExpression { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateLibraryRequestSettingsModel {\n");
            sb.Append("  CoverAspectRatio: ").Append(CoverAspectRatio).Append("\n");
            sb.Append("  DisableWatcher: ").Append(DisableWatcher).Append("\n");
            sb.Append("  SkipMatchingMediaWithAsin: ").Append(SkipMatchingMediaWithAsin).Append("\n");
            sb.Append("  SkipMatchingMediaWithIsbn: ").Append(SkipMatchingMediaWithIsbn).Append("\n");
            sb.Append("  AutoScanCronExpression: ").Append(AutoScanCronExpression).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
