/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// Filter data for a library.
    /// </summary>
    [DataContract(Name = "LibraryFilterData")]
    public partial class LibraryFilterDataModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryFilterDataModel" /> class.
        /// </summary>
        /// <param name="authors">The authors of books in the library..</param>
        /// <param name="genres">The genres of books in the library..</param>
        /// <param name="tags">The tags in the library..</param>
        /// <param name="series">The series in the library. The series will only have their id and name..</param>
        /// <param name="narrators">The narrators of books in the library..</param>
        /// <param name="languages">The languages of books in the library..</param>
        public LibraryFilterDataModel(List<AuthorMinifiedModel> authors = default(List<AuthorMinifiedModel>), List<string> genres = default(List<string>), List<string> tags = default(List<string>), List<SeriesModel> series = default(List<SeriesModel>), List<string> narrators = default(List<string>), List<string> languages = default(List<string>))
        {
            this.Authors = authors;
            this.Genres = genres;
            this.Tags = tags;
            this.Series = series;
            this.Narrators = narrators;
            this.Languages = languages;
        }

        /// <summary>
        /// The authors of books in the library.
        /// </summary>
        /// <value>The authors of books in the library.</value>
        [DataMember(Name = "authors", EmitDefaultValue = false)]
        public List<AuthorMinifiedModel> Authors { get; set; }

        /// <summary>
        /// The genres of books in the library.
        /// </summary>
        /// <value>The genres of books in the library.</value>
        [DataMember(Name = "genres", EmitDefaultValue = false)]
        public List<string> Genres { get; set; }

        /// <summary>
        /// The tags in the library.
        /// </summary>
        /// <value>The tags in the library.</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// The series in the library. The series will only have their id and name.
        /// </summary>
        /// <value>The series in the library. The series will only have their id and name.</value>
        [DataMember(Name = "series", EmitDefaultValue = false)]
        public List<SeriesModel> Series { get; set; }

        /// <summary>
        /// The narrators of books in the library.
        /// </summary>
        /// <value>The narrators of books in the library.</value>
        [DataMember(Name = "narrators", EmitDefaultValue = false)]
        public List<string> Narrators { get; set; }

        /// <summary>
        /// The languages of books in the library.
        /// </summary>
        /// <value>The languages of books in the library.</value>
        [DataMember(Name = "languages", EmitDefaultValue = false)]
        public List<string> Languages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LibraryFilterDataModel {\n");
            sb.Append("  Authors: ").Append(Authors).Append("\n");
            sb.Append("  Genres: ").Append(Genres).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("  Narrators: ").Append(Narrators).Append("\n");
            sb.Append("  Languages: ").Append(Languages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
