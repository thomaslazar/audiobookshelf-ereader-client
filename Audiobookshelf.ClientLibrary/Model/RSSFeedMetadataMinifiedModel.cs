/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// Minified RSS Feed Metadata
    /// </summary>
    [DataContract(Name = "RSSFeedMetadataMinified")]
    public partial class RSSFeedMetadataMinifiedModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RSSFeedMetadataMinifiedModel" /> class.
        /// </summary>
        /// <param name="title">The title of the entity..</param>
        /// <param name="description">The description..</param>
        /// <param name="preventIndexing">Whether indexing is prevented..</param>
        /// <param name="ownerName">The owner name..</param>
        /// <param name="ownerEmail">The owner email..</param>
        public RSSFeedMetadataMinifiedModel(string title = default(string), string description = default(string), bool preventIndexing = default(bool), string ownerName = default(string), string ownerEmail = default(string))
        {
            this.Title = title;
            this.Description = description;
            this.PreventIndexing = preventIndexing;
            this.OwnerName = ownerName;
            this.OwnerEmail = ownerEmail;
        }

        /// <summary>
        /// The title of the entity.
        /// </summary>
        /// <value>The title of the entity.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The description.
        /// </summary>
        /// <value>The description.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Whether indexing is prevented.
        /// </summary>
        /// <value>Whether indexing is prevented.</value>
        [DataMember(Name = "preventIndexing", EmitDefaultValue = true)]
        public bool PreventIndexing { get; set; }

        /// <summary>
        /// The owner name.
        /// </summary>
        /// <value>The owner name.</value>
        [DataMember(Name = "ownerName", EmitDefaultValue = true)]
        public string OwnerName { get; set; }

        /// <summary>
        /// The owner email.
        /// </summary>
        /// <value>The owner email.</value>
        [DataMember(Name = "ownerEmail", EmitDefaultValue = true)]
        public string OwnerEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RSSFeedMetadataMinifiedModel {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PreventIndexing: ").Append(PreventIndexing).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  OwnerEmail: ").Append(OwnerEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
