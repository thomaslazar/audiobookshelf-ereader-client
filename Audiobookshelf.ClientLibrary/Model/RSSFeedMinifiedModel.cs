/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// Minified RSS Feed
    /// </summary>
    [DataContract(Name = "RSSFeedMinified")]
    public partial class RSSFeedMinifiedModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RSSFeedMinifiedModel" /> class.
        /// </summary>
        /// <param name="id">The ID of the RSS feed..</param>
        /// <param name="entityType">The type of entity the RSS feed is for..</param>
        /// <param name="entityId">The ID of the entity the RSS feed is for..</param>
        /// <param name="feedUrl">The full URL of the RSS feed..</param>
        /// <param name="meta">meta.</param>
        public RSSFeedMinifiedModel(string id = default(string), string entityType = default(string), string entityId = default(string), string feedUrl = default(string), RSSFeedMetadataMinifiedModel meta = default(RSSFeedMetadataMinifiedModel))
        {
            this.Id = id;
            this.EntityType = entityType;
            this.EntityId = entityId;
            this.FeedUrl = feedUrl;
            this.Meta = meta;
        }

        /// <summary>
        /// The ID of the RSS feed.
        /// </summary>
        /// <value>The ID of the RSS feed.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The type of entity the RSS feed is for.
        /// </summary>
        /// <value>The type of entity the RSS feed is for.</value>
        [DataMember(Name = "entityType", EmitDefaultValue = false)]
        public string EntityType { get; set; }

        /// <summary>
        /// The ID of the entity the RSS feed is for.
        /// </summary>
        /// <value>The ID of the entity the RSS feed is for.</value>
        [DataMember(Name = "entityId", EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        /// The full URL of the RSS feed.
        /// </summary>
        /// <value>The full URL of the RSS feed.</value>
        [DataMember(Name = "feedUrl", EmitDefaultValue = false)]
        public string FeedUrl { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", EmitDefaultValue = false)]
        public RSSFeedMetadataMinifiedModel Meta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RSSFeedMinifiedModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  FeedUrl: ").Append(FeedUrl).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
