/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// GetListeningStatsResponseModel
    /// </summary>
    [DataContract(Name = "GetListeningStatsResponse")]
    public partial class GetListeningStatsResponseModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetListeningStatsResponseModel" /> class.
        /// </summary>
        /// <param name="totalTime">The total time (in seconds) you have listened to library items..</param>
        /// <param name="items">items.</param>
        /// <param name="days">days.</param>
        /// <param name="dayOfWeek">dayOfWeek.</param>
        /// <param name="today">The time (in seconds) you have listened to library items today..</param>
        /// <param name="recentSessions">recentSessions.</param>
        public GetListeningStatsResponseModel(int totalTime = default(int), Dictionary<string, GetListeningStatsResponseItemsValueModel> items = default(Dictionary<string, GetListeningStatsResponseItemsValueModel>), Dictionary<string, int> days = default(Dictionary<string, int>), Dictionary<string, int> dayOfWeek = default(Dictionary<string, int>), int today = default(int), List<PlaybackSessionModel> recentSessions = default(List<PlaybackSessionModel>))
        {
            this.TotalTime = totalTime;
            this.Items = items;
            this.Days = days;
            this.DayOfWeek = dayOfWeek;
            this.Today = today;
            this.RecentSessions = recentSessions;
        }

        /// <summary>
        /// The total time (in seconds) you have listened to library items.
        /// </summary>
        /// <value>The total time (in seconds) you have listened to library items.</value>
        [DataMember(Name = "totalTime", EmitDefaultValue = false)]
        public int TotalTime { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public Dictionary<string, GetListeningStatsResponseItemsValueModel> Items { get; set; }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name = "days", EmitDefaultValue = false)]
        public Dictionary<string, int> Days { get; set; }

        /// <summary>
        /// Gets or Sets DayOfWeek
        /// </summary>
        [DataMember(Name = "dayOfWeek", EmitDefaultValue = false)]
        public Dictionary<string, int> DayOfWeek { get; set; }

        /// <summary>
        /// The time (in seconds) you have listened to library items today.
        /// </summary>
        /// <value>The time (in seconds) you have listened to library items today.</value>
        [DataMember(Name = "today", EmitDefaultValue = false)]
        public int Today { get; set; }

        /// <summary>
        /// Gets or Sets RecentSessions
        /// </summary>
        [DataMember(Name = "recentSessions", EmitDefaultValue = false)]
        public List<PlaybackSessionModel> RecentSessions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetListeningStatsResponseModel {\n");
            sb.Append("  TotalTime: ").Append(TotalTime).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
            sb.Append("  Today: ").Append(Today).Append("\n");
            sb.Append("  RecentSessions: ").Append(RecentSessions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
