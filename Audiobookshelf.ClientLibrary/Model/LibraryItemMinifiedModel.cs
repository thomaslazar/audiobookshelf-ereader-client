/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// A minified form of a library item.
    /// </summary>
    [DataContract(Name = "LibraryItemMinified")]
    public partial class LibraryItemMinifiedModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryItemMinifiedModel" /> class.
        /// </summary>
        /// <param name="id">The ID of the library item..</param>
        /// <param name="ino">The inode of the library item..</param>
        /// <param name="libraryId">The ID of the library..</param>
        /// <param name="folderId">The ID of the folder..</param>
        /// <param name="path">The path of the library item on the server..</param>
        /// <param name="relPath">The relative path of the library item..</param>
        /// <param name="isFile">Whether the library item is a single file..</param>
        /// <param name="mtimeMs">Last modified time (ms since epoch)..</param>
        /// <param name="ctimeMs">Change time (ms since epoch)..</param>
        /// <param name="birthtimeMs">Creation time (ms since epoch). Will be 0 if unknown..</param>
        /// <param name="addedAt">Time the item was added to the library..</param>
        /// <param name="updatedAt">Time when item was last updated..</param>
        /// <param name="isMissing">True if item no longer exists..</param>
        /// <param name="isInvalid">True if item no longer has media files..</param>
        /// <param name="mediaType">What kind of media the item contains (book or podcast)..</param>
        /// <param name="media">media.</param>
        /// <param name="numFiles">The number of library files..</param>
        /// <param name="size">Total size (in bytes) of the item..</param>
        public LibraryItemMinifiedModel(string id = default(string), string ino = default(string), string libraryId = default(string), string folderId = default(string), string path = default(string), string relPath = default(string), bool isFile = default(bool), long mtimeMs = default(long), long ctimeMs = default(long), long birthtimeMs = default(long), long addedAt = default(long), long updatedAt = default(long), bool isMissing = default(bool), bool isInvalid = default(bool), string mediaType = default(string), LibraryItemMinifiedMediaModel media = default(LibraryItemMinifiedMediaModel), int numFiles = default(int), int size = default(int))
        {
            this.Id = id;
            this.Ino = ino;
            this.LibraryId = libraryId;
            this.FolderId = folderId;
            this.Path = path;
            this.RelPath = relPath;
            this.IsFile = isFile;
            this.MtimeMs = mtimeMs;
            this.CtimeMs = ctimeMs;
            this.BirthtimeMs = birthtimeMs;
            this.AddedAt = addedAt;
            this.UpdatedAt = updatedAt;
            this.IsMissing = isMissing;
            this.IsInvalid = isInvalid;
            this.MediaType = mediaType;
            this.Media = media;
            this.NumFiles = numFiles;
            this.Size = size;
        }

        /// <summary>
        /// The ID of the library item.
        /// </summary>
        /// <value>The ID of the library item.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The inode of the library item.
        /// </summary>
        /// <value>The inode of the library item.</value>
        [DataMember(Name = "ino", EmitDefaultValue = false)]
        public string Ino { get; set; }

        /// <summary>
        /// The ID of the library.
        /// </summary>
        /// <value>The ID of the library.</value>
        [DataMember(Name = "libraryId", EmitDefaultValue = false)]
        public string LibraryId { get; set; }

        /// <summary>
        /// The ID of the folder.
        /// </summary>
        /// <value>The ID of the folder.</value>
        [DataMember(Name = "folderId", EmitDefaultValue = false)]
        public string FolderId { get; set; }

        /// <summary>
        /// The path of the library item on the server.
        /// </summary>
        /// <value>The path of the library item on the server.</value>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// The relative path of the library item.
        /// </summary>
        /// <value>The relative path of the library item.</value>
        [DataMember(Name = "relPath", EmitDefaultValue = false)]
        public string RelPath { get; set; }

        /// <summary>
        /// Whether the library item is a single file.
        /// </summary>
        /// <value>Whether the library item is a single file.</value>
        [DataMember(Name = "isFile", EmitDefaultValue = true)]
        public bool IsFile { get; set; }

        /// <summary>
        /// Last modified time (ms since epoch).
        /// </summary>
        /// <value>Last modified time (ms since epoch).</value>
        [DataMember(Name = "mtimeMs", EmitDefaultValue = false)]
        public long MtimeMs { get; set; }

        /// <summary>
        /// Change time (ms since epoch).
        /// </summary>
        /// <value>Change time (ms since epoch).</value>
        [DataMember(Name = "ctimeMs", EmitDefaultValue = false)]
        public long CtimeMs { get; set; }

        /// <summary>
        /// Creation time (ms since epoch). Will be 0 if unknown.
        /// </summary>
        /// <value>Creation time (ms since epoch). Will be 0 if unknown.</value>
        [DataMember(Name = "birthtimeMs", EmitDefaultValue = false)]
        public long BirthtimeMs { get; set; }

        /// <summary>
        /// Time the item was added to the library.
        /// </summary>
        /// <value>Time the item was added to the library.</value>
        [DataMember(Name = "addedAt", EmitDefaultValue = false)]
        public long AddedAt { get; set; }

        /// <summary>
        /// Time when item was last updated.
        /// </summary>
        /// <value>Time when item was last updated.</value>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public long UpdatedAt { get; set; }

        /// <summary>
        /// True if item no longer exists.
        /// </summary>
        /// <value>True if item no longer exists.</value>
        [DataMember(Name = "isMissing", EmitDefaultValue = true)]
        public bool IsMissing { get; set; }

        /// <summary>
        /// True if item no longer has media files.
        /// </summary>
        /// <value>True if item no longer has media files.</value>
        [DataMember(Name = "isInvalid", EmitDefaultValue = true)]
        public bool IsInvalid { get; set; }

        /// <summary>
        /// What kind of media the item contains (book or podcast).
        /// </summary>
        /// <value>What kind of media the item contains (book or podcast).</value>
        [DataMember(Name = "mediaType", EmitDefaultValue = false)]
        public string MediaType { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public LibraryItemMinifiedMediaModel Media { get; set; }

        /// <summary>
        /// The number of library files.
        /// </summary>
        /// <value>The number of library files.</value>
        [DataMember(Name = "numFiles", EmitDefaultValue = false)]
        public int NumFiles { get; set; }

        /// <summary>
        /// Total size (in bytes) of the item.
        /// </summary>
        /// <value>Total size (in bytes) of the item.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LibraryItemMinifiedModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Ino: ").Append(Ino).Append("\n");
            sb.Append("  LibraryId: ").Append(LibraryId).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  RelPath: ").Append(RelPath).Append("\n");
            sb.Append("  IsFile: ").Append(IsFile).Append("\n");
            sb.Append("  MtimeMs: ").Append(MtimeMs).Append("\n");
            sb.Append("  CtimeMs: ").Append(CtimeMs).Append("\n");
            sb.Append("  BirthtimeMs: ").Append(BirthtimeMs).Append("\n");
            sb.Append("  AddedAt: ").Append(AddedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  IsMissing: ").Append(IsMissing).Append("\n");
            sb.Append("  IsInvalid: ").Append(IsInvalid).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  NumFiles: ").Append(NumFiles).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
