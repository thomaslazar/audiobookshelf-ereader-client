/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// An RSS feed episode enclosure info.
    /// </summary>
    [DataContract(Name = "RSSFeedEpisodeEnclosure")]
    public partial class RSSFeedEpisodeEnclosureModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RSSFeedEpisodeEnclosureModel" /> class.
        /// </summary>
        /// <param name="url">The URL where the RSS feed episode&#39;s audio file was downloaded from..</param>
        /// <param name="type">The MIME type of the RSS feed episode&#39;s audio file..</param>
        /// <param name="length">The size (in bytes) that was reported when downloading the RSS feed episode&#39;s audio file..</param>
        public RSSFeedEpisodeEnclosureModel(string url = default(string), string type = default(string), string length = default(string))
        {
            this.Url = url;
            this.Type = type;
            this.Length = length;
        }

        /// <summary>
        /// The URL where the RSS feed episode&#39;s audio file was downloaded from.
        /// </summary>
        /// <value>The URL where the RSS feed episode&#39;s audio file was downloaded from.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// The MIME type of the RSS feed episode&#39;s audio file.
        /// </summary>
        /// <value>The MIME type of the RSS feed episode&#39;s audio file.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// The size (in bytes) that was reported when downloading the RSS feed episode&#39;s audio file.
        /// </summary>
        /// <value>The size (in bytes) that was reported when downloading the RSS feed episode&#39;s audio file.</value>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public string Length { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RSSFeedEpisodeEnclosureModel {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
