/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// BatchUpdateMediaProgressRequestInnerModel
    /// </summary>
    [DataContract(Name = "BatchUpdateMediaProgressRequest_inner")]
    public partial class BatchUpdateMediaProgressRequestInnerModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchUpdateMediaProgressRequestInnerModel" /> class.
        /// </summary>
        /// <param name="libraryItemId">The ID of the library item the media progress is for..</param>
        /// <param name="episodeId">The ID of the podcast episode the media progress is for..</param>
        /// <param name="duration">The total duration (in seconds) of the media..</param>
        /// <param name="progress">The percentage completion progress of the media..</param>
        /// <param name="currentTime">The current time (in seconds) of your progress..</param>
        /// <param name="isFinished">Whether the media is finished..</param>
        /// <param name="hideFromContinueListening">Whether the media will be hidden from the \&quot;Continue Listening\&quot; shelf..</param>
        /// <param name="finishedAt">The time (in ms since POSIX epoch) when the user finished the media..</param>
        /// <param name="startedAt">The time (in ms since POSIX epoch) when the user started consuming the media..</param>
        public BatchUpdateMediaProgressRequestInnerModel(string libraryItemId = default(string), string episodeId = default(string), float duration = default(float), float progress = default(float), float currentTime = default(float), bool isFinished = default(bool), bool hideFromContinueListening = default(bool), long? finishedAt = default(long?), long startedAt = default(long))
        {
            this.LibraryItemId = libraryItemId;
            this.EpisodeId = episodeId;
            this.Duration = duration;
            this.Progress = progress;
            this.CurrentTime = currentTime;
            this.IsFinished = isFinished;
            this.HideFromContinueListening = hideFromContinueListening;
            this.FinishedAt = finishedAt;
            this.StartedAt = startedAt;
        }

        /// <summary>
        /// The ID of the library item the media progress is for.
        /// </summary>
        /// <value>The ID of the library item the media progress is for.</value>
        [DataMember(Name = "libraryItemId", EmitDefaultValue = false)]
        public string LibraryItemId { get; set; }

        /// <summary>
        /// The ID of the podcast episode the media progress is for.
        /// </summary>
        /// <value>The ID of the podcast episode the media progress is for.</value>
        [DataMember(Name = "episodeId", EmitDefaultValue = true)]
        public string EpisodeId { get; set; }

        /// <summary>
        /// The total duration (in seconds) of the media.
        /// </summary>
        /// <value>The total duration (in seconds) of the media.</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public float Duration { get; set; }

        /// <summary>
        /// The percentage completion progress of the media.
        /// </summary>
        /// <value>The percentage completion progress of the media.</value>
        [DataMember(Name = "progress", EmitDefaultValue = false)]
        public float Progress { get; set; }

        /// <summary>
        /// The current time (in seconds) of your progress.
        /// </summary>
        /// <value>The current time (in seconds) of your progress.</value>
        [DataMember(Name = "currentTime", EmitDefaultValue = false)]
        public float CurrentTime { get; set; }

        /// <summary>
        /// Whether the media is finished.
        /// </summary>
        /// <value>Whether the media is finished.</value>
        [DataMember(Name = "isFinished", EmitDefaultValue = true)]
        public bool IsFinished { get; set; }

        /// <summary>
        /// Whether the media will be hidden from the \&quot;Continue Listening\&quot; shelf.
        /// </summary>
        /// <value>Whether the media will be hidden from the \&quot;Continue Listening\&quot; shelf.</value>
        [DataMember(Name = "hideFromContinueListening", EmitDefaultValue = true)]
        public bool HideFromContinueListening { get; set; }

        /// <summary>
        /// The time (in ms since POSIX epoch) when the user finished the media.
        /// </summary>
        /// <value>The time (in ms since POSIX epoch) when the user finished the media.</value>
        [DataMember(Name = "finishedAt", EmitDefaultValue = true)]
        public long? FinishedAt { get; set; }

        /// <summary>
        /// The time (in ms since POSIX epoch) when the user started consuming the media.
        /// </summary>
        /// <value>The time (in ms since POSIX epoch) when the user started consuming the media.</value>
        [DataMember(Name = "startedAt", EmitDefaultValue = false)]
        public long StartedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BatchUpdateMediaProgressRequestInnerModel {\n");
            sb.Append("  LibraryItemId: ").Append(LibraryItemId).Append("\n");
            sb.Append("  EpisodeId: ").Append(EpisodeId).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  CurrentTime: ").Append(CurrentTime).Append("\n");
            sb.Append("  IsFinished: ").Append(IsFinished).Append("\n");
            sb.Append("  HideFromContinueListening: ").Append(HideFromContinueListening).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
