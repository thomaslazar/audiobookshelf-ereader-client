/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// Minified Podcast Feed Metadata
    /// </summary>
    [DataContract(Name = "PodcastFeedMetadataMinified")]
    public partial class PodcastFeedMetadataMinifiedModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PodcastFeedMetadataMinifiedModel" /> class.
        /// </summary>
        /// <param name="title">The podcast&#39;s title..</param>
        /// <param name="description">The description of the podcast..</param>
        /// <param name="preventIndexing">Whether indexing of the feed is prevented..</param>
        /// <param name="ownerName">The owner name of the RSS feed..</param>
        /// <param name="ownerEmail">The owner email of the RSS feed..</param>
        public PodcastFeedMetadataMinifiedModel(string title = default(string), string description = default(string), bool preventIndexing = default(bool), string ownerName = default(string), string ownerEmail = default(string))
        {
            this.Title = title;
            this.Description = description;
            this.PreventIndexing = preventIndexing;
            this.OwnerName = ownerName;
            this.OwnerEmail = ownerEmail;
        }

        /// <summary>
        /// The podcast&#39;s title.
        /// </summary>
        /// <value>The podcast&#39;s title.</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The description of the podcast.
        /// </summary>
        /// <value>The description of the podcast.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Whether indexing of the feed is prevented.
        /// </summary>
        /// <value>Whether indexing of the feed is prevented.</value>
        [DataMember(Name = "preventIndexing", EmitDefaultValue = true)]
        public bool PreventIndexing { get; set; }

        /// <summary>
        /// The owner name of the RSS feed.
        /// </summary>
        /// <value>The owner name of the RSS feed.</value>
        [DataMember(Name = "ownerName", EmitDefaultValue = true)]
        public string OwnerName { get; set; }

        /// <summary>
        /// The owner email of the RSS feed.
        /// </summary>
        /// <value>The owner email of the RSS feed.</value>
        [DataMember(Name = "ownerEmail", EmitDefaultValue = true)]
        public string OwnerEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PodcastFeedMetadataMinifiedModel {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PreventIndexing: ").Append(PreventIndexing).Append("\n");
            sb.Append("  OwnerName: ").Append(OwnerName).Append("\n");
            sb.Append("  OwnerEmail: ").Append(OwnerEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
