/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// StatusResponseModel
    /// </summary>
    [DataContract(Name = "StatusResponse")]
    public partial class StatusResponseModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusResponseModel" /> class.
        /// </summary>
        /// <param name="isInit">Whether the server has been initialized.</param>
        /// <param name="language">The server&#39;s default language.</param>
        /// <param name="configPath">The server&#39;s config path (only if isInit is false).</param>
        /// <param name="metadataPath">The server&#39;s metadata path (only if isInit is false).</param>
        public StatusResponseModel(bool isInit = default(bool), string language = default(string), string configPath = default(string), string metadataPath = default(string))
        {
            this.IsInit = isInit;
            this.Language = language;
            this.ConfigPath = configPath;
            this.MetadataPath = metadataPath;
        }

        /// <summary>
        /// Whether the server has been initialized
        /// </summary>
        /// <value>Whether the server has been initialized</value>
        [DataMember(Name = "isInit", EmitDefaultValue = true)]
        public bool IsInit { get; set; }

        /// <summary>
        /// The server&#39;s default language
        /// </summary>
        /// <value>The server&#39;s default language</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// The server&#39;s config path (only if isInit is false)
        /// </summary>
        /// <value>The server&#39;s config path (only if isInit is false)</value>
        [DataMember(Name = "ConfigPath", EmitDefaultValue = false)]
        public string ConfigPath { get; set; }

        /// <summary>
        /// The server&#39;s metadata path (only if isInit is false)
        /// </summary>
        /// <value>The server&#39;s metadata path (only if isInit is false)</value>
        [DataMember(Name = "MetadataPath", EmitDefaultValue = false)]
        public string MetadataPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatusResponseModel {\n");
            sb.Append("  IsInit: ").Append(IsInit).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  ConfigPath: ").Append(ConfigPath).Append("\n");
            sb.Append("  MetadataPath: ").Append(MetadataPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
