/*
 * Audiobookshelf API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Audiobookshelf.ClientLibrary.Client.OpenAPIDateConverter;

namespace Audiobookshelf.ClientLibrary.Model
{
    /// <summary>
    /// Expanded Podcast.
    /// </summary>
    [DataContract(Name = "PodcastExpanded")]
    public partial class PodcastExpandedModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PodcastExpandedModel" /> class.
        /// </summary>
        /// <param name="libraryItemId">ID of library item..</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="coverPath">coverPath.</param>
        /// <param name="tags">tags.</param>
        /// <param name="episodes">episodes.</param>
        /// <param name="autoDownloadEpisodes">autoDownloadEpisodes.</param>
        /// <param name="autoDownloadSchedule">autoDownloadSchedule.</param>
        /// <param name="lastEpisodeCheck">lastEpisodeCheck.</param>
        /// <param name="maxEpisodesToKeep">maxEpisodesToKeep.</param>
        /// <param name="maxNewEpisodesToDownload">maxNewEpisodesToDownload.</param>
        /// <param name="size">size.</param>
        public PodcastExpandedModel(string libraryItemId = default(string), PodcastMetadataExpandedModel metadata = default(PodcastMetadataExpandedModel), string coverPath = default(string), List<string> tags = default(List<string>), List<PodcastEpisodeExpandedModel> episodes = default(List<PodcastEpisodeExpandedModel>), bool autoDownloadEpisodes = default(bool), string autoDownloadSchedule = default(string), long lastEpisodeCheck = default(long), int maxEpisodesToKeep = default(int), int maxNewEpisodesToDownload = default(int), int size = default(int))
        {
            this.LibraryItemId = libraryItemId;
            this.Metadata = metadata;
            this.CoverPath = coverPath;
            this.Tags = tags;
            this.Episodes = episodes;
            this.AutoDownloadEpisodes = autoDownloadEpisodes;
            this.AutoDownloadSchedule = autoDownloadSchedule;
            this.LastEpisodeCheck = lastEpisodeCheck;
            this.MaxEpisodesToKeep = maxEpisodesToKeep;
            this.MaxNewEpisodesToDownload = maxNewEpisodesToDownload;
            this.Size = size;
        }

        /// <summary>
        /// ID of library item.
        /// </summary>
        /// <value>ID of library item.</value>
        [DataMember(Name = "libraryItemId", EmitDefaultValue = false)]
        public string LibraryItemId { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public PodcastMetadataExpandedModel Metadata { get; set; }

        /// <summary>
        /// Gets or Sets CoverPath
        /// </summary>
        [DataMember(Name = "coverPath", EmitDefaultValue = true)]
        public string CoverPath { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Episodes
        /// </summary>
        [DataMember(Name = "episodes", EmitDefaultValue = false)]
        public List<PodcastEpisodeExpandedModel> Episodes { get; set; }

        /// <summary>
        /// Gets or Sets AutoDownloadEpisodes
        /// </summary>
        [DataMember(Name = "autoDownloadEpisodes", EmitDefaultValue = true)]
        public bool AutoDownloadEpisodes { get; set; }

        /// <summary>
        /// Gets or Sets AutoDownloadSchedule
        /// </summary>
        [DataMember(Name = "autoDownloadSchedule", EmitDefaultValue = true)]
        public string AutoDownloadSchedule { get; set; }

        /// <summary>
        /// Gets or Sets LastEpisodeCheck
        /// </summary>
        [DataMember(Name = "lastEpisodeCheck", EmitDefaultValue = false)]
        public long LastEpisodeCheck { get; set; }

        /// <summary>
        /// Gets or Sets MaxEpisodesToKeep
        /// </summary>
        [DataMember(Name = "maxEpisodesToKeep", EmitDefaultValue = false)]
        public int MaxEpisodesToKeep { get; set; }

        /// <summary>
        /// Gets or Sets MaxNewEpisodesToDownload
        /// </summary>
        [DataMember(Name = "maxNewEpisodesToDownload", EmitDefaultValue = false)]
        public int MaxNewEpisodesToDownload { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PodcastExpandedModel {\n");
            sb.Append("  LibraryItemId: ").Append(LibraryItemId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CoverPath: ").Append(CoverPath).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Episodes: ").Append(Episodes).Append("\n");
            sb.Append("  AutoDownloadEpisodes: ").Append(AutoDownloadEpisodes).Append("\n");
            sb.Append("  AutoDownloadSchedule: ").Append(AutoDownloadSchedule).Append("\n");
            sb.Append("  LastEpisodeCheck: ").Append(LastEpisodeCheck).Append("\n");
            sb.Append("  MaxEpisodesToKeep: ").Append(MaxEpisodesToKeep).Append("\n");
            sb.Append("  MaxNewEpisodesToDownload: ").Append(MaxNewEpisodesToDownload).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
